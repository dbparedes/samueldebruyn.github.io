<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ci on Samuel Debruyn</title>
    <link>http://sa.muel.be/tags/ci/</link>
    <description>Recent content in Ci on Samuel Debruyn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>s@muel.be (Samuel Debruyn)</managingEditor>
    <webMaster>s@muel.be (Samuel Debruyn)</webMaster>
    <lastBuildDate>Sat, 25 Jul 2015 17:01:17 +0200</lastBuildDate>
    <atom:link href="http://sa.muel.be/tags/ci/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Wercker step to minify static resources</title>
      <link>http://sa.muel.be/2015/wercker-step-to-minify-static-resources/</link>
      <pubDate>Sat, 25 Jul 2015 17:01:17 +0200</pubDate>
      <author>s@muel.be (Samuel Debruyn)</author>
      <guid>http://sa.muel.be/2015/wercker-step-to-minify-static-resources/</guid>
      <description>&lt;p&gt;I recently blogged a lot about &lt;a href=&#34;http://sa.muel.be/2015/an-introduction-to-hugo-a-static-site-generator/&#34;&gt;static websites&lt;/a&gt; and &lt;a href=&#34;http://sa.muel.be/2015/continuous-integration-with-hugo-and-wercker/&#34;&gt;continuous integration&lt;/a&gt;. There was still one step missing in my continuous integration cycle: &lt;strong&gt;minification&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt; is a great CI tool and it allows you to create custom build steps that can be reused in several projects. So I created a build step to minify HTML, CSS and JS files.&lt;/p&gt;

&lt;p&gt;The build step is available at &lt;a href=&#34;https://github.com/SamuelDebruyn/wercker-step-minify&#34;&gt;https://github.com/SamuelDebruyn/wercker-step-minify&lt;/a&gt; and all you have to do is include &lt;code&gt;samueldebruyn/minify&lt;/code&gt; as a step in your &lt;em&gt;wercker.yml&lt;/em&gt; file.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wercker step to validate hugo themes</title>
      <link>http://sa.muel.be/2015/wercker-step-to-validate-hugo-themes/</link>
      <pubDate>Wed, 15 Jul 2015 13:21:45 +0200</pubDate>
      <author>s@muel.be (Samuel Debruyn)</author>
      <guid>http://sa.muel.be/2015/wercker-step-to-validate-hugo-themes/</guid>
      <description>&lt;p&gt;So last week, I created &lt;a href=&#34;http://sa.muel.be/2015/material-lite-theme-for-hugo/&#34;&gt;a material design theme&lt;/a&gt; for &lt;a href=&#34;http://gohugo.io&#34;&gt;hugo&lt;/a&gt;, a static site generator which I&amp;rsquo;m &lt;a href=&#34;http://sa.muel.be/search/?q=hugo&#34;&gt;quite fond of&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I &lt;a href=&#34;http://sa.muel.be/2015/continuous-integration-with-hugo-and-wercker/&#34;&gt;discovered Wercker&lt;/a&gt;, an awesome CI tool, I went looking for a way to automatically validate themes.&lt;/p&gt;

&lt;p&gt;There wasn&amp;rsquo;t any, so I simply wrote a build step for &lt;a href=&#34;http://wercker.com&#34;&gt;Wercker&lt;/a&gt;. The build step validates a hugo theme using &lt;a href=&#34;https://github.com/spf13/HugoBasicExample&#34;&gt;an example site&lt;/a&gt;. It also checks if you included some files required for a future hugo themes site.&lt;/p&gt;

&lt;p&gt;The code for the build step is available at &lt;a href=&#34;https://github.com/SamuelDebruyn/wercker-step-hugo-theme-check&#34;&gt;https://github.com/SamuelDebruyn/wercker-step-hugo-theme-check&lt;/a&gt; and an example &lt;em&gt;wercker.yml&lt;/em&gt; configuration is included below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;box: debian
build:
  steps:
    - samueldebruyn/hugo-theme-check:
        version: &amp;quot;0.14&amp;quot;
        theme: material-lite
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Continuous integration with hugo and Wercker</title>
      <link>http://sa.muel.be/2015/continuous-integration-with-hugo-and-wercker/</link>
      <pubDate>Tue, 14 Jul 2015 12:45:28 +0200</pubDate>
      <author>s@muel.be (Samuel Debruyn)</author>
      <guid>http://sa.muel.be/2015/continuous-integration-with-hugo-and-wercker/</guid>
      <description>

&lt;h2 id=&#34;why:bd381cc8b449e1516244ba8b37d0246b&#34;&gt;Why?&lt;/h2&gt;

&lt;p&gt;Who doesn&amp;rsquo;t love &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;? It&amp;rsquo;s the easiest way to create a simple website about a repository and you can even use &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; to start blogging.&lt;/p&gt;

&lt;p&gt;As I recently switched from Jekyll to &lt;a href=&#34;http://gohugo.io&#34;&gt;hugo&lt;/a&gt;, I needed a new way to enable continuous integration for my blog.&lt;/p&gt;

&lt;h2 id=&#34;new-to-ci:bd381cc8b449e1516244ba8b37d0246b&#34;&gt;New to CI?&lt;/h2&gt;

&lt;p&gt;Continuous integration, or CI, means that your code is automatically built, tested and/or deployed after each push. Every time you push some commits to a remote repository, the code in that repository is being built.&lt;/p&gt;

&lt;p&gt;I usually have a branch called &lt;em&gt;develop&lt;/em&gt; to which I push fresh code. Then a CI tool checks if that code builds properly and if it does, I merge it to my &lt;em&gt;master&lt;/em&gt; branch. It&amp;rsquo;s a lot like &lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow&#34;&gt;Git Flow&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-about-hugo-and-github-pages:bd381cc8b449e1516244ba8b37d0246b&#34;&gt;What about hugo and GitHub Pages?&lt;/h2&gt;

&lt;p&gt;You could setup a CI tool to build your code after every push on every branch and deploy it to GitHub Pages after a successful build on your stable/&lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;

&lt;h2 id=&#34;in-comes-wercker:bd381cc8b449e1516244ba8b37d0246b&#34;&gt;In comes Wercker&lt;/h2&gt;

&lt;p&gt;I used to use &lt;a href=&#34;http://travis-ci.org&#34;&gt;Travis&lt;/a&gt; for all my CI needs, but then I came across &lt;a href=&#34;http://wercker.com&#34;&gt;Wercker&lt;/a&gt; in the &lt;a href=&#34;http://gohugo.io/tutorials/automated-deployments/&#34;&gt;hugo docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Wercker simplifies CI a lot and relies on &lt;a href=&#34;http://docker.com&#34;&gt;Docker&lt;/a&gt; for its build environments. It also allows you to deploy your builds to different environments (e.g. production, staging, testing&amp;hellip;) Hugo has a guide about how to set it up, but it&amp;rsquo;s a little bit outdated. I might just send a pull request with an update in a few days. Wercker also has a lot of documentation. So with the examples below, you should be able to easily walk through the setup.&lt;/p&gt;

&lt;h3 id=&#34;setting-it-up:bd381cc8b449e1516244ba8b37d0246b&#34;&gt;Setting it up&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a new Wercker app based on the repository containing your hugo source code and give Wercker access rights. You can leave everything else on the default settings. If you&amp;rsquo;d like a badge showing your build status, make sure your app is public.&lt;/li&gt;
&lt;li&gt;Next, edit your app settings and create a custom deploy target including a protected environment variable called &lt;code&gt;GIT_TOKEN&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally, add a file called &lt;em&gt;wercker.yml&lt;/em&gt; to your repository with the code below. Change it to fit your needs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;box: debian
build:
  steps:
    - script:
        name: install git
        code: |
          apt-get update &amp;amp;&amp;amp; apt-get install git -y
    - script:
        name: initialize git submodules
        code: |
            git submodule update --init --recursive
    - arjen/hugo-build:
        version: &amp;quot;0.14&amp;quot;
        theme: crisp
deploy:
  steps:
    - script:
        name: install git
        code: |
          apt-get update &amp;amp;&amp;amp; apt-get install git -y
    - leipert/git-push:
        gh_oauth: $GIT_TOKEN
        basedir: public
        clean_removed_files: true
        branch: master
        repo: SamuelDebruyn/samueldebruyn.github.io
        gh_pages_domain: sa.muel.be
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously, you have to change the following variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;: the hugo version you use&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt;: the theme you use&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: the branch on GitHub Pages you wish to publish on (should be &lt;code&gt;master&lt;/code&gt; for personal/organization pages and &lt;code&gt;gh-pages&lt;/code&gt; for project pages)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: the repository you wish to publish your pages in (should be &lt;code&gt;username/username.github.io&lt;/code&gt; for personal/organization pages and &lt;code&gt;username/project-repo&lt;/code&gt; for project pages)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gh_pages_domain&lt;/code&gt;: a custom CNAME (optional, &lt;a href=&#34;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Push a commit with that file and Wercker should happily start building and deploying your code!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-few-examples:bd381cc8b449e1516244ba8b37d0246b&#34;&gt;A few examples&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;the hugo source code for this blog: &lt;a href=&#34;https://github.com/SamuelDebruyn/sa.muel.be-hugo&#34;&gt;https://github.com/SamuelDebruyn/sa.muel.be-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the wercker app for this blog: &lt;a href=&#34;https://app.wercker.com/#applications/5586dcbdaf7de9c51b02b0d5&#34;&gt;https://app.wercker.com/#applications/5586dcbdaf7de9c51b02b0d5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the generated source code for this blog: &lt;a href=&#34;https://github.com/SamuelDebruyn/samueldebruyn.github.io&#34;&gt;https://github.com/SamuelDebruyn/samueldebruyn.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>