<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Samuel Debruyn</title>
    <link>http://sa.muel.be/tags/android/</link>
    <description>Recent content in Android on Samuel Debruyn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>s@muel.be (Samuel Debruyn)</managingEditor>
    <webMaster>s@muel.be (Samuel Debruyn)</webMaster>
    <lastBuildDate>Mon, 22 Feb 2016 18:59:37 +0100</lastBuildDate>
    <atom:link href="http://sa.muel.be/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dependency injection with Autofac and MVVM Light in Xamarin</title>
      <link>http://sa.muel.be/2016/dependency-injection-with-autofac-and-mvvm-light-in-xamarin/</link>
      <pubDate>Mon, 22 Feb 2016 18:59:37 +0100</pubDate>
      <author>s@muel.be (Samuel Debruyn)</author>
      <guid>http://sa.muel.be/2016/dependency-injection-with-autofac-and-mvvm-light-in-xamarin/</guid>
      <description>

&lt;h2 id=&#34;you-gotta-have-mvvm:f1db64e8f93e80bfb3bc20ca2a851716&#34;&gt;You gotta have MVVM&lt;/h2&gt;

&lt;p&gt;A developer and his tools are inseparable. We all like &lt;a href=&#34;https://sites.google.com/site/unclebobconsultingllc/getting-a-solid-start&#34;&gt;SOLID&lt;/a&gt; and every (.NET) developer has his or her favourite dependency injection tool. There is &lt;a href=&#34;http://www.hanselman.com/blog/ListOfNETDependencyInjectionContainersIOC.aspx&#34;&gt;a lot&lt;/a&gt; to choose from. I like Autofac because of the way it handles modules, the lifetime of a type and how it registers types.&lt;/p&gt;

&lt;p&gt;At the moment I am working on an app for Android, iOS and Windows Phone with Xamarin and when you’re developing an app in C#, you’ll really want to use MVVM. You can either go the hard way and use the built-in classes, you can go the easy way and use a framework like &lt;a href=&#34;http://caliburnmicro.com/&#34;&gt;Caliburn Micro&lt;/a&gt; or you can go the comfortable way and use &lt;a href=&#34;http://mvvmlight.net&#34;&gt;MVVM Light&lt;/a&gt;. MVVM Light is a toolkit. It comes with everything you need and nothing more. It doesn’t force a pattern upon you, you can use the parts you like and safely ignore everything else. Want to get started with MVVM Light? Make sure to read &lt;a href=&#34;http://www.spikie.be/blog/category/MVVM-Light.aspx&#34;&gt;Nico’s practical guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;MVVM Light comes with an IoC container called SimpleIoC. And that’s what it is: a dead-simple IoC container. As I said: you don’t have to use the parts you don’t like. So let me replace SimpleIoC with my dependency injector of choice: Autofac.&lt;/p&gt;

&lt;h2 id=&#34;architecture:f1db64e8f93e80bfb3bc20ca2a851716&#34;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;This is an overview of how I usually structure my solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Legend:
* project
  - namespace
    + class/interface


* MyApp (PCL)
  - MyApp.Utilities
    + MyApp.Utilities.ViewModelLocator
    + MyApp.Utilities.CrossPlatformModule
  - MyApp.ViewModels
  - MyApp.Services
    + MyApp.Services.ICrossPlatformService
    + MyApp.Services.IPlatformSpecificService
    + MyApp.Services.MyCrossPlatformServiceImplementation
    + ...
  - ...
* MyApp.Android
  - MyApp.Android.Utilities
    + MyApp.Android.Utilities.PlatformModule
  - MyApp.Android.Services
    + MyApp.Android.Services.MyPlatformSpecificServiceImplementation
    + ...
  - ...
  + App
* MyApp.iOS
  - MyApp.iOS.Utilities
    + MyApp.iOS.Utilities.PlatformModule
  - MyApp.iOS.Services
    + MyApp.iOS.Services.MyPlatformSpecificServiceImplementation
    + ...
  - ...
  + Main
* MyApp.WindowsPhone
  - MyApp.WindowsPhone.Utilities
    + MyApp.WindowsPhone.Utilities.PlatformModule
  - MyApp.WindowsPhone.Services
    + MyApp.WindowsPhone.Services.MyPlatformSpecificServiceImplementation
    + ...
  - ...
  + App
* MyApp.UnitTests
  - ...
    + ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;where-to-put-what:f1db64e8f93e80bfb3bc20ca2a851716&#34;&gt;Where to put what?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Registrations of viewmodels and cross-platform service implementations: MyApp.Utilities.CrossPlatformModule&lt;/li&gt;
&lt;li&gt;Registrations of platform-specific services: MyApp.Platform.Utilities.PlatformModule&lt;/li&gt;
&lt;li&gt;Static properties referring to viewmodels: MyApp.Utilities.ViewModelLocator&lt;/li&gt;
&lt;li&gt;Autofac initialization: MyApp.Utilities.ViewModelLocator&lt;/li&gt;
&lt;li&gt;ViewModelLocator initialization: App/Main&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-it-all-ties-together:f1db64e8f93e80bfb3bc20ca2a851716&#34;&gt;How it all ties together&lt;/h2&gt;

&lt;p&gt;First off, you start by creating interfaces for all the services you need. Next up, you can start defining implementations for the services and put them in the correct namespaces.&lt;/p&gt;

&lt;p&gt;When that&amp;rsquo;s done, it&amp;rsquo;s time to create our modules. Now, assembly scanning sometimes causes exceptions on certain platforms. Also, PCL&amp;rsquo;s don&amp;rsquo;t have the methods you&amp;rsquo;re used to from ASP.NET or other types of projects for assembly scanning. I know it makes things incredibly easy, but I&amp;rsquo;d advise against it for Xamarin projects. You&amp;rsquo;ll have to register type by type in the modules. Usually I create an array of types and throw them in &lt;code&gt;builder.RegisterTypes(types)&lt;/code&gt;. The platform-specific modules should contain registrations for the platform-specific services. Don&amp;rsquo;t forget the ones that come with Autofac by default.&lt;/p&gt;

&lt;h3 id=&#34;example-of-a-platform-specific-service:f1db64e8f93e80bfb3bc20ca2a851716&#34;&gt;Example of a platform-specific service&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSharp&#34;&gt;using System;
using Autofac;
using MyApp.Android.Services;
using GalaSoft.MvvmLight.Views;

namespace MyApp.Android.Utilities
{
    public class PlatformModule : Module
    {
        protected override void Load(ContainerBuilder builder)
        {
            var navigationService = new NavigationService();
            // navigationService setup...
            builder.RegisterInstance(navigationService).AsImplementedInterfaces();
            
            Type[] types =
            {
                typeof (DialogService),
                typeof (MyPlatformSpecificServiceImplementation)
            };
            builder.RegisterTypes(types).AsImplementedInterfaces();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think you get my point. The module in your PCL should contain all the cross-platform services and the ViewModels. Don&amp;rsquo;t forget to use &lt;code&gt;.SingleInstance()&lt;/code&gt; where you think it&amp;rsquo;s applicable (e.g. where you use &lt;code&gt;HttpClient&lt;/code&gt; or with some ViewModels).&lt;/p&gt;

&lt;p&gt;When that&amp;rsquo;s done, it&amp;rsquo;s time to use a little bit of magic to make sure the right implementations are registered in the right platform. This can be a little bit tricky and it isn&amp;rsquo;t a very clean solution, but It Does The Job &amp;trade;.&lt;/p&gt;

&lt;p&gt;Laurent, the creator of MVVM Light, gave &lt;a href=&#34;http://blog.galasoft.ch/posts/2014/10/my-xamarinevolve-talk-is-online-for-your-viewing-pleasure/&#34;&gt;a talk at Xamarin Evolve&lt;/a&gt; explaining how he makes it work on Android, iOS and Windows Phone. On Android, you make a singleton class called &lt;code&gt;App&lt;/code&gt; while you use the &lt;code&gt;Application&lt;/code&gt; and &lt;code&gt;App&lt;/code&gt; classes on Windows Phone and iOS.&lt;/p&gt;

&lt;p&gt;But first, we need to create our &lt;code&gt;ViewModelLocator&lt;/code&gt;. Microsoft&amp;rsquo;s ServiceLocator and Autofac&amp;rsquo;s extra&amp;rsquo;s make things easier so all you need is &lt;code&gt;nuget Install-Package Autofac.Extras.CommonServiceLocator&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSharp&#34;&gt;public class ViewModelLocator
{
    // you only need this if you&#39;d like to use design-time data which is only supported on XAML-based platforms
    static ViewModelLocator()
    {
        if (!ServiceLocator.IsLocationProviderSet)
        {
            RegisterServices(registerFakes: true);
        }
    }

    public MyViewModel MyViewModel =&amp;gt; ServiceLocator.Current.GetInstance&amp;lt;MyViewModel&amp;gt;();

    public static void RegisterServices(ContainerBuilder registrations = null, bool registerFakes = false)
    {
        var builder = new ContainerBuilder();

        // you only need this if-clause if you&#39;d like to use design-time data which is only supported on XAML-based platforms
        if (ViewModelBase.IsInDesignModeStatic || registerFakes)
        {
            builder.RegisterModule&amp;lt;FakeServiceModule&amp;gt;();
        }
        else
        {
            // just use this one if you don&#39;t use design-time data
            builder.RegisterModule&amp;lt;CrossPlatformModule&amp;gt;();
        }

        var container = builder.Build();
        registrations?.Update(container);

        ServiceLocator.SetLocatorProvider(() =&amp;gt; new AutofacServiceLocator(container));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in all of the mentioned app initializers mentioned above I have a method that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSharp&#34;&gt;private static void RegisterServices()
{
    var builder = new ContainerBuilder();
    builder.RegisterModule&amp;lt;PlatformModule&amp;gt;();
    ViewModelLocator.RegisterServices(builder);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That method is then called at the moment I initialize the &lt;code&gt;ViewModelLocator&lt;/code&gt;. Laurent&amp;rsquo;s talk goes in depth on how to do that so I won&amp;rsquo;t cover that part.&lt;/p&gt;

&lt;h2 id=&#34;servicelocator:f1db64e8f93e80bfb3bc20ca2a851716&#34;&gt;ServiceLocator&lt;/h2&gt;

&lt;p&gt;Whenever you need an instance of a registered type, you can use the &lt;code&gt;ServiceLocator&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myService = ServiceLocator.Current.GetInstance&amp;lt;IMyService&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll only need this in the (usually empty) code-behind parts like activities (Android), ViewControllers (iOS) or the page classes (Windows Phone).&lt;/p&gt;

&lt;p&gt;You can even use &lt;a href=&#34;http://docs.autofac.org/en/latest/advanced/delegate-factories.html&#34;&gt;factories&lt;/a&gt; as long as you register them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myVar = &amp;quot;some required constructor parameter for e.g. a ViewModel&amp;quot;;
var factory = ServiceLocator.Current.GetInstance&amp;lt;MyViewModelRequiringAParameter.Factory&amp;gt;();
var vm = factory(myVar);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;questions:f1db64e8f93e80bfb3bc20ca2a851716&#34;&gt;Questions?&lt;/h2&gt;

&lt;p&gt;Questions? Tips/suggestions? &lt;a href=&#34;http://sa.muel.be/about/&#34;&gt;Let me know!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get around OnePlus&#39;s horrible invite system</title>
      <link>http://sa.muel.be/2015/how-to-get-around-onepluss-horrible-invite-system/</link>
      <pubDate>Fri, 02 Oct 2015 15:34:19 +0200</pubDate>
      <author>s@muel.be (Samuel Debruyn)</author>
      <guid>http://sa.muel.be/2015/how-to-get-around-onepluss-horrible-invite-system/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://oneplus.net/&#34;&gt;OnePlus&lt;/a&gt;, the company famous for its &lt;a href=&#34;https://www.google.be/search?q=oneplus+service+horror+story&#34;&gt;terrible service&lt;/a&gt; and its &lt;a href=&#34;http://www.androidpolice.com/2015/07/30/editorial-if-oneplus-will-basically-just-lie-with-marketing-slogans-we-have-no-reason-to-respect-them/&#34;&gt;miserable invite system&lt;/a&gt;, failed once again.&lt;/p&gt;

&lt;p&gt;Back in August, when they were about to launch the OnePlus Two, the &lt;em&gt;2016 flagship killer&lt;/em&gt; which turned out be merely be a 2014 kind-of-flagship, they launched &lt;a href=&#34;https://oneplus.net/invites&#34;&gt;a waiting list&lt;/a&gt;. You can subscribe to this list and every time an invite is left unused, it&amp;rsquo;s sent to the next person on the list.&lt;/p&gt;

&lt;p&gt;The list quickly grew to hundreds of thousands of people, but there was one catch: you could get higher on the list if someone else subscribed to the list with a URL you shared. All you needed to subscribe was a unique email address.&lt;/p&gt;

&lt;p&gt;If you own a domain, you can set up a catch all address so that everything @yourdomain.tld arrives in your mailbox. And if you have a Gmail account, everything with yourusername+somethingrandom@gmail.com arrives in your mailbox. So most people actually have an infinite amount of email addresses.&lt;/p&gt;

&lt;p&gt;As I was interested in buying a OnePlus Two at the time, I subscribed with my email address and used about 100 other email addresses to get myself higher on the list. As this &lt;em&gt;trick&lt;/em&gt; was mentioned a lot on Reddit, I figured OnePlus would have &lt;em&gt;fixed&lt;/em&gt; this &lt;em&gt;bug&lt;/em&gt; in their invite system somehow.&lt;/p&gt;

&lt;p&gt;Turns out, they didn&amp;rsquo;t. A few days ago, I started receiving tens of invites for a OnePlus Two. There was another catch: you can only use these invites with the address you used for the waiting list. It&amp;rsquo;s &lt;em&gt;impossible&lt;/em&gt; to share the invites.&lt;/p&gt;

&lt;h2 id=&#34;here-s-the-workaround:2a147718c3e2bf306b7baa94f84231a6&#34;&gt;Here&amp;rsquo;s the workaround:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Register a new OnePlus account with the email address that received the invite.&lt;/li&gt;
&lt;li&gt;Confirm the account with an email you receive shortly after registration.&lt;/li&gt;
&lt;li&gt;Claim the invite using the link in the first email you received.&lt;/li&gt;
&lt;li&gt;Change the email address of the newly registered account to the one of the person that is going to use the invite. Note that is may not be linked to an existing OnePlus account.&lt;/li&gt;
&lt;li&gt;The buyer will receive an email saying he has to confirm his/her account. The confirmation link doesn&amp;rsquo;t work.&lt;/li&gt;
&lt;li&gt;The buyer should use &lt;em&gt;I forgot my password&lt;/em&gt; feature for OnePlus accounts.&lt;/li&gt;
&lt;li&gt;The buyer receives another link to confirm his/her email address. This time the link works and (s)he can choose a new password.&lt;/li&gt;
&lt;li&gt;The buyer can now sign in and use the invite.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;m not buying a OnePlus Two after reading about the OnePlus service horror stories. Also, it really isn&amp;rsquo;t a flagship killer. It&amp;rsquo;s just a mid-budget smartphone like any other. You can get a way better smartphone for your money with the Moto X Play (Europe) or the Nexus 5X (US).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Google cripples outdated Android devices</title>
      <link>http://sa.muel.be/2015/how-google-cripples-outdated-android-devices/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      <author>s@muel.be (Samuel Debruyn)</author>
      <guid>http://sa.muel.be/2015/how-google-cripples-outdated-android-devices/</guid>
      <description>

&lt;h2 id=&#34;why-i-downgraded-my-nexus-5:c209b0e2d2354aad9e56c75e001a618a&#34;&gt;Why I downgraded my Nexus 5&lt;/h2&gt;

&lt;p&gt;About a year ago Google released &lt;a href=&#34;http://developer.android.com/preview/index.html&#34;&gt;Android L Developer Preview&lt;/a&gt;. This preview of the upcoming Android Lollipop (5.0) release contained a lot of bugs and was definitely not &lt;em&gt;daily driver&lt;/em&gt; material.&lt;/p&gt;

&lt;p&gt;When Google started updating Nexus devices to the &lt;a href=&#34;http://officialandroid.blogspot.be/2014/10/android-be-together-not-same.html&#34;&gt;final version of Android Lollipop&lt;/a&gt; last autumn, it was clear that not all bugs were gone. Users noticed several bugs of which the &lt;a href=&#34;https://code.google.com/p/android/issues/detail?id=79729&#34;&gt;memory leak on the Nexus 5&lt;/a&gt; was the worst. Power users had to reboot their device every 2 days and other users could go half a week without rebooting. Without a reboot, apps closed automatically a few seconds after opening and background services like Spotify shut down the moment you opened a memory intensive app.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.androidpolice.com/2014/12/15/nexus-5-receive-android-5-0-1-today-according-sprint-t-mobile/&#34;&gt;Android 5.0.1 update&lt;/a&gt; came and went while fixing a few bugs, but the memory leak was still there. Apparently it had something to do with the fade out animation when you turned off your screen.&lt;/p&gt;

&lt;p&gt;Then, a few weeks back, Google released Android 5.1. It contained some UI and functional improvements and the memory leak was gone, at last! But don’t start cheering too soon. &lt;a href=&#34;http://www.androidpolice.com/2015/03/15/google-android-5-1-memory-leak-has-been-fixed-internally-no-timeline-for-release-yet/&#34;&gt;Android 5.1 contained another memory leak&lt;/a&gt;. The Android developers already fixed it, but at the time of writing, they still don’t have a timeframe for a release of this fix. The rebooting went on, every other day.&lt;/p&gt;

&lt;p&gt;What if you have a car accident and you need to call emergency services?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Oh no, wait, I have to reboot my phone first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This drives me nuts. This seems a critical bug to me. A (smart)phone mustto be able to perform its most basic function all the time: calling.&lt;/p&gt;

&lt;p&gt;I considered downgrading while I was on Android 5.0.1, but I quickly delayed this decision when I heard about the upcoming 5.1 update that would fix this memory leak. However, when I started noticing the second memory leak, I had it. Time to go back to the latest stable version: Android 4.4.4 KitKat.&lt;/p&gt;

&lt;h2 id=&#34;how-i-downgraded:c209b0e2d2354aad9e56c75e001a618a&#34;&gt;How I downgraded&lt;/h2&gt;

&lt;p&gt;The downgrade was quite simple: I unlocked my phone and flashed the 4.4.4 &lt;a href=&#34;https://developers.google.com/android/nexus/images&#34;&gt;factory image&lt;/a&gt;. The next thing I did was rooting my phone, which later turned out to be necessary.&lt;/p&gt;

&lt;h2 id=&#34;and-then-it-all-started:c209b0e2d2354aad9e56c75e001a618a&#34;&gt;And then it all started&lt;/h2&gt;

&lt;p&gt;One of the reasons why I downgraded, was that Android 4.4.4 has remarkably better battery life than Android Lollipop. So when my battery started draining at more than 20% an hour, I knew that something was wrong. Also, the notification about the system update was impossible to remove.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, Google, I know. Now let me go on with my life, I don’t want your update.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;digging-a-little-deeper:c209b0e2d2354aad9e56c75e001a618a&#34;&gt;Digging a little deeper&lt;/h2&gt;

&lt;p&gt;Android used to have a service called SystemUpdateService in the Google Services Framework (preinstalled system app) that would handle OS updates. It seems like this was replaced by Google Play Services. The &lt;a href=&#34;https://developer.android.com/google/play-services/index.html&#34;&gt;Google Play Services&lt;/a&gt; app is updated automatically via the Google &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.gms&#34;&gt;Play Store&lt;/a&gt;. This app contains another SystemUpdateService and disables the SystemUpdateService in the Google Services Framework mentioned earlier.&lt;/p&gt;

&lt;p&gt;This service seems to cause a &lt;a href=&#34;http://developer.android.com/reference/android/os/PowerManager.WakeLock.html&#34;&gt;wakelock&lt;/a&gt;, which makes sure that my Nexus 5 never goes to deep sleep. (Deep sleep is like a standby mode with very low power usage.) So there’s my battery drain. But how to stop it? Disabling this service doesn’t help at all. The notification disappears but the wakelock is still there.&lt;/p&gt;

&lt;p&gt;Next step: Google and &lt;a href=&#34;http://forum.xda-developers.com/google-nexus-5/general/how-to-disable-ota-lollipop-wakelock-t2952845&#34;&gt;XDA&lt;/a&gt;. I found out about the 3 receivers that trigger this service. Disabling these receivers would make sure that SystemUpdateService never runs and the wakelock is gone.&lt;/p&gt;

&lt;p&gt;The receivers are to be found in 3 categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After startup (runs after booting your device, obviously)&lt;/li&gt;
&lt;li&gt;Connectivity changed (runs when the status of your Wi-Fi or cellular data connections change)&lt;/li&gt;
&lt;li&gt;Secret code entered (runs when you enter a secret code into the dialer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So yeah, it’s quite impossible to escape from this service. The commands I listed below correctly disable these receivers and related activities. It doesn’t disable the SystemUpdateService itself as this would cause wakelocks. Run them in a terminal on your device or on your PC connected with your phone over &lt;a href=&#34;http://developer.android.com/tools/help/adb.html&#34;&gt;ADB&lt;/a&gt;. Did I mention you need to be &lt;em&gt;rooted&lt;/em&gt; to run it?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell su -c pm disable com.google.android.gms/.update.SystemUpdateActivity
adb shell su -c pm disable com.google.android.gms/.update.SystemUpdateService$ActiveReceiver
adb shell su -c pm disable com.google.android.gms/.update.SystemUpdateService$Receiver
adb shell su -c pm disable com.google.android.gms/.update.SystemUpdateService$SecretCodeReceiver
adb shell su -c pm disable com.google.android.gsf/.update.SystemUpdateActivity
adb shell su -c pm disable com.google.android.gsf/.update.SystemUpdatePanoActivity
adb shell su -c pm disable com.google.android.gsf/.update.SystemUpdateService$Receiver
adb shell su -c pm disable com.google.android.gsf/.update.SystemUpdateService$SecretCodeReceiver
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wow-that-was-complicated:c209b0e2d2354aad9e56c75e001a618a&#34;&gt;Wow, that was complicated&lt;/h2&gt;

&lt;p&gt;For power users this probably wasn’t a lot of work, but this is a real annoyance for regular users. But regular users don’t buy Nexus devices, don’t they?&lt;/p&gt;

&lt;p&gt;For years, we all &lt;a href=&#34;http://www.google.com/trends/explore#q=android%20fragmentation&amp;amp;cmpt=q&#34;&gt;complained about fragmentation&lt;/a&gt; and a lack of OS updates. Today it has become impossible to ignore an OS update due to the immense battery drain and the frustrating persistent notification.&lt;/p&gt;

&lt;h2 id=&#34;this-post-is-all-about-nexus-devices-what-about-my-device:c209b0e2d2354aad9e56c75e001a618a&#34;&gt;This post is all about Nexus devices, what about my device?&lt;/h2&gt;

&lt;p&gt;Most Android devices come with Google services like the Google Play Store. This means they also come with Google Play Services or the Google Services Framework or both. So, if you ever want to downgrade your Android device to a stock image, be sure to disable those pesky receivers…&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>