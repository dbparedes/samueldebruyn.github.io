<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Samuel Debruyn</title>
    <link>https://chipsncookies.com/tags/linux/</link>
    <description>Recent content in Linux on Samuel Debruyn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>s@muel.be (Samuel Debruyn)</managingEditor>
    <webMaster>s@muel.be (Samuel Debruyn)</webMaster>
    <lastBuildDate>Wed, 02 Mar 2016 14:40:08 +0100</lastBuildDate>
    <atom:link href="https://chipsncookies.com/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting up a Raspberry Pi as a git server for Windows clients</title>
      <link>https://chipsncookies.com/2016/setting-up-a-raspberry-pi-as-a-git-server-for-windows-clients/</link>
      <pubDate>Wed, 02 Mar 2016 14:40:08 +0100</pubDate>
      <author>s@muel.be (Samuel Debruyn)</author>
      <guid>https://chipsncookies.com/2016/setting-up-a-raspberry-pi-as-a-git-server-for-windows-clients/</guid>
      <description>

&lt;p&gt;Sometimes you&amp;rsquo;re not allowed or you don&amp;rsquo;t want to publish source code on GitHub, Bitbucket etc. In this post, I&amp;rsquo;ll explain how you can set up a Raspberry Pi (or any other Linux server) as a git repository server and how you can configure Windows clients for that server. We&amp;rsquo;ll automate everything from authentication to creating and deleting repositories.&lt;/p&gt;

&lt;h2 id=&#34;installation-of-the-prerequisites:7d26ad02477b183361c06277d4fafc51&#34;&gt;Installation of the prerequisites&lt;/h2&gt;

&lt;h3 id=&#34;on-the-windows-clients:7d26ad02477b183361c06277d4fafc51&#34;&gt;On the Windows clients&lt;/h3&gt;

&lt;p&gt;On your Windows clients, you&amp;rsquo;ll need PuTTY, Pageant, Plink, PuTTYgen and Git Bash. The installers are very straightforward.&lt;/p&gt;

&lt;p&gt;First install &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&#34;&gt;PuTTY and its related tools&lt;/a&gt;. After the installation, add the installation directory to your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Windows 10:
System properties &amp;gt; Advanced system settings &amp;gt; Environment variables &amp;gt; System variables &amp;gt; Path &amp;gt; Add new &amp;gt;
C:\Program Files (x86)\PuTTY

Windows 8.1 or earlier: the directories in the Path variable are separated with a ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When that&amp;rsquo;s done, install &lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;Git and its utilities&lt;/a&gt;. During the installation, select the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use Git and optional Unix tools from the Windows Command Prompt&lt;/li&gt;
&lt;li&gt;Use (Tortoise)Plink: &lt;code&gt;C:\Program Files (x86)\PuTTY\plink.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Checkout Windows-style, commit Unix-style line endings&lt;/li&gt;
&lt;li&gt;Use Windows&amp;rsquo; default console window&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;on-the-raspberry-pi-linux-server:7d26ad02477b183361c06277d4fafc51&#34;&gt;On the Raspberry Pi / Linux server&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need ssh and git. On Debian-based systems, you can install them with the command below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; apt-get install -y openssh-server git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;d recommend to &lt;a href=&#34;http://www.cyberciti.biz/faq/debian-linux-install-openssh-sshd-server/&#34;&gt;setup SSH&lt;/a&gt; and PuTTY for your personal user account and use that to perform the tasks in this guide.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-the-linux-server:7d26ad02477b183361c06277d4fafc51&#34;&gt;Setting up the Linux server&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re using a Raspberry Pi, I&amp;rsquo;d suggest not using your SD card to store your git repositories. Instead, use an external hard drive or a USB drive. I&amp;rsquo;m not going to explain how to mount a USB drive, as there are already &lt;a href=&#34;http://www.raspberrypi-spy.co.uk/2014/05/how-to-mount-a-usb-flash-disk-on-the-raspberry-pi/&#34;&gt;a lot of guides&lt;/a&gt; explaining this.&lt;/p&gt;

&lt;p&gt;First, we&amp;rsquo;ll have to create a new user and use its home directory as the root of our git repositories.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo adduser --home /path/to/where/you/want/to/store/your/repos --disabled-password gituser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command will ask you a few details about the user which you can safely ignore by pressing &lt;em&gt;Enter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Next up, we&amp;rsquo;ll be configuring the SSH daemon. Use &lt;code&gt;sudo nano /etc/ssh/sshd_config&lt;/code&gt; to open up a text editor with the configuration file. Make sure it contains the lines below, so paste them in (&lt;em&gt;right click&lt;/em&gt;) or modify the existing configuration options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PubkeyAuthentication yes # enable key-based authentication
AuthorizedKeysFile %h/.ssh/authorized_keys # where the authorized keys are stored
PermitRootLogin no # security measure: do not allow root to sign in using ssh
AllowUsers gituser # make sure our user is allowed to connect using SSH, add other users here separated with spaces if you want to allow them to use SSH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save with &lt;em&gt;CTRL+S&lt;/em&gt; and exit with &lt;em&gt;CTRL+X&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When that&amp;rsquo;s done, it&amp;rsquo;s time to log in as the newly created user with &lt;code&gt;sudo su gituser&lt;/code&gt; and go to its home directory using &lt;code&gt;cd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a file to store the SSH authentication key with the right permissions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;mkdir .ssh
chdmod 700 .ssh
cd .ssh
touch authorized_keys
chmod 600 authorized_keys
nano authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will open up a text editor.&lt;/p&gt;

&lt;p&gt;Now, back to our Windows machine. Let&amp;rsquo;s generate a new key using PuTTYgen. I usually create a SSH-2 RSA key consisting of 4096 bits. Save the private key somewhere on your machine and copy the generated public key and paste it in the text editor on the Linux machine.&lt;/p&gt;

&lt;p&gt;On the Linux machine, save the file and exit the text editor. To make sure the new configuration is active, restart the SSH server using &lt;code&gt;sudo service ssh restart&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because we want to automate the creation and deletion of git repositories, we&amp;rsquo;ll need two scripts. I&amp;rsquo;ve provided them below.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/SamuelDebruyn/5c7004e92b9c293acc5a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Use the following steps to put them on your system and make them runnable:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nano delrepo.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Paste script 1 using &lt;em&gt;right click&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Save and exit the text editor (&lt;em&gt;CTRL+S&lt;/em&gt;, &lt;em&gt;CTLRL+X&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nano initrepo.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Paste script 2 using &lt;em&gt;right click&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Save and exit the text editor (&lt;em&gt;CTRL+S&lt;/em&gt;, &lt;em&gt;CTLRL+X&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod +x ./*repo.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This concludes the setup on our Linux box.&lt;/p&gt;

&lt;h2 id=&#34;configuring-the-windows-clients:7d26ad02477b183361c06277d4fafc51&#34;&gt;Configuring the Windows clients&lt;/h2&gt;

&lt;p&gt;Time to fire up Pageant and add the private key we created before. Afterwards, fire up PuTTY and configure it to connect to the Linux machine.&lt;/p&gt;

&lt;p&gt;You need to supply the following configuration options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Session &amp;gt; Host name / IP address: address of the Linux machine&lt;/li&gt;
&lt;li&gt;Session &amp;gt; Port: default is 22 (can be set in &lt;em&gt;sshd_config&lt;/em&gt; with &lt;code&gt;Port 12345&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Connection &amp;gt; Data &amp;gt; Auto-login username: username of the user you created (I used &lt;em&gt;gituser&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Connection &amp;gt; SSH &amp;gt; Auth &amp;gt; Authentication methods &amp;gt; Attempt authentication using Pageant: must be checked&lt;/li&gt;
&lt;li&gt;Connection &amp;gt; SSH &amp;gt; Auth &amp;gt; Authentication methods &amp;gt; Attempt &amp;ldquo;keyboard-interactive&amp;rdquo; auth: should not be checked&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to save the session (Session &amp;gt; Saved sessions - I saved it as &lt;em&gt;gituser&lt;/em&gt;). Then open the connection. PuTTY will warn you about the new host, so type &lt;code&gt;yes&lt;/code&gt; and press &lt;em&gt;Enter&lt;/em&gt; to confirm. You should now be successfully connected to the Linux box using SSH. You can close the session if that&amp;rsquo;s the case, otherwise verify if you&amp;rsquo;ve followed every step in this guide correctly and if you can ping the Linux machine.&lt;/p&gt;

&lt;p&gt;To complete our setup, we need to make Plink the SSH agent for git. All you need to do is create a new environment variable called &lt;code&gt;GIT_SSH&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System properties &amp;gt; Advanced system settings &amp;gt; Environment variables &amp;gt; System variables &amp;gt; New &amp;gt;
Name: GIT_SSH
Value: C:\Program Files (x86)\PuTTY\plink.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a new repository to use as a remote, open a Windows Command Prompt and type &lt;code&gt;plink name-of-the-saved-session ./initrepo.sh name-of-the-new-repo&lt;/code&gt;. To delete an existing repository, you can use &lt;code&gt;plink name-of-the-saved-session ./delrepo.sh name-of-the-existing-repo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To add the repository you created as a remote to a git repository, use &lt;code&gt;git remote add how-you-want-to-name-the-remote ssh://address-of-the-linux-machine/~/name-of-the-repository.git&lt;/code&gt;. If you&amp;rsquo;re not using port 22 for SSH, put the port after the address, separated with colon.&lt;/p&gt;

&lt;p&gt;Because we use Pageant for authentication, we need to load Pageant with the private key every time we boot up our Windows machine. This is the last part of the process we have to automate. Create a new shortcut to Pageant in the folder &lt;code&gt;%appdata%\Microsoft\Windows\Start Menu\Programs\Startup&lt;/code&gt;. Now add the keys to that shortcut as explained in &lt;a href=&#34;http://blog.shvetsov.com/2010/03/making-pageant-automatically-load-keys.html&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So this was my guide to setting up a Linux machine as a git repository server for Windows clients. You can now start committing and pushing away! &lt;a href=&#34;https://twitter.com/SamuelDebruyn&#34;&gt;Let me know&lt;/a&gt; if you need help or if you&amp;rsquo;re stuck somewhere.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Secure SSH access with 2-step authentication (extended)</title>
      <link>https://chipsncookies.com/2014/secure-ssh-access-with-2-step-authentication-extended/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 +0000</pubDate>
      <author>s@muel.be (Samuel Debruyn)</author>
      <guid>https://chipsncookies.com/2014/secure-ssh-access-with-2-step-authentication-extended/</guid>
      <description>

&lt;p&gt;In this quick tutorial I&amp;rsquo;ll show you how to secure SSH access to your Linux server with 2-step authentication. Why did I call this post &amp;lsquo;extended&amp;rsquo;? Because I&amp;rsquo;ll show you how to add extra rules so you don&amp;rsquo;t have to use 2-step authentication from certain locations.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to explain &lt;a href=&#34;https://support.google.com/accounts/answer/180744&#34;&gt;what 2-step authentication is&lt;/a&gt;. You&amp;rsquo;ll need SSH or CLI access to your Linux device with root rights and a 2-step authentication app on your phone, tablet or PC:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&#34;&gt;Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/nl/app/google-authenticator/id388497605&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.windowsphone.com/en-us/store/app/authenticator/021dd79f-0598-e011-986b-78e7d1fa76f8&#34;&gt;Windows Phone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://m.google.com/authenticator&#34;&gt;BlackBerry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.howtogeek.com/129014/how-to-use-google-authenticator-and-other-two-factor-authentication-apps-without-a-smartphone/&#34;&gt;more&amp;hellip;.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The PAM-module that we need is called &lt;em&gt;libpam-google-authenticator&lt;/em&gt; so on Debian/Ubuntu/&amp;hellip; you can use the following command to install this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y libpam-google-authenticator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;google-authenticator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to set this up for your account. Do not use &lt;em&gt;sudo&lt;/em&gt; or something like that, use your own account!&lt;/p&gt;

&lt;p&gt;Now open the file &lt;em&gt;/etc/pam.d/sshd&lt;/em&gt;, you &lt;a href=&#34;https://help.ubuntu.com/community/Nano&#34;&gt;can do this&lt;/a&gt; with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/pam.d/sshd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and add the following at the end of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;auth [success=1 default=ignore] pam_access.so accessfile=/etc/security/access-local.conf
auth required pam_google_authenticator.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create the file &lt;em&gt;/etc/security/access-local.conf&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/security/access-local.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ : ALL : ????
+ : ALL : LOCAL
- : ALL : ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace the &lt;em&gt;????&lt;/em&gt; with the subnet or the IP that should be allowed to access SSH without the second verification step. &lt;a href=&#34;http://linux.die.net/man/5/access.conf&#34;&gt;You could enter&lt;/a&gt; an IP like &lt;em&gt;192.168.0.5&lt;/em&gt; or a subnet like &lt;em&gt;192.168.0.0/24&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now edit the file _/etc/ssh/sshd&lt;em&gt;config&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and make sure it says&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ChallengeResponseAuthentication yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default it says &lt;em&gt;no&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now restart the SSH service and you should be good!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service ssh restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ntp:a354de51d09f492e98f062205a9fe7ab&#34;&gt;NTP&lt;/h2&gt;

&lt;p&gt;Ahtanu has &lt;a href=&#34;https://twitter.com/ahtanu/status/432092745348677632&#34;&gt;let me know&lt;/a&gt; via Twitter that you&amp;rsquo;d better make sure your device is properly configured as an NTP client. Most desktop Linux distributions have this already in order but here are the instructions for Debian-based distributions to make sure NTP is configured properly.&lt;/p&gt;

&lt;p&gt;First, update or install the NTP client.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y ntp ntp-simple ntpdate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, set the timezone and the date on your device:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo tzselect
sudo date --set 2014-12-31
sudo date --set 20:20:20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now edit the file ntp.conf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/ntp.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and make sure it has 2 NTP-servers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server 0.be.pool.ntp.org
server 1.be.pool.ntp.org
server 2.be.pool.ntp.org
server 3.be.pool.ntp.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eventually restart the NTP service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service ntpd restart
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Wake up your computer(s) with a simple email using a Raspberry Pi</title>
      <link>https://chipsncookies.com/2013/wake-up-your-computers-with-a-simple-email-using-a-raspberry-pi/</link>
      <pubDate>Sun, 22 Dec 2013 00:00:00 +0000</pubDate>
      <author>s@muel.be (Samuel Debruyn)</author>
      <guid>https://chipsncookies.com/2013/wake-up-your-computers-with-a-simple-email-using-a-raspberry-pi/</guid>
      <description>

&lt;h2 id=&#34;introduction:4dbe74a959a15e10538c8aa162f12748&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I have a &lt;a href=&#34;https://www.spotify.com/premium/&#34;&gt;Spotify Premium subscription&lt;/a&gt; but I also have a few CDs which are not available on streaming services. I don&amp;rsquo;t like the whole process of syncing files, that&amp;rsquo;s why I took a Spotify subscription in the first place.  Google offers a solution with &lt;a href=&#34;https://play.google.com/about/music/&#34;&gt;Play Music&lt;/a&gt;: you can upload up to 20,000 songs to their servers for free and stream them to all of your devices. I didn&amp;rsquo;t use this because the Google Play Music app was too slow for my previous phone (&lt;a href=&#34;http://www.android.com/devices/detail/nexus-s&#34;&gt;Google Nexus S&lt;/a&gt;). So I decided to put my CDs on a computer and use that computer as a server with &lt;a href=&#34;http://www.tonido.com/tonidodesktop/&#34;&gt;Tonido&lt;/a&gt;. This way I could stream my music over the Internet to all of my devices. As a plus I could also put all my photos on this device so that I could show them to friends or family wherever I am.&lt;/p&gt;

&lt;p&gt;Because this was just a standard computer this would cost a lot of electricity while I wouldn&amp;rsquo;t use it 90% of the time. I would only need it when I wanted to listen to a song I own which isn&amp;rsquo;t available on Spotify. That&amp;rsquo;s why I came up with this idea.&lt;/p&gt;

&lt;p&gt;I want my computer to be available when I need it and to be in standby mode when I don&amp;rsquo;t need it. This way the computer boots up in a few seconds when I wake it up. I want to be able to wake it up from all over the world. I have a &lt;a href=&#34;http://www.raspberrypi.org/faqs#introWhatIs&#34;&gt;Raspberry Pi&lt;/a&gt; which is always on and &lt;a href=&#34;http://www.raspberrypi.org/faqs#power&#34;&gt;doesn&amp;rsquo;t require much power&lt;/a&gt;. So I created a way to send an &lt;strong&gt;email to a certain address which then wakes up my computer&lt;/strong&gt; within the minute.&lt;/p&gt;

&lt;h2 id=&#34;requirements:4dbe74a959a15e10538c8aa162f12748&#34;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;working Raspberry Pi (or similar device with Linux and python) with a constant connection to the Internet&lt;/li&gt;
&lt;li&gt;the computer you want to wake up and your Raspberry Pi need to be in the same local network&lt;/li&gt;
&lt;li&gt;Email account (preferably Gmail or an unused mailbox)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setup:4dbe74a959a15e10538c8aa162f12748&#34;&gt;Setup&lt;/h2&gt;

&lt;h3 id=&#34;on-the-computer:4dbe74a959a15e10538c8aa162f12748&#34;&gt;On the computer&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Make sure the computer goes to sleep when you don&amp;rsquo;t use it. In Windows you can find this setting by searching for &lt;em&gt;power&lt;/em&gt;. I have my computer set to go to sleep after 3 hours of inactivity. If you have trouble putting your computer to sleep you can analyze the problems &lt;a href=&#34;http://technet.microsoft.com/en-us/library/cc748940(v=ws.10&#34;&gt;using the powercfg command&lt;/a&gt;.aspx).&lt;/li&gt;
&lt;li&gt;Make sure the computer wakes upon receiving a magic packet. This is a special type of TCP or UDP unicast packet that is processed by the BIOS and wakes up a computer. This also works if the computer is not in standby mode. You probably have to change &lt;a href=&#34;http://www.tomshardware.com/reviews/bios-beginners,1126-8.html&#34;&gt;a setting in your BIOS&lt;/a&gt; (press one of the F-buttons at boot time) and in your NIC&amp;rsquo;s settings. You can view your NIC&amp;rsquo;s settings in Windows using &lt;a href=&#34;http://windows.microsoft.com/en-us/windows-vista/open-device-manager&#34;&gt;Device Management&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/library/gg252549(v=ws.10&#34;&gt;Find the MAC address&lt;/a&gt;.aspx) of the connected network adapter.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;in-your-gmail-http-www-gmail-com-account:4dbe74a959a15e10538c8aa162f12748&#34;&gt;In your &lt;a href=&#34;http://www.gmail.com&#34;&gt;Gmail&lt;/a&gt; account&lt;/h3&gt;

&lt;p&gt;Create a new filter for a specific email address. You can use *yourusername&lt;strong&gt;+anythingyouwant&lt;/strong&gt;@gmail.com*&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Search for &lt;em&gt;to:theaddressyouchoose&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click on the little arrow left to the search button&lt;/li&gt;
&lt;li&gt;Click on the link to create a new filter in the pop-up that appears&lt;/li&gt;
&lt;li&gt;Check the following options: skip inbox, mark as read, label &lt;em&gt;new label&lt;/em&gt;, never send to spam, never mark as important&lt;/li&gt;
&lt;li&gt;Enable IMAP (Settings &amp;gt; Forwarding &amp;amp; POP/IMAP &amp;gt; Enable IMAP)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;on-your-raspberry-pi:4dbe74a959a15e10538c8aa162f12748&#34;&gt;On your Raspberry Pi&lt;/h3&gt;

&lt;p&gt;I assume you know how to log in to your Raspberry Pi in command line, over SSH or directly. There is a lot of documentation &lt;a href=&#34;http://elinux.org/RPi_Remote_Access&#34;&gt;available&lt;/a&gt; on their website.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install the &lt;a href=&#34;https://wiki.debian.org/WakeOnLan&#34;&gt;wakeonlan&lt;/a&gt; package using the following command:
  &lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get -y install wakeonlan&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use nano or another text editor to create the following file:
  &lt;code&gt;wakeonlan 01:23:45:67:89:AB&lt;/code&gt;
  &lt;em&gt;01:23:45:67:89:AB&lt;/em&gt; being the MAC address of the computer you want to wake up with your email. Name the file &lt;strong&gt;anynameyouwant&lt;/strong&gt;&lt;em&gt;.sh&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create another file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import imaplib
import os
mail = imaplib.IMAP4_SSL(&#39;imap.gmail.com&#39;)
mail.login(&#39;YOUR USERNAME@gmail.com&#39;, &#39;YOUR PASSWORD&#39;)
answer = mail.select(&#39;THE LABEL YOU CHOOSE&#39;)
if int(answer[1][0]) &amp;gt; 0:
  os.system(&#39;THE PATH TO THE FILE YOU CREATED IN STEP 2&#39;)
  mail.store(&amp;quot;1:*&amp;quot;,&#39;+X-GM-LABELS&#39;, &#39;\\Trash&#39;)
mail.close()
mail.logout()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Replace all the words in capitals and name the file &lt;strong&gt;anythingyouwant&lt;/strong&gt;&lt;em&gt;.py&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use &lt;code&gt;crontab -e&lt;/code&gt; to edit the crontab file. Scroll to the bottom and add the following line:
  &lt;code&gt;* * * * * /usr/bin/python PATH TO THE FILE YOU CREATED IN STEP 3&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save the file using CTRL+X&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;done:4dbe74a959a15e10538c8aa162f12748&#34;&gt;Done!&lt;/h2&gt;

&lt;p&gt;Now you can send an email to the address you choose in the Gmail part above and your computer will wake up within the minute!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>